
R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ordr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('ordr')
Loading required package: ggplot2
Warning: package 'ggplot2' was built under R version 4.4.3
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("biplot-stats")
> ### * biplot-stats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: biplot-stats
> ### Title: Convenience stats for row and column matrix factors
> ### Aliases: biplot-stats stat_rows_ellipse stat_cols_ellipse
> ###   stat_rows_center stat_cols_center stat_rows_star stat_cols_star
> ###   stat_rows_chull stat_cols_chull stat_rows_cone stat_cols_cone
> ###   stat_rows_scale stat_cols_scale stat_rows_spantree stat_cols_spantree
> 
> ### ** Examples
> 
> # compute row-principal components of scaled iris measurements
> iris[, -5] %>%
+   prcomp(scale = TRUE) %>%
+   as_tbl_ord() %>%
+   mutate_rows(species = iris$Species) %>%
+   print() -> iris_pca
# A tbl_ord of class 'prcomp': (150 x 4) x (4 x 4)'
# 4 coordinates: PC1, PC2, ..., PC4
# 
# Rows (principal): [ 150 x 4 | 1 ]
    PC1    PC2     PC3 ... |   species
                           |   <fct>  
1 -2.26 -0.478  0.127      | 1 setosa 
2 -2.07  0.672  0.234  ... | 2 setosa 
3 -2.36  0.341 -0.0441     | 3 setosa 
4 -2.29  0.595 -0.0910     | 4 setosa 
5 -2.38 -0.645 -0.0157     | 5 setosa 
# ℹ 145 more rows
# 
# Columns (standard): [ 4 x 4 | 0 ]
     PC1     PC2    PC3 ... | 
                            | 
1  0.521 -0.377   0.720     | 
2 -0.269 -0.923  -0.244 ... | 
3  0.580 -0.0245 -0.142     | 
4  0.565 -0.0669 -0.634     | 
> 
> # row-principal biplot with centroids and confidence elliptical disks
> iris_pca %>%
+   ggbiplot(aes(color = species)) +
+   theme_bw() +
+   geom_rows_point() +
+   geom_polygon(
+     aes(fill = species),
+     color = NA, alpha = .25, stat = "rows_ellipse"
+   ) +
+   geom_cols_vector(color = "#444444") +
+   scale_color_brewer(
+     type = "qual", palette = 2,
+     aesthetics = c("color", "fill")
+   ) +
+   ggtitle(
+     "Row-principal PCA biplot of Anderson iris measurements",
+     "Overlaid with 95% confidence disks"
+   )
> 
> 
> 
> cleanEx()
> nameEx("conference")
> ### * conference
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: conference
> ### Title: Confer inertia to factors of a 'tbl_ord' object
> ### Aliases: conference recover_conference recover_conference.default
> ###   get_conference revert_conference confer_inertia
> 
> ### ** Examples
> 
> # illustrative ordination: correspendence analysis of hair & eye data
> haireye_ca <- ordinate(
+   as.data.frame(rowSums(HairEyeColor, dims = 2L)),
+   cols = everything(), model = MASS::corresp
+ )
> print(haireye_ca)
# A tbl_ord of class 'correspondence': (4 x 1) x (4 x 1)'
# 1 coordinate: Can1
# 
# Rows (standard): [ 4 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -1.10  | 1 Black
2 -0.324 | 2 Brown
3 -0.283 | 3 Red  
4  1.83  | 4 Blond
# 
# Columns (standard): [ 4 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -1.08  | 1 Brown
2  1.20  | 2 Blue 
3 -0.465 | 3 Hazel
4  0.354 | 4 Green
> 
> # check distribution of inertia
> get_conference(haireye_ca)
[1] 0 0
> # confer inertia to rows, then to columns
> confer_inertia(haireye_ca, "rows")
# A tbl_ord of class 'correspondence': (4 x 1) x (4 x 1)'
# 1 coordinate: Can1
# 
# Rows (principal): [ 4 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -0.505 | 1 Black
2 -0.148 | 2 Brown
3 -0.130 | 3 Red  
4  0.835 | 4 Blond
# 
# Columns (standard): [ 4 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -1.08  | 1 Brown
2  1.20  | 2 Blue 
3 -0.465 | 3 Hazel
4  0.354 | 4 Green
> confer_inertia(haireye_ca, "columns")
# A tbl_ord of class 'correspondence': (4 x 1) x (4 x 1)'
# 1 coordinate: Can1
# 
# Rows (standard): [ 4 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -1.10  | 1 Black
2 -0.324 | 2 Brown
3 -0.283 | 3 Red  
4  1.83  | 4 Blond
# 
# Columns (principal): [ 4 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -0.492 | 1 Brown
2  0.547 | 2 Blue 
3 -0.213 | 3 Hazel
4  0.162 | 4 Green
> # confer inertia symmetrically
> (haireye_ca <- confer_inertia(haireye_ca, "symmetric"))
# A tbl_ord of class 'correspondence': (4 x 1) x (4 x 1)'
# 1 coordinate: Can1
# 
# Rows (symmetric): [ 4 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -0.746 | 1 Black
2 -0.219 | 2 Brown
3 -0.192 | 3 Red  
4  1.24  | 4 Blond
# 
# Columns (symmetric): [ 4 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -0.728 | 1 Brown
2  0.810 | 2 Blue 
3 -0.315 | 3 Hazel
4  0.239 | 4 Green
> # check redistributed inertia
> get_conference(haireye_ca)
[1] 0.5 0.5
> # restore default distribution of inertia
> revert_conference(haireye_ca)
# A tbl_ord of class 'correspondence': (4 x 1) x (4 x 1)'
# 1 coordinate: Can1
# 
# Rows (standard): [ 4 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -1.10  | 1 Black
2 -0.324 | 2 Brown
3 -0.283 | 3 Red  
4  1.83  | 4 Blond
# 
# Columns (standard): [ 4 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -1.08  | 1 Brown
2  1.20  | 2 Blue 
3 -0.465 | 3 Hazel
4  0.354 | 4 Green
> 
> 
> 
> cleanEx()
> nameEx("dplyr-verbs")
> ### * dplyr-verbs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dplyr-verbs
> ### Title: *dplyr* verbs for tbl_ord factors
> ### Aliases: dplyr-verbs pull_factor pull_rows pull_cols rename_rows
> ###   rename_cols select_rows select_cols mutate_rows mutate_cols
> ###   transmute_rows transmute_cols cbind_rows cbind_cols left_join_rows
> ###   left_join_cols
> 
> ### ** Examples
> 
> # illustrative ordination: LDA of iris data
> (iris_lda <- ordinate(iris, cols = 1:4, lda_ord, grouping = iris$Species))
Warning in recover_aug_rows.lda_ord(x) :
  Could not locate data used to fit 'x'.
# A tbl_ord of class 'lda_ord': (153 x 2) x (4 x 2)'
# 2 coordinates: LD1 and LD2
# 
# Rows (principal): [ 153 x 2 | 5 ]
    LD1    LD2 |   name        prior counts .element
               |   <chr>       <dbl>  <int> <chr>   
1  7.61 -0.215 | 1 setosa      0.333     50 active  
2 -1.83  0.728 | 2 versicolor  0.333     50 active  
3 -5.78 -0.513 | 3 virginica   0.333     50 active  
4 NA    NA     | 4 <NA>       NA         NA score   
5 NA    NA     | 5 <NA>       NA         NA score   
# ℹ 148 more rows
# ℹ 1 more variable: Species <fct>
# 
# Columns (standard): [ 4 x 2 | 2 ]
     LD1     LD2 |   name         .element
                 |   <chr>        <chr>   
1  0.829 -0.0241 | 1 Sepal.Length active  
2  1.53  -2.16   | 2 Sepal.Width  active  
3 -2.20   0.932  | 3 Petal.Length active  
4 -2.81  -2.84   | 4 Petal.Width  active  
> 
> # extract a coordinate or annotation
> head(pull_rows(iris_lda, Species))
[1] <NA>   <NA>   <NA>   setosa setosa setosa
Levels: setosa versicolor virginica
> pull_cols(iris_lda, LD2)
[1] -0.02410215 -2.16452123  0.93192121 -2.83918785
> 
> # rename an annotation
> rename_cols(iris_lda, species = name)
# A tbl_ord of class 'lda_ord': (153 x 2) x (4 x 2)'
# 2 coordinates: LD1 and LD2
# 
# Rows (principal): [ 153 x 2 | 5 ]
    LD1    LD2 |   name        prior counts .element
               |   <chr>       <dbl>  <int> <chr>   
1  7.61 -0.215 | 1 setosa      0.333     50 active  
2 -1.83  0.728 | 2 versicolor  0.333     50 active  
3 -5.78 -0.513 | 3 virginica   0.333     50 active  
4 NA    NA     | 4 <NA>       NA         NA score   
5 NA    NA     | 5 <NA>       NA         NA score   
# ℹ 148 more rows
# ℹ 1 more variable: Species <fct>
# 
# Columns (standard): [ 4 x 2 | 2 ]
     LD1     LD2 |   species      .element
                 |   <chr>        <chr>   
1  0.829 -0.0241 | 1 Sepal.Length active  
2  1.53  -2.16   | 2 Sepal.Width  active  
3 -2.20   0.932  | 3 Petal.Length active  
4 -2.81  -2.84   | 4 Petal.Width  active  
> 
> # select annotations
> select_rows(iris_lda, species = name, .element)
# A tbl_ord of class 'lda_ord': (153 x 2) x (4 x 2)'
# 2 coordinates: LD1 and LD2
# 
# Rows (principal): [ 153 x 2 | 2 ]
    LD1    LD2 |   species    .element
               |   <chr>      <chr>   
1  7.61 -0.215 | 1 setosa     active  
2 -1.83  0.728 | 2 versicolor active  
3 -5.78 -0.513 | 3 virginica  active  
4 NA    NA     | 4 <NA>       score   
5 NA    NA     | 5 <NA>       score   
# ℹ 148 more rows
# 
# Columns (standard): [ 4 x 2 | 2 ]
     LD1     LD2 |   name         .element
                 |   <chr>        <chr>   
1  0.829 -0.0241 | 1 Sepal.Length active  
2  1.53  -2.16   | 2 Sepal.Width  active  
3 -2.20   0.932  | 3 Petal.Length active  
4 -2.81  -2.84   | 4 Petal.Width  active  
> 
> # create, modify, and delete annotations
> mutate_cols(iris_lda, vec.length = sqrt(LD1^2 + LD2^2))
# A tbl_ord of class 'lda_ord': (153 x 2) x (4 x 2)'
# 2 coordinates: LD1 and LD2
# 
# Rows (principal): [ 153 x 2 | 5 ]
    LD1    LD2 |   name        prior counts .element
               |   <chr>       <dbl>  <int> <chr>   
1  7.61 -0.215 | 1 setosa      0.333     50 active  
2 -1.83  0.728 | 2 versicolor  0.333     50 active  
3 -5.78 -0.513 | 3 virginica   0.333     50 active  
4 NA    NA     | 4 <NA>       NA         NA score   
5 NA    NA     | 5 <NA>       NA         NA score   
# ℹ 148 more rows
# ℹ 1 more variable: Species <fct>
# 
# Columns (standard): [ 4 x 2 | 3 ]
     LD1     LD2 |   name         .element vec.length
                 |   <chr>        <chr>         <dbl>
1  0.829 -0.0241 | 1 Sepal.Length active        0.830
2  1.53  -2.16   | 2 Sepal.Width  active        2.65 
3 -2.20   0.932  | 3 Petal.Length active        2.39 
4 -2.81  -2.84   | 4 Petal.Width  active        3.99 
> transmute_cols(iris_lda, vec.length = sqrt(LD1^2 + LD2^2))
# A tbl_ord of class 'lda_ord': (153 x 2) x (4 x 2)'
# 2 coordinates: LD1 and LD2
# 
# Rows (principal): [ 153 x 2 | 5 ]
    LD1    LD2 |   name        prior counts .element
               |   <chr>       <dbl>  <int> <chr>   
1  7.61 -0.215 | 1 setosa      0.333     50 active  
2 -1.83  0.728 | 2 versicolor  0.333     50 active  
3 -5.78 -0.513 | 3 virginica   0.333     50 active  
4 NA    NA     | 4 <NA>       NA         NA score   
5 NA    NA     | 5 <NA>       NA         NA score   
# ℹ 148 more rows
# ℹ 1 more variable: Species <fct>
# 
# Columns (standard): [ 4 x 2 | 1 ]
     LD1     LD2 |   vec.length
                 |        <dbl>
1  0.829 -0.0241 | 1      0.830
2  1.53  -2.16   | 2      2.65 
3 -2.20   0.932  | 3      2.39 
4 -2.81  -2.84   | 4      3.99 
> 
> # bind data frames of annotations
> iris_medians <-
+   stats::aggregate(iris[, 1:4], median, by = iris[, 5, drop = FALSE])
> iris_lda %>%
+   # retain '.element' in order to match by `elements`
+   select_rows(.element) %>%
+   cbind_rows(iris_medians, elements = "active")
# A tbl_ord of class 'lda_ord': (153 x 2) x (4 x 2)'
# 2 coordinates: LD1 and LD2
# 
# Rows (principal): [ 153 x 2 | 6 ]
    LD1    LD2 |   .element Species    Sepal.Length
               |   <chr>    <fct>             <dbl>
1  7.61 -0.215 | 1 active   setosa              5  
2 -1.83  0.728 | 2 active   versicolor          5.9
3 -5.78 -0.513 | 3 active   virginica           6.5
4 NA    NA     | 4 score    <NA>               NA  
5 NA    NA     | 5 score    <NA>               NA  
# ℹ 148 more rows
# ℹ 3 more variables:
#   Sepal.Width <dbl>,
#   Petal.Length <dbl>,
#   Petal.Width <dbl>
# 
# Columns (standard): [ 4 x 2 | 2 ]
     LD1     LD2 |   name         .element
                 |   <chr>        <chr>   
1  0.829 -0.0241 | 1 Sepal.Length active  
2  1.53  -2.16   | 2 Sepal.Width  active  
3 -2.20   0.932  | 3 Petal.Length active  
4 -2.81  -2.84   | 4 Petal.Width  active  
> 
> 
> 
> cleanEx()
> nameEx("draw-key")
> ### * draw-key
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw-key
> ### Title: Biplot key drawing functions
> ### Aliases: draw-key draw_key_line draw_key_crosslines draw_key_crosspoint
> 
> ### ** Examples
> 
> # scaled PCA of Anderson iris data with ranges and confidence intervals
> iris[, -5] %>%
+   prcomp(scale = TRUE) %>%
+   as_tbl_ord() %>%
+   confer_inertia(1) %>%
+   augment_ord() %>%
+   mutate_rows(species = iris$Species) %>%
+   ggbiplot(aes(color = species)) +
+   theme_bw() +
+   scale_color_brewer(type = "qual", palette = 2) +
+   geom_rows_lineranges(fun.data = mean_sdl, linewidth = .75) +
+   geom_rows_point(alpha = .5) +
+   geom_cols_vector(color = "#444444") +
+   geom_cols_text_radiate(aes(label = name), color = "#444444", size = 3) +
+   ggtitle(
+     "Row-principal PCA biplot of Anderson iris data",
+     "Ranges 2 sample standard deviations from centroids"
+   )
> 
> 
> 
> cleanEx()
> nameEx("geom_axis")
> ### * geom_axis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geom_axis
> ### Title: Axes through the origin
> ### Aliases: geom_axis
> 
> ### ** Examples
> 
> # Reaven & Miller overt & chemical diabetes test data and group classification
> head(heplots::Diabetes)
  relwt glufast glutest instest sspg  group
1  0.81      80     356     124   55 Normal
2  0.95      97     289     117   76 Normal
3  0.94     105     319     143  105 Normal
4  1.04      90     356     199  108 Normal
5  1.00      90     323     240  143 Normal
6  0.76      86     381     157  165 Normal
> 
> # default (standardized) linear discriminant analysis of groups on tests
> diabetes_lda <- MASS::lda(group ~ ., heplots::Diabetes)
> # bestow 'tbl_ord' class & augment observation, centroid, and variable fields
> as_tbl_ord(diabetes_lda) %>%
+   augment_ord() %>%
+   mutate_rows(discriminant = ifelse(
+     .element == "active",
+     "centroid", "case"
+   )) %>%
+   print() -> diabetes_lda
# A tbl_ord of class 'lda': (148 x 2) x (5 x 2)'
# 2 coordinates: LD1 and LD2
# 
# Rows (principal): [ 148 x 2 | 6 ]
     LD1    LD2 |   name         prior counts grouping
                |   <chr>        <dbl>  <int> <chr>   
1 -1.75   0.400 | 1 Normal       0.524     76 Normal  
2  0.340 -1.38  | 2 Chemical_D…  0.248     36 Chemica…
3  3.66   0.580 | 3 Overt_Diab…  0.228     33 Overt_D…
4 -1.72   0.663 | 4 1           NA         NA Normal  
5 -2.85   1.30  | 5 2           NA         NA Normal  
# ℹ 143 more rows
# ℹ 2 more variables:
#   .element <chr>,
#   discriminant <chr>
# 
# Columns (standard): [ 5 x 2 | 2 ]
        LD1      LD2 |   name    .element
                     |   <chr>   <chr>   
1  1.36     -3.78    | 1 relwt   active  
2 -0.0336    0.0366  | 2 glufast active  
3  0.0126   -0.00709 | 3 glutest active  
4 -0.000102 -0.00617 | 4 instest active  
5  0.00424   0.00113 | 5 sspg    active  
> # row-standard biplot
> diabetes_lda %>%
+   confer_inertia(1) %>%
+   ggbiplot() +
+   theme_bw() + theme_biplot() +
+   geom_rows_point(aes(shape = grouping, size = discriminant), alpha = .5) +
+   geom_cols_axis(aes(label = name), color = "#888888", num = 8L,
+                  text_size = 2.5, label_dodge = .02) +
+   ggtitle(
+     "LDA of Reaven & Miller diabetes groups",
+     "Row-standard biplot of standardized LDA"
+   )
Warning: Using size for a discrete variable is not advised.
> 
> # contribution LDA of groups on tests
> diabetes_lda <-
+   lda_ord(group ~ ., heplots::Diabetes, axes.scale = "contribution")
> # bestow 'tbl_ord' class & augment observation, centroid, and variable fields
> as_tbl_ord(diabetes_lda) %>%
+   augment_ord() %>%
+   mutate_rows(discriminant = ifelse(
+     .element == "active",
+     "centroid", "case"
+   )) %>%
+   print() -> diabetes_lda
# A tbl_ord of class 'lda_ord': (148 x 2) x (5 x 2)'
# 2 coordinates: LD1 and LD2
# 
# Rows (principal): [ 148 x 2 | 6 ]
     LD1    LD2 |   name         prior counts grouping
                |   <chr>        <dbl>  <int> <chr>   
1 -1.75   0.400 | 1 Normal       0.524     76 Normal  
2  0.340 -1.38  | 2 Chemical_D…  0.248     36 Chemica…
3  3.66   0.580 | 3 Overt_Diab…  0.228     33 Overt_D…
4 -1.72   0.663 | 4 1           NA         NA Normal  
5 -2.85   1.30  | 5 2           NA         NA Normal  
# ℹ 143 more rows
# ℹ 2 more variables:
#   .element <chr>,
#   discriminant <chr>
# 
# Columns (standard): [ 5 x 2 | 2 ]
      LD1    LD2 |   name    .element
                 |   <chr>   <chr>   
1  0.138  -0.384 | 1 relwt   active  
2 -0.274   0.539 | 2 glufast active  
3  0.861   0.288 | 3 glutest active  
4 -0.0134 -0.666 | 4 instest active  
5  0.388  -0.145 | 5 sspg    active  
> # symmetric biplot
> diabetes_lda %>%
+   confer_inertia(.5) %>%
+   ggbiplot() +
+   theme_bw() + theme_biplot() +
+   geom_rows_point(aes(shape = grouping, alpha = discriminant)) +
+   geom_cols_axis(color = "#888888", num = 8L,
+                  text_size = 2.5, text_dodge = .025) +
+   ggtitle(
+     "LDA of Reaven & Miller diabetes groups",
+     "Symmetric biplot of contribution LDA"
+   )
Warning: Using alpha for a discrete variable is not advised.
> 
> 
> 
> cleanEx()
> nameEx("geom_isoline")
> ### * geom_isoline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geom_isoline
> ### Title: Isolines (contour lines)
> ### Aliases: geom_isoline
> 
> ### ** Examples
> 
> # Reaven & Miller overt & chemical diabetes test data and group classification
> head(heplots::Diabetes)
  relwt glufast glutest instest sspg  group
1  0.81      80     356     124   55 Normal
2  0.95      97     289     117   76 Normal
3  0.94     105     319     143  105 Normal
4  1.04      90     356     199  108 Normal
5  1.00      90     323     240  143 Normal
6  0.76      86     381     157  165 Normal
> # default (standardized) linear discriminant analysis of groups on tests
> diabetes_lda <- MASS::lda(group ~ ., heplots::Diabetes)
> 
> # bestow 'tbl_ord' class & augment observation, centroid, and variable fields
> as_tbl_ord(diabetes_lda) %>%
+   augment_ord() %>%
+   print() -> diabetes_lda
# A tbl_ord of class 'lda': (148 x 2) x (5 x 2)'
# 2 coordinates: LD1 and LD2
# 
# Rows (principal): [ 148 x 2 | 5 ]
     LD1    LD2 |   name         prior counts grouping
                |   <chr>        <dbl>  <int> <chr>   
1 -1.75   0.400 | 1 Normal       0.524     76 Normal  
2  0.340 -1.38  | 2 Chemical_D…  0.248     36 Chemica…
3  3.66   0.580 | 3 Overt_Diab…  0.228     33 Overt_D…
4 -1.72   0.663 | 4 1           NA         NA Normal  
5 -2.85   1.30  | 5 2           NA         NA Normal  
# ℹ 143 more rows
# ℹ 1 more variable: .element <chr>
# 
# Columns (standard): [ 5 x 2 | 2 ]
        LD1      LD2 |   name    .element
                     |   <chr>   <chr>   
1  1.36     -3.78    | 1 relwt   active  
2 -0.0336    0.0366  | 2 glufast active  
3  0.0126   -0.00709 | 3 glutest active  
4 -0.000102 -0.00617 | 4 instest active  
5  0.00424   0.00113 | 5 sspg    active  
> 
> # row-standard biplot
> diabetes_lda %>%
+   confer_inertia(1) %>%
+   ggbiplot(aes(label = name), elements = "active") +
+   theme_bw() + theme_biplot() +
+   geom_rows_text() +
+   geom_cols_vector(subset = c(1, 3, 4)) +
+   geom_cols_text_radiate(subset = c(1, 3, 4), size = 3) +
+   geom_cols_isoline(subset = c(1, 3, 4), alpha = .25, num = 4L,
+                     label_dodge = -.03, text_alpha = .5, text_size = 3) +
+   ggtitle(
+     "LDA of Reaven & Miller diabetes groups",
+     "Row-standard biplot of standardized LDA"
+   )
> 
> 
> 
> cleanEx()
> nameEx("geom_lineranges")
> ### * geom_lineranges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geom_lineranges
> ### Title: Intervals depicting ranges, usually about center points
> ### Aliases: geom_lineranges geom_pointranges
> 
> ### ** Examples
> 
> # compute log-ratio analysis of Freestone primary class composition measurements
> glass %>%
+   ordinate(cols = c(SiO2, Al2O3, CaO, FeO, MgO),
+            model = lra, compositional = TRUE) %>%
+   confer_inertia("rows") %>%
+   print() -> glass_lra
# A tbl_ord of class 'lra': (68 x 4) x (5 x 4)'
# 4 coordinates: LRSV1, LRSV2, ..., LRSV4
# 
# Rows (principal): [ 68 x 4 | 12 ]
   LRSV1  LRSV2     LRSV3 ... |   weight Site    Anal  Context Form 
                              |    <dbl> <chr>   <chr> <chr>   <chr>
1 0.0925 0.0929  0.0156       | 1 0.0147 Bet El… 1     L14.B1… Chunk
2 0.0905 0.0591 -0.0439   ... | 2 0.0147 Bet El… 2     L14.B1… Chunk
3 0.0844 0.0333 -0.000492     | 3 0.0147 Bet El… 3     L14.B1… Chunk
4 0.0647 0.0211  0.0267       | 4 0.0147 Bet El… 4     L14.B1… Chunk
5 0.0635 0.0257  0.0239       | 5 0.0147 Bet El… 5     L14.B1… Chunk
# ℹ 63 more rows
# ℹ 7 more variables: TiO2 <dbl>,
#   MnO <dbl>, Na2O <dbl>,
#   K2O <dbl>, P2O5 <dbl>,
#   Cl <dbl>, SO3 <dbl>
# 
# Columns (standard): [ 5 x 4 | 2 ]
     LRSV1  LRSV2  LRSV3 ... |   name   weight
                             |   <chr>   <dbl>
1 -0.00548  0.338  0.237     | 1 SiO2  0.852  
2  4.15    -0.714 -2.50  ... | 2 Al2O3 0.0313 
3 -0.517   -2.95  -0.126     | 3 CaO   0.0976 
4  0.553    2.23  -9.57      | 4 FeO   0.00524
5 -5.61     0.790 -4.47      | 5 MgO   0.0138 
> 
> # row-principal biplot with ordinate-wise standard deviations
> glass_lra %>%
+   ggbiplot(aes(color = Site), sec.axes = "cols", scale.factor = .05) +
+   theme_biplot() +
+   scale_color_brewer(type = "qual", palette = 6) +
+   geom_cols_text(stat = "chull", aes(label = name), color = "#444444") +
+   geom_rows_lineranges(fun.data = mean_sdl, linewidth = .75) +
+   geom_rows_point(alpha = .5) +
+   ggtitle(
+     "Row-principal LRA biplot of Freestone glass measurements",
+     "Ranges 2 sample standard deviations from centroids"
+   )
> 
> 
> 
> cleanEx()
> nameEx("geom_unit_circle")
> ### * geom_unit_circle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geom_unit_circle
> ### Title: Unit circle
> ### Aliases: geom_unit_circle
> 
> ### ** Examples
> 
> # principal components analysis of overt & chemical diabetes test values
> heplots::Diabetes[, seq(5L)] %>%
+   princomp(cor = TRUE) %>%
+   as_tbl_ord() %>%
+   cbind_rows(group = heplots::Diabetes$group) %>%
+   augment_ord() %>%
+   print() -> diabetes_pca
# A tbl_ord of class 'princomp': (145 x 5) x (5 x 5)'
# 5 coordinates: Comp.1, Comp.2, ..., Comp.5
# 
# Rows (principal): [ 145 x 5 | 1 ]
  Comp.1 Comp.2   Comp.3 ... |   group 
                             |   <fct> 
1 -1.35  -1.54  -0.142       | 1 Normal
2 -1.11  -0.760  0.582   ... | 2 Normal
3 -0.897 -0.609  0.311       | 3 Normal
4 -0.989  0.246  0.481       | 4 Normal
5 -0.986  0.357  0.00624     | 5 Normal
# ℹ 140 more rows
# 
# Columns (standard): [ 5 x 5 | 3 ]
   Comp.1  Comp.2 Comp.3 ... |   name     center   scale
                             |   <chr>     <dbl>   <dbl>
1  0.0875  0.704   0.648     | 1 relwt     0.977   0.129
2  0.580  -0.122  -0.111 ... | 2 glufast 122.     63.7  
3  0.586  -0.0641 -0.157     | 3 glutest 544.    316.   
4 -0.229   0.597  -0.725     | 4 instest 186.    121.   
5  0.510   0.360  -0.131     | 5 sspg    184.    106.   
> 
> # note that column standard coordinates are unit vectors
> rowSums(get_cols(diabetes_pca)^2)
  relwt glufast glutest instest    sspg 
      1       1       1       1       1 
> 
> # plot column standard coordinates with a unit circle underlaid
> diabetes_pca %>%
+   ggbiplot(aes(label = name), sec.axes = "cols", scale.factor = 3) +
+   geom_rows_point(aes(color = group), alpha = .25) +
+   geom_unit_circle(alpha = .5, scale.factor = 3) +
+   geom_cols_vector() +
+   geom_cols_text_radiate()
> 
> 
> 
> cleanEx()
> nameEx("geom_vector")
> ### * geom_vector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geom_vector
> ### Title: Vectors from the origin
> ### Aliases: geom_vector
> 
> ### ** Examples
> 
> # compute unscaled row-principal components of scaled measurements
> (iris_pca <- ordinate(iris, cols = 1:4, princomp))
# A tbl_ord of class 'princomp': (150 x 4) x (4 x 4)'
# 4 coordinates: Comp.1, Comp.2, ..., Comp.4
# 
# Rows (principal): [ 150 x 4 | 1 ]
  Comp.1 Comp.2  Comp.3 ... |   Species
                            |   <fct>  
1  -2.68  0.319  0.0279     | 1 setosa 
2  -2.71 -0.177  0.210  ... | 2 setosa 
3  -2.89 -0.145 -0.0179     | 3 setosa 
4  -2.75 -0.318 -0.0316     | 4 setosa 
5  -2.73  0.327 -0.0901     | 5 setosa 
# ℹ 145 more rows
# 
# Columns (standard): [ 4 x 4 | 3 ]
   Comp.1  Comp.2  Comp.3 ... |   name         center scale
                              |   <chr>         <dbl> <dbl>
1  0.361   0.657   0.582      | 1 Sepal.Length   5.84     1
2 -0.0845  0.730  -0.598  ... | 2 Sepal.Width    3.06     1
3  0.857  -0.173  -0.0762     | 3 Petal.Length   3.76     1
4  0.358  -0.0755 -0.546      | 4 Petal.Width    1.20     1
> 
> # row-principal biplot with coordinate-wise standard deviations
> iris_pca %>%
+   ggbiplot(aes(color = Species)) +
+   theme_bw() +
+   scale_color_brewer(type = "qual", palette = 2) +
+   geom_unit_circle() +
+   geom_rows_point(alpha = .5) +
+   geom_cols_vector(color = "#444444") +
+   geom_cols_text_radiate(aes(label = name), color = "#444444") +
+   ggtitle("Row-principal unscaled PCA biplot of Anderson iris measurements") +
+   expand_limits(y = c(NA, 2))
> 
> 
> 
> cleanEx()
> nameEx("ggbiplot")
> ### * ggbiplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggbiplot
> ### Title: Biplots following the grammar of graphics
> ### Aliases: ggbiplot ord_aes
> 
> ### ** Examples
> 
> # compute PCA of Anderson iris measurements
> iris[, -5] %>%
+   princomp(cor = TRUE) %>%
+   as_tbl_ord() %>%
+   confer_inertia(1) %>%
+   mutate_rows(species = iris$Species) %>%
+   mutate_cols(measure = gsub("\\.", " ", tolower(names(iris)[-5]))) %>%
+   print() -> iris_pca
# A tbl_ord of class 'princomp': (150 x 4) x (4 x 4)'
# 4 coordinates: Comp.1, Comp.2, ..., Comp.4
# 
# Rows (principal): [ 150 x 4 | 1 ]
  Comp.1 Comp.2  Comp.3 ... |   species
                            |   <fct>  
1  -2.26  0.480  0.128      | 1 setosa 
2  -2.08 -0.674  0.235  ... | 2 setosa 
3  -2.36 -0.342 -0.0442     | 3 setosa 
4  -2.30 -0.597 -0.0913     | 4 setosa 
5  -2.39  0.647 -0.0157     | 5 setosa 
# ℹ 145 more rows
# 
# Columns (standard): [ 4 x 4 | 1 ]
  Comp.1 Comp.2 Comp.3 ... |   measure     
                           |   <chr>       
1  0.521 0.377   0.720     | 1 sepal length
2 -0.269 0.923  -0.244 ... | 2 sepal width 
3  0.580 0.0245 -0.142     | 3 petal length
4  0.565 0.0669 -0.634     | 4 petal width 
> 
> # row-principal biplot with rescaled secondary axis
> iris_pca %>%
+   ggbiplot(aes(color = species), sec.axes = "cols", scale.factor = 2) +
+   theme_bw() +
+   scale_color_brewer(type = "qual", palette = 2) +
+   geom_rows_point() +
+   geom_cols_vector(color = "#444444") +
+   geom_cols_text_radiate(aes(label = measure), color = "#444444") +
+   ggtitle(
+     "Row-principal PCA biplot of Anderson iris measurements",
+     "Variable loadings scaled to secondary axes"
+   ) +
+   expand_limits(y = c(-1, 3.5))
> # Performance measures can be regressed on the artificial coordinates of
> # ordinated vehicle specs. Because the ordination of specs ignores performance,
> # these coordinates will probably not be highly predictive. The gradient of each
> # performance measure along the artificial axes is visualized by projecting the
> # regression coefficients onto the ordination biplot.
> 
> # scaled principal components analysis of vehicle specs
> mtcars_specs_pca <- ordinate(
+   mtcars, cols = c(cyl, disp, hp, drat, wt, vs, carb),
+   model = ~ princomp(., cor = TRUE)
+ )
> # data frame of vehicle performance measures
> mtcars %>%
+   subset(select = c(mpg, qsec)) %>%
+   as.matrix() %>%
+   print() -> mtcars_perf
                     mpg  qsec
Mazda RX4           21.0 16.46
Mazda RX4 Wag       21.0 17.02
Datsun 710          22.8 18.61
Hornet 4 Drive      21.4 19.44
Hornet Sportabout   18.7 17.02
Valiant             18.1 20.22
Duster 360          14.3 15.84
Merc 240D           24.4 20.00
Merc 230            22.8 22.90
Merc 280            19.2 18.30
Merc 280C           17.8 18.90
Merc 450SE          16.4 17.40
Merc 450SL          17.3 17.60
Merc 450SLC         15.2 18.00
Cadillac Fleetwood  10.4 17.98
Lincoln Continental 10.4 17.82
Chrysler Imperial   14.7 17.42
Fiat 128            32.4 19.47
Honda Civic         30.4 18.52
Toyota Corolla      33.9 19.90
Toyota Corona       21.5 20.01
Dodge Challenger    15.5 16.87
AMC Javelin         15.2 17.30
Camaro Z28          13.3 15.41
Pontiac Firebird    19.2 17.05
Fiat X1-9           27.3 18.90
Porsche 914-2       26.0 16.70
Lotus Europa        30.4 16.90
Ford Pantera L      15.8 14.50
Ferrari Dino        19.7 15.50
Maserati Bora       15.0 14.60
Volvo 142E          21.4 18.60
> # regress performance measures on principal components
> lm(mtcars_perf ~ get_rows(mtcars_specs_pca)) %>%
+   as_tbl_ord() %>%
+   augment_ord() %>%
+   print() -> mtcars_pca_lm
# A tbl_ord of class 'mlm': (32 x 8) x (2 x 8)'
# 8 coordinates: (Intercept), Comp.1, ..., Comp.7
# 
# Rows: [ 32 x 8 | 1 ]
  `(Intercept)` Comp.1 Comp.2 ... |   name             
                                  |   <chr>            
1             1 -0.398 -1.12      | 1 Mazda RX4        
2             1 -0.294 -1.06  ... | 2 Mazda RX4 Wag    
3             1 -2.54   0.465     | 3 Datsun 710       
4             1 -0.601  1.75      | 4 Hornet 4 Drive   
5             1  1.61   0.837     | 5 Hornet Sportabout
# ℹ 27 more rows
# 
# Columns: [ 2 x 8 | 1 ]
  `(Intercept)` Comp.1 Comp.2 ... |   name 
                                  |   <chr>
1          20.1 -2.41  -0.415 ... | 1 mpg  
2          17.8 -0.459  0.929     | 2 qsec 
> # regression biplot
> ggbiplot(mtcars_specs_pca, aes(label = name),
+          sec.axes = "rows", scale.factor = .5) +
+   theme_minimal() +
+   geom_rows_text(size = 3) +
+   geom_cols_vector(data = mtcars_pca_lm) +
+   geom_cols_text_radiate(data = mtcars_pca_lm) +
+   expand_limits(x = c(-2.5, 2))
> 
> # multidimensional scaling based on a scaled cosine distance of vehicle specs
> cosine_dist <- function(x) {
+   x <- as.matrix(x)
+   num <- x %*% t(x)
+   denom_rt <- as.matrix(rowSums(x^2))
+   denom <- sqrt(denom_rt %*% t(denom_rt))
+   as.dist(1 - num / denom)
+ }
> mtcars %>%
+   subset(select = c(cyl, disp, hp, drat, wt, vs, carb)) %>%
+   scale() %>%
+   cosine_dist() %>%
+   cmdscale() %>%
+   as.data.frame() ->
+   mtcars_specs_cmds
> # names must be consistent with `cmdscale_ord()` below
> names(mtcars_specs_cmds) <- c("PCo1", "PCo2")
> # regress performance measures on principal coordinates
> lm(mtcars_perf ~ as.matrix(mtcars_specs_cmds)) %>%
+   as_tbl_ord() %>%
+   augment_ord() %>%
+   print() -> mtcars_cmds_lm
# A tbl_ord of class 'mlm': (32 x 3) x (2 x 3)'
# 3 coordinates: (Intercept), PCo1, PCo2
# 
# Rows: [ 32 x 3 | 1 ]
  `(Intercept)`   PCo1   PCo2 |   name             
                              |   <chr>            
1             1 -0.238 -0.666 | 1 Mazda RX4        
2             1 -0.190 -0.685 | 2 Mazda RX4 Wag    
3             1 -0.934  0.224 | 3 Datsun 710       
4             1 -0.247  0.984 | 4 Hornet 4 Drive   
5             1  0.834  0.316 | 5 Hornet Sportabout
# ℹ 27 more rows
# 
# Columns: [ 2 x 3 | 1 ]
  `(Intercept)`  PCo1  PCo2 |   name 
                            |   <chr>
1          20.1 -6.19 0.160 | 1 mpg  
2          17.8 -1.31 2.38  | 2 qsec 
> # multidimensional scaling using `cmdscale_ord()`
> mtcars %>%
+   subset(select = c(cyl, disp, hp, drat, wt, vs, carb)) %>%
+   scale() %>%
+   cosine_dist() %>%
+   cmdscale_ord() %>%
+   as_tbl_ord() %>%
+   augment_ord() %>%
+   print() -> mtcars_specs_cmds_ord
# A tbl_ord of class 'cmds_ord': (32 x 2) x (32 x 2)'
# 2 coordinates: PCo1 and PCo2
# 
# Rows (symmetric): [ 32 x 2 | 1 ]
    PCo1   PCo2 |   name             
                |   <chr>            
1 -0.238 -0.666 | 1 Mazda RX4        
2 -0.190 -0.685 | 2 Mazda RX4 Wag    
3 -0.934  0.224 | 3 Datsun 710       
4 -0.247  0.984 | 4 Hornet 4 Drive   
5  0.834  0.316 | 5 Hornet Sportabout
# ℹ 27 more rows
# 
# Columns (symmetric): [ 32 x 2 | 1 ]
    PCo1   PCo2 |   name             
                |   <chr>            
1 -0.238 -0.666 | 1 Mazda RX4        
2 -0.190 -0.685 | 2 Mazda RX4 Wag    
3 -0.934  0.224 | 3 Datsun 710       
4 -0.247  0.984 | 4 Hornet 4 Drive   
5  0.834  0.316 | 5 Hornet Sportabout
# ℹ 27 more rows
> # regression biplot
> ggbiplot(mtcars_specs_cmds_ord, aes(label = name),
+          sec.axes = "rows", scale.factor = 3) +
+   theme_minimal() +
+   geom_rows_text(size = 3) +
+   geom_cols_vector(data = mtcars_cmds_lm) +
+   geom_cols_text_radiate(data = mtcars_cmds_lm) +
+   expand_limits(x = c(-2.25, 1.25), y = c(-2, 1.5))
> # PCA of iris data
> iris_pca <- ordinate(iris, cols = 1:4, prcomp, scale = TRUE)
> 
> # row-principal predictive biplot
> iris_pca %>%
+   augment_ord() %>%
+   ggbiplot(axis.type = "predictive") +
+   theme_bw() +
+   scale_color_brewer(type = "qual", palette = 2) +
+   geom_cols_axis(aes(label = name, center = center, scale = scale)) +
+   geom_rows_point(aes(color = Species), alpha = .5) +
+   ggtitle("Predictive biplot of Anderson iris measurements")
> 
> 
> 
> cleanEx()
> nameEx("glass")
> ### * glass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glass
> ### Title: Glass composition data
> ### Aliases: glass
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # subset glass data to one site and major components
> head(glass)
# A tibble: 6 × 16
  Site       Anal  Context Form   SiO2  TiO2 Al2O3   FeO   MnO   MgO   CaO  Na2O
  <chr>      <chr> <chr>   <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 Bet Eli'e… 1     L14.B1… Chunk  76.0 NA     3.29  0.45   0.1  0.57  5.96  12.1
2 Bet Eli'e… 2     L14.B1… Chunk  73.6  0.16  3.7   0.85  NA    0.68  6.65  13.0
3 Bet Eli'e… 3     L14.B1… Chunk  75.0  0.13  3.36  0.53  NA    0.58  7.27  11.4
4 Bet Eli'e… 4     L14.B1… Chunk  76.0 NA     3.06  0.35   0.1  0.61  7.63  11.3
5 Bet Eli'e… 5     L14.B1… Chunk  75.9 NA     3.13  0.33  NA    0.65  7.49  11.4
6 Bet Eli'e… 6     L14.B1… Chunk  74.4  0.14  3.33  0.45  NA    0.62  7.2   12.6
# ℹ 4 more variables: K2O <dbl>, P2O5 <dbl>, Cl <dbl>, SO3 <dbl>
> glass_main <- subset(
+   glass,
+   Site == "Bet Eli'ezer",
+   select = c("SiO2", "Na2O", "CaO", "Al2O3", "MgO", "K2O")
+ )
> # format as a data frame with row names
> glass_main <- as.data.frame(glass_main)
> rownames(glass_main) <- subset(glass, Site == "Bet Eli'ezer")$Anal
> 
> # perform log-ratio analysis
> glass_lra <- lra(glass_main, compositional = TRUE, weighted = FALSE)
> # inspect LRA row and column coordinates
> head(glass_lra$row.coords)
        LRSV1       LRSV2      LRSV3      LRSV4      LRSV5
1 -0.04710674 -0.71421468 -0.1481599  2.0743704  1.4967846
2  1.06477553  0.29251672  0.7714624  0.8939097 -0.9176510
3  0.18390009 -0.41583336 -0.6223075 -0.6353946 -0.2492736
4 -0.50865018  0.05740889 -0.5126957 -1.0951873  0.7896664
5 -0.86538619  0.38109842 -0.6578733 -0.1765439  0.1192224
6 -1.37184826 -0.53735808 -0.3574370  1.4192209 -1.3690434
> glass_lra$column.coords
           LRSV1      LRSV2      LRSV3      LRSV4       LRSV5
SiO2  -0.3208528 -0.4140707 -1.1214862  0.3234513  1.83391575
Na2O  -0.5797004 -1.0229552  1.7646198  0.7054758  0.07701303
CaO   -1.1181033 -0.2446487 -0.3429045 -1.7573115 -0.69589148
Al2O3  0.6587363 -0.6516092 -1.0691711  1.0070705 -1.40860005
MgO   -0.5349928  2.0542100  0.1946826  0.6532841 -0.17123886
K2O    1.8949130  0.2790737  0.5742595 -0.9319702  0.36480160
> # inspect singular values of LRA
> glass_lra$sv
[1] 0.06502356 0.04802956 0.03826908 0.03063650 0.01432346
> 
> # plot samples and measurements in a biplot
> biplot(
+   x = glass_lra$row.coords %*% diag(glass_lra$sv),
+   y = glass_lra$column.coords,
+   xlab = "Sample (principal coord.)", ylab = ""
+ )
> mtext("Component (standard coord.)", side = 4L, line = 3L)
> 
> 
> 
> cleanEx()
> nameEx("lda-ord")
> ### * lda-ord
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lda-ord
> ### Title: Augmented implementation of linear discriminant analysis
> ### Aliases: lda-ord lda_ord lda_ord.formula lda_ord.data.frame
> ###   lda_ord.matrix lda_ord.default predict.lda_ord
> 
> ### ** Examples
> 
> # Anderson iris species data centroid
> iris_centroid <- t(apply(iris[, 1:4], 2, mean))
> # unstandardized discriminant coefficients: the discriminant axes are linear
> # combinations of the centered variables
> iris_lda <- lda_ord(iris[, 1:4], iris[, 5], axes.scale = "unstandardized")
> # linear combinations of centered variables
> print(sweep(iris_lda$means, 2, iris_centroid, "-") %*% get_cols(iris_lda))
                 LD1        LD2
setosa      7.607600 -0.2151330
versicolor -1.825049  0.7278996
virginica  -5.782550 -0.5127666
> # discriminant centroids
> print(get_rows(iris_lda, elements = "active"))
                 LD1        LD2
setosa      7.607600 -0.2151330
versicolor -1.825049  0.7278996
virginica  -5.782550 -0.5127666
> 
> # unstandardized coefficient LDA biplot
> iris_lda %>%
+   as_tbl_ord() %>%
+   augment_ord() %>%
+   mutate_rows(
+     species = grouping,
+     discriminant = ifelse(.element == "active", "centroid", "case")
+   ) %>%
+   ggbiplot() +
+   theme_bw() +
+   geom_rows_point(aes(
+     color = grouping,
+     size = discriminant, alpha = discriminant
+   )) +
+   geom_cols_vector(color = "#888888") +
+   geom_cols_text_radiate(aes(label = name), size = 3) +
+   scale_color_brewer(type = "qual", palette = 2) +
+   ggtitle("Unstandardized coefficient biplot of iris LDA") +
+   expand_limits(y = c(-3, 5))
Warning: Using size for a discrete variable is not advised.
Warning: Using alpha for a discrete variable is not advised.
> 
> # standardized discriminant coefficients: permit comparisons across the
> # variables
> iris_lda <- lda_ord(iris[, 1:4], iris[, 5], axes.scale = "standardized")
> # standardized variable contributions to discriminant axes
> iris_lda %>%
+   as_tbl_ord() %>%
+   augment_ord() %>%
+   fortify(.matrix = "cols") %>%
+   dplyr::mutate(variable = name) %>%
+   tidyr::gather(discriminant, coefficient, LD1, LD2) %>%
+   ggplot(aes(x = discriminant, y = coefficient, fill = variable)) +
+   geom_bar(position = "dodge", stat = "identity") +
+   labs(y = "Standardized coefficient", x = "Linear discriminant") +
+   theme_bw() +
+   coord_flip()
> # standardized coefficient LDA biplot
> iris_lda %>%
+   as_tbl_ord() %>%
+   augment_ord() %>%
+   mutate_rows(
+     species = grouping,
+     discriminant = ifelse(.element == "active", "centroid", "case")
+   ) %>%
+   ggbiplot() +
+   theme_bw() +
+   geom_rows_point(aes(
+     color = grouping,
+     size = discriminant, alpha = discriminant
+   )) +
+   geom_cols_vector(color = "#888888") +
+   geom_cols_text_radiate(aes(label = name), size = 3) +
+   scale_color_brewer(type = "qual", palette = 2) +
+   ggtitle("Standardized coefficient biplot of iris LDA") +
+   expand_limits(y = c(-2, 3))
Warning: Using size for a discrete variable is not advised.
Warning: Using alpha for a discrete variable is not advised.
> 
> # variable contributions (de-sphered discriminant coefficients): recover the
> # inner product relationship with the centered class centroids
> iris_lda <- lda_ord(iris[, 1:4], iris[, 5], axes.scale = "contribution")
> # symmetric square root of within-class covariance
> C_W_eig <- eigen(cov(iris[, 1:4] - iris_lda$means[iris[, 5], ]))
> C_W_sqrtinv <-
+   C_W_eig$vectors %*% diag(1/sqrt(C_W_eig$values)) %*% t(C_W_eig$vectors)
> # product of matrix factors (scores and loadings)
> print(get_rows(iris_lda, elements = "active") %*% t(get_cols(iris_lda)))
                 [,1]      [,2]      [,3]       [,4]
setosa      0.3061785  2.593874 -5.861269 -3.9959956
versicolor -0.1774657 -1.154286  1.457859  0.5653316
virginica  -0.1287128 -1.439587  4.403411  3.4306640
> # "asymmetric" square roots of Mahalanobis distances between variables
> print(sweep(iris_lda$means, 2, iris_centroid, "-") %*% C_W_sqrtinv)
                 [,1]      [,2]      [,3]       [,4]
setosa      0.3103442  2.629165 -5.941014 -4.0503629
versicolor -0.1798802 -1.169991  1.477693  0.5730232
virginica  -0.1304640 -1.459174  4.463321  3.4773397
> # contribution LDA biplot
> iris_lda %>%
+   as_tbl_ord() %>%
+   augment_ord() %>%
+   mutate_rows(
+     species = grouping,
+     discriminant = ifelse(.element == "active", "centroid", "case")
+   ) %>%
+   ggbiplot() +
+   theme_bw() +
+   geom_rows_point(aes(
+     color = grouping,
+     size = discriminant, alpha = discriminant
+   )) +
+   geom_cols_vector(color = "#888888") +
+   geom_cols_text_radiate(aes(label = name), size = 3) +
+   scale_color_brewer(type = "qual", palette = 2) +
+   ggtitle("Contribution biplot of iris LDA") +
+   expand_limits(y = c(-2, 3.5))
Warning: Using size for a discrete variable is not advised.
Warning: Using alpha for a discrete variable is not advised.
> 
> 
> 
> cleanEx()
> nameEx("lra-ord")
> ### * lra-ord
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lra-ord
> ### Title: Log-ratio analysis
> ### Aliases: lra-ord lra print.lra screeplot.lra biplot.lra plot.lra
> 
> ### ** Examples
> 
> # U.S. 1973 violent crime arrests
> head(USArrests)
           Murder Assault UrbanPop Rape
Alabama      13.2     236       58 21.2
Alaska       10.0     263       48 44.5
Arizona       8.1     294       80 31.0
Arkansas      8.8     190       50 19.5
California    9.0     276       91 40.6
Colorado      7.9     204       78 38.7
> # row and column subsets
> state_examples <- c("Hawaii", "Mississippi", "North Dakota")
> arrests <- c(1L, 2L, 4L)
> 
> # pairwise log-ratios of violent crime arrests for two states
> arrest_pairs <- combn(arrests, 2L)
> arrest_ratios <-
+   USArrests[, arrest_pairs[1L, ]] / USArrests[, arrest_pairs[2L, ]]
> colnames(arrest_ratios) <- paste(
+   colnames(USArrests)[arrest_pairs[1L, ]], "/",
+   colnames(USArrests)[arrest_pairs[2L, ]], sep = ""
+ )
> arrest_logratios <- log(arrest_ratios)
> arrest_logratios[state_examples, ]
             Murder/Assault Murder/Rape Assault/Rape
Hawaii            -2.160935 -1.33797578    0.8229588
Mississippi       -2.778009 -0.06025919    2.7177496
North Dakota      -4.029806 -2.21101790    1.8187881
> 
> # non-compositional log-ratio analysis
> (arrests_lra <- lra(USArrests[, arrests]))
Singular values: 0.11758785 0.06383505 

Row scores (6 of 50):
                LRSV1      LRSV2
Alabama    -0.6800120  0.9296011
Alaska      0.9299899 -0.6245772
Arizona    -0.3298496 -1.3115817
Arkansas   -0.3513443  0.2773231
California  0.5516590 -1.0042801
Colorado    1.2291066 -0.6388469

Column scores:
            LRSV1      LRSV2
Murder   0.283086  4.9570302
Assault -0.370595 -0.1805698
Rape     2.876702 -0.3660163
> screeplot(arrests_lra)
> biplot(arrests_lra, scale = c(1, 0))
> 
> # compositional log-ratio analysis
> (arrests_lra <- lra(USArrests[, arrests], compositional = TRUE))
Singular values: 0.12786989 0.07009419 

Row scores (6 of 50):
                LRSV1      LRSV2
Alabama    -0.8599661  1.0266703
Alaska      0.6256391 -0.5908842
Arizona    -0.5965504 -1.0524702
Arkansas   -0.5672002  0.3924046
California  0.2531761 -0.8868744
Colorado    0.9102533 -0.6422862

Column scores:
             LRSV1      LRSV2
Murder   0.6072392  4.9382810
Assault -0.3999883 -0.1533148
Rape     2.7051937 -0.5351457
> biplot(arrests_lra, scale = c(1, 0))
> 
> 
> 
> cleanEx()
> nameEx("methods-cancor")
> ### * methods-cancor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods-cancor
> ### Title: Functionality for canonical correlations
> ### Aliases: methods-cancor as_tbl_ord.cancor_ord recover_rows.cancor_ord
> ###   recover_cols.cancor_ord recover_inertia.cancor_ord
> ###   recover_coord.cancor_ord recover_conference.cancor_ord
> ###   recover_supp_rows.cancor_ord recover_supp_cols.cancor_ord
> ###   recover_aug_rows.cancor_ord recover_aug_cols.cancor_ord
> ###   recover_aug_coord.cancor_ord
> 
> ### ** Examples
> 
> # data frame of life-cycle savings across countries
> class(LifeCycleSavings)
[1] "data.frame"
> head(LifeCycleSavings)
             sr pop15 pop75     dpi ddpi
Australia 11.43 29.35  2.87 2329.68 2.87
Austria   12.07 23.32  4.41 1507.99 3.93
Belgium   13.17 23.80  4.43 2108.47 3.82
Bolivia    5.75 41.89  1.67  189.13 0.22
Brazil    12.88 42.19  0.83  728.47 4.56
Canada     8.79 31.72  2.85 2982.88 2.43
> savings_pop <- LifeCycleSavings[, c("pop15", "pop75")]
> savings_oec <- LifeCycleSavings[, c("sr", "dpi", "ddpi")]
> 
> # canonical correlation analysis with scores and correlations included
> savings_cca <- cancor_ord(savings_pop, savings_oec, scores = TRUE)
> savings_cca <- augment_ord(as_tbl_ord(savings_cca))
> head(get_cols(savings_cca))
               CanCor1       CanCor2
sr        0.0084710221  3.337936e-02
dpi       0.0001307398 -7.588232e-05
ddpi      0.0041706000 -1.226790e-02
Australia 0.1710832312 -2.319485e-02
Austria   0.0734979335  4.751571e-02
Belgium   0.1608639281  4.001665e-02
> head(get_cols(savings_cca, elements = "score"))
                 [,1]        [,2]
Australia  0.17108323 -0.02319485
Austria    0.07349793  0.04751571
Belgium    0.16086393  0.04001665
Bolivia   -0.16793935 -0.01784978
Brazil    -0.01892735  0.12597599
Canada     0.23228391 -0.15548481
> get_rows(savings_cca, elements = "structure")
                       [,1]         [,2]
Australia       0.080362286  0.057700356
Austria         0.210217920 -0.124760455
Belgium         0.206817659 -0.147353276
Bolivia        -0.092264868 -0.084150385
Brazil         -0.135862036  0.123644726
Canada          0.057796606 -0.022939696
Chile          -0.088730206  0.079629867
China          -0.166969430  0.072566104
Colombia       -0.165216418 -0.097415107
Costa Rica     -0.170435473 -0.154462094
Denmark         0.176845172 -0.039655162
Ecuador        -0.155885659 -0.119302333
Finland         0.069795922  0.242551458
France          0.208472809 -0.263277199
Germany         0.158742664  0.151532042
Greece          0.125534708  0.132936978
Guatamala      -0.169084041 -0.026584891
Honduras       -0.194762607  0.002903451
Iceland         0.047939457 -0.166484319
India          -0.121520306  0.121679633
Ireland         0.128086354 -0.351472861
Italy           0.154042705  0.073862843
Japan           0.054980076  0.392359096
Korea          -0.127870350  0.119119726
Luxembourg      0.190986112  0.107308952
Malta           0.031839649  0.046276615
Norway          0.150257208 -0.027393904
Netherlands     0.141122714  0.126852315
New Zealand     0.065255149 -0.138477036
Nicaragua      -0.143341921 -0.078506548
Panama         -0.130344329 -0.022294782
Paraguay       -0.115957618  0.102960459
Peru           -0.132192367 -0.065939607
Philippines    -0.158835442 -0.099269419
Portugal        0.082942570  0.077033191
South Africa    0.028063135  0.117469052
South Rhodesia -0.008726758  0.316030295
Spain           0.095030764  0.116017873
Sweden          0.233670507 -0.090503487
Switzerland     0.175588765  0.046093670
Turkey         -0.134906511  0.014013696
Tunisia        -0.153181646 -0.117626373
United Kingdom  0.213105839 -0.135964931
United States   0.103413900 -0.104736278
Venezuela      -0.170813415 -0.047071960
Zambia         -0.176876085  0.083089347
Jamaica        -0.082330658 -0.071878093
Uruguay         0.084180403  0.140938007
Libya          -0.089205403 -0.253474726
Malaysia       -0.189777503 -0.013574829
pop15          -0.982982070 -0.183701522
pop75           0.969792868 -0.243929894
> get_cols(savings_cca, elements = "structure")
                       [,1]         [,2]
Australia       0.171083231 -0.023194852
Austria         0.073497933  0.047515706
Belgium         0.160863928  0.040016653
Bolivia        -0.167939348 -0.017849776
Brazil         -0.018927351  0.125975993
Canada          0.232283907 -0.155484806
Chile          -0.139411775 -0.255757534
China          -0.076484519  0.102650369
Colombia       -0.151091771 -0.085279284
Costa Rica     -0.077686953  0.096990052
Denmark         0.243481179  0.131320249
Ecuador        -0.165124499 -0.121601972
Finland         0.090745497  0.001878991
France          0.173067145  0.005743865
Germany         0.199609498 -0.002473117
Greece         -0.011860145  0.020302710
Guatamala      -0.172745183 -0.132399004
Honduras       -0.133371832  0.007517853
Iceland         0.021555892 -0.308262763
India          -0.148002154  0.082042157
Ireland         0.015276247  0.062608327
Italy           0.075166369  0.135021917
Japan           0.135063656  0.315449149
Korea          -0.157194180 -0.146916393
Luxembourg      0.172163609 -0.052380163
Malta           0.001285777  0.178757532
Norway          0.151317894 -0.064297624
Netherlands     0.141333968  0.070216617
New Zealand     0.049912057  0.028959254
Nicaragua      -0.127549491 -0.004188327
Panama         -0.115291450 -0.131956928
Paraguay       -0.192048922 -0.154676750
Peru           -0.079612027  0.192610337
Philippines    -0.105817455  0.197786992
Portugal       -0.029527899  0.088439216
South Africa   -0.053665283  0.102841084
South Rhodesia -0.088475821  0.207635702
Spain          -0.023934583  0.088441591
Sweden          0.259747311 -0.251047443
Switzerland     0.232635276  0.046153127
Turkey         -0.135546685 -0.087375693
Tunisia        -0.181107771 -0.131757959
United Kingdom  0.069402362 -0.094341425
United States   0.355173128 -0.274111611
Venezuela      -0.055636386  0.046803247
Zambia         -0.045547784  0.353236545
Jamaica        -0.084487974 -0.089413410
Uruguay        -0.055961815  0.034464260
Libya          -0.081137138 -0.110362124
Malaysia       -0.149477671 -0.116250539
sr              0.491037858  0.855775971
dpi             0.954517196 -0.263726650
ddpi            0.047337701  0.140773707
> 
> # biplot of interset and intraset correlations with the population data
> savings_cca %>%
+   confer_inertia("cols") %>%
+   ggbiplot(aes(label = name, color = .matrix)) +
+   theme_bw() + theme_biplot() +
+   geom_unit_circle() +
+   geom_rows_vector(arrow = NULL, elements = "structure") +
+   geom_cols_vector(arrow = NULL, elements = "structure", linetype = "dashed") +
+   geom_rows_text(elements = "structure", hjust = "outward") +
+   geom_cols_text(elements = "structure", hjust = "outward") +
+   scale_color_brewer(limits = c("rows", "cols"), type = "qual") +
+   expand_limits(x = c(-1, 1), y = c(-1, 1))
> 
> # biplot with scores as supplemental elements
> savings_cca %>%
+   confer_inertia("rows") %>%
+   ggbiplot(aes(label = name), sec.axes = "cols", scale.factor = 5L) +
+   theme_biplot() +
+   geom_cols_vector(elements = "active") +
+   geom_cols_text_radiate(elements = "active") +
+   geom_rows_text(elements = "score", subset = seq(50L))
`subset` will be applied after data are restricted to score elements.
> 
> 
> 
> cleanEx()
> nameEx("methods-cmds")
> ### * methods-cmds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods-cmds
> ### Title: Functionality for classical multidimensional scaling objects
> ### Aliases: methods-cmds as_tbl_ord.cmds_ord recover_rows.cmds_ord
> ###   recover_cols.cmds_ord recover_inertia.cmds_ord recover_coord.cmds_ord
> ###   recover_conference.cmds_ord recover_aug_rows.cmds_ord
> ###   recover_aug_cols.cmds_ord recover_aug_coord.cmds_ord
> 
> ### ** Examples
> 
> # 'dist' object (matrix of road distances) of large American cities
> class(UScitiesD)
[1] "dist"
> print(UScitiesD)
              Atlanta Chicago Denver Houston LosAngeles Miami NewYork
Chicago           587                                                
Denver           1212     920                                        
Houston           701     940    879                                 
LosAngeles       1936    1745    831    1374                         
Miami             604    1188   1726     968       2339              
NewYork           748     713   1631    1420       2451  1092        
SanFrancisco     2139    1858    949    1645        347  2594    2571
Seattle          2182    1737   1021    1891        959  2734    2408
Washington.DC     543     597   1494    1220       2300   923     205
              SanFrancisco Seattle
Chicago                           
Denver                            
Houston                           
LosAngeles                        
Miami                             
NewYork                           
SanFrancisco                      
Seattle                678        
Washington.DC         2442    2329
> 
> # use multidimensional scaling to infer artificial planar coordinates
> UScitiesD %>%
+   cmdscale_ord(k = 2) %>%
+   as_tbl_ord() %>%
+   print() -> usa_mds
# A tbl_ord of class 'cmds_ord': (10 x 2) x (10 x 2)'
# 2 coordinates: PCo1 and PCo2
# 
# Rows (symmetric): [ 10 x 2 | 0 ]
     PCo1   PCo2 | 
                 | 
 1  -719.  143.  | 
 2  -382. -341.  | 
 3   482.  -25.3 | 
 4  -161.  573.  | 
 5  1204.  390.  | 
 6 -1134.  582.  | 
 7 -1072. -519.  | 
 8  1421.  113.  | 
 9  1342. -580.  | 
10  -980. -335.  | 
# 
# Columns (symmetric): [ 10 x 2 | 0 ]
     PCo1   PCo2 | 
                 | 
 1  -719.  143.  | 
 2  -382. -341.  | 
 3   482.  -25.3 | 
 4  -161.  573.  | 
 5  1204.  390.  | 
 6 -1134.  582.  | 
 7 -1072. -519.  | 
 8  1421.  113.  | 
 9  1342. -580.  | 
10  -980. -335.  | 
> 
> # recover (equivalent) matrices of row and column artificial coordinates
> get_rows(usa_mds)
            PCo1       PCo2
 [1,]  -718.7594  142.99427
 [2,]  -382.0558 -340.83962
 [3,]   481.6023  -25.28504
 [4,]  -161.4663  572.76991
 [5,]  1203.7380  390.10029
 [6,] -1133.5271  581.90731
 [7,] -1072.2357 -519.02423
 [8,]  1420.6033  112.58920
 [9,]  1341.7225 -579.73928
[10,]  -979.6220 -335.47281
> get_cols(usa_mds)
            PCo1       PCo2
 [1,]  -718.7594  142.99427
 [2,]  -382.0558 -340.83962
 [3,]   481.6023  -25.28504
 [4,]  -161.4663  572.76991
 [5,]  1203.7380  390.10029
 [6,] -1133.5271  581.90731
 [7,] -1072.2357 -519.02423
 [8,]  1420.6033  112.58920
 [9,]  1341.7225 -579.73928
[10,]  -979.6220 -335.47281
> 
> # augment ordination with point names
> (usa_mds <- augment_ord(usa_mds))
# A tbl_ord of class 'cmds_ord': (10 x 2) x (10 x 2)'
# 2 coordinates: PCo1 and PCo2
# 
# Rows (symmetric): [ 10 x 2 | 1 ]
     PCo1   PCo2 |    name         
                 |    <chr>        
 1  -719.  143.  |  1 Atlanta      
 2  -382. -341.  |  2 Chicago      
 3   482.  -25.3 |  3 Denver       
 4  -161.  573.  |  4 Houston      
 5  1204.  390.  |  5 LosAngeles   
 6 -1134.  582.  |  6 Miami        
 7 -1072. -519.  |  7 NewYork      
 8  1421.  113.  |  8 SanFrancisco 
 9  1342. -580.  |  9 Seattle      
10  -980. -335.  | 10 Washington.DC
# 
# Columns (symmetric): [ 10 x 2 | 1 ]
     PCo1   PCo2 |    name         
                 |    <chr>        
 1  -719.  143.  |  1 Atlanta      
 2  -382. -341.  |  2 Chicago      
 3   482.  -25.3 |  3 Denver       
 4  -161.  573.  |  4 Houston      
 5  1204.  390.  |  5 LosAngeles   
 6 -1134.  582.  |  6 Miami        
 7 -1072. -519.  |  7 NewYork      
 8  1421.  113.  |  8 SanFrancisco 
 9  1342. -580.  |  9 Seattle      
10  -980. -335.  | 10 Washington.DC
> 
> # reorient biplot to conventional compass
> usa_mds %>%
+   negate_ord(c(1, 2)) %>%
+   ggbiplot() +
+   geom_cols_text(aes(label = name), size = 3) +
+   ggtitle("MDS biplot of distances between U.S. cities")
> 
> 
> 
> cleanEx()
> nameEx("methods-correspondence")
> ### * methods-correspondence
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods-correspondence
> ### Title: Functionality for correspondence analysis ('correspondence')
> ###   objects
> ### Aliases: methods-correspondence as_tbl_ord.correspondence
> ###   recover_rows.correspondence recover_cols.correspondence
> ###   recover_inertia.correspondence recover_conference.correspondence
> ###   recover_coord.correspondence recover_aug_rows.correspondence
> ###   recover_aug_cols.correspondence recover_aug_coord.correspondence
> 
> ### ** Examples
> 
> # table of hair and eye color data collapsed by sex
> data(quine, package = "MASS")
> class(quine)
[1] "data.frame"
> head(quine)
  Eth Sex Age Lrn Days
1   A   M  F0  SL    2
2   A   M  F0  SL   11
3   A   M  F0  SL   14
4   A   M  F0  AL    5
5   A   M  F0  AL    5
6   A   M  F0  AL   13
> 
> # use correspondence analysis to construct row and column profiles
> (quine_ca <- MASS::corresp(~ Age + Eth, data = quine))
First canonical correlation(s): 0.05317534 

 Age scores:
        F0         F1         F2         F3 
-0.3344445  1.4246090 -1.0320002 -0.4612728 

 Eth scores:
         A          N 
-1.0563816  0.9466276 
> (quine_ca <- as_tbl_ord(quine_ca))
# A tbl_ord of class 'correspondence': (4 x 1) x (2 x 1)'
# 1 coordinate: Can1
# 
# Rows (standard): [ 4 x 1 | 0 ]
    Can1 | 
         | 
1 -0.334 | 
2  1.42  | 
3 -1.03  | 
4 -0.461 | 
# 
# Columns (standard): [ 2 x 1 | 0 ]
    Can1 | 
         | 
1 -1.06  | 
2  0.947 | 
> 
> # recover row and column profiles
> get_rows(quine_ca)
         Can1
F0 -0.3344445
F1  1.4246090
F2 -1.0320002
F3 -0.4612728
> get_cols(quine_ca)
        Can1
A -1.0563816
N  0.9466276
> 
> # augment profiles with names, masses, distances, and inertias
> (quine_ca <- augment_ord(quine_ca))
# A tbl_ord of class 'correspondence': (4 x 1) x (2 x 1)'
# 1 coordinate: Can1
# 
# Rows (standard): [ 4 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -0.334 | 1 F0   
2  1.42  | 2 F1   
3 -1.03  | 3 F2   
4 -0.461 | 4 F3   
# 
# Columns (standard): [ 2 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -1.06  | 1 A    
2  0.947 | 2 N    
> 
> 
> 
> cleanEx()
> nameEx("methods-eigen")
> ### * methods-eigen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods-eigen
> ### Title: Functionality for eigen-decompositions
> ### Aliases: methods-eigen as_tbl_ord.eigen recover_rows.eigen
> ###   recover_cols.eigen recover_inertia.eigen recover_coord.eigen
> ###   recover_conference.eigen recover_aug_rows.eigen_ord
> ###   recover_aug_cols.eigen_ord recover_aug_coord.eigen
> ###   as_tbl_ord.eigen_ord recover_rows.eigen_ord recover_cols.eigen_ord
> ###   recover_inertia.eigen_ord recover_coord.eigen_ord
> ###   recover_conference.eigen_ord recover_aug_coord.eigen_ord
> 
> ### ** Examples
> 
> # subset QS data to rank variables
> qs_ranks <- subset(
+   qswur_usa,
+   complete.cases(qswur_usa),
+   select = 8:13
+ )
> head(qs_ranks)
# A tibble: 6 × 6
  rk_academic rk_employer rk_ratio rk_citations rk_intl_faculty rk_intl_students
        <int>       <int>    <int>        <int>           <int>            <int>
1           6           4       12           10              33               65
2           5           5       20           14              52              170
3           1           1       42            8              47              184
4          23          90        3            4             136              112
5          13          47       54           49             232              182
6          10          32      115            3             239              192
> 
> # eigendecomposition of Kendall correlation matrix
> qs_ranks %>%
+   cor(method = "kendall") %>%
+   eigen() %>%
+   print() -> qs_eigen
eigen() decomposition
$values
[1] 2.9359358 0.8413683 0.8118814 0.6961366 0.5015260 0.2131520

$vectors
           [,1]        [,2]       [,3]        [,4]        [,5]         [,6]
[1,] -0.4876816  0.28115567  0.3779721  0.08143094  0.05527027  0.728402026
[2,] -0.4726835  0.28941567  0.4021804  0.18473911  0.20861096 -0.673359308
[3,] -0.3114638 -0.79289902  0.3704858 -0.18660208 -0.31580188 -0.049904822
[4,] -0.4119484  0.29472593 -0.4217199 -0.13454306 -0.73312495 -0.100067282
[5,] -0.3896137 -0.07836083 -0.3770419 -0.65199069  0.52421836 -0.001847863
[6,] -0.3467377 -0.33984910 -0.4879754  0.69370486  0.20351597  0.059248322

> 
> # recover eigenvectors
> get_rows(qs_eigen)
            EV1         EV2        EV3         EV4         EV5          EV6
[1,] -0.4876816  0.28115567  0.3779721  0.08143094  0.05527027  0.728402026
[2,] -0.4726835  0.28941567  0.4021804  0.18473911  0.20861096 -0.673359308
[3,] -0.3114638 -0.79289902  0.3704858 -0.18660208 -0.31580188 -0.049904822
[4,] -0.4119484  0.29472593 -0.4217199 -0.13454306 -0.73312495 -0.100067282
[5,] -0.3896137 -0.07836083 -0.3770419 -0.65199069  0.52421836 -0.001847863
[6,] -0.3467377 -0.33984910 -0.4879754  0.69370486  0.20351597  0.059248322
> identical(get_cols(qs_eigen), get_rows(qs_eigen))
[1] TRUE
> 
> # wrap as a 'tbl_ord'
> as_tbl_ord(qs_eigen)
# A tbl_ord of class 'eigen': (6 x 6) x (6 x 6)'
# 6 coordinates: EV1, EV2, ..., EV6
# 
# Rows (standard): [ 6 x 6 | 0 ]
     EV1     EV2    EV3 ... | 
                            | 
1 -0.488  0.281   0.378     | 
2 -0.473  0.289   0.402     | 
3 -0.311 -0.793   0.370 ... | 
4 -0.412  0.295  -0.422     | 
5 -0.390 -0.0784 -0.377     | 
6 -0.347 -0.340  -0.488     | 
# 
# Columns (standard): [ 6 x 6 | 0 ]
     EV1     EV2    EV3 ... | 
                            | 
1 -0.488  0.281   0.378     | 
2 -0.473  0.289   0.402     | 
3 -0.311 -0.793   0.370 ... | 
4 -0.412  0.295  -0.422     | 
5 -0.390 -0.0784 -0.377     | 
6 -0.347 -0.340  -0.488     | 
> 
> # same eigendecomposition, preserving row names and adding column names
> qs_ranks %>%
+   cor(method = "kendall") %>%
+   eigen_ord() %>%
+   print() -> qs_eigen
eigen() decomposition
$values
[1] 2.9359358 0.8413683 0.8118814 0.6961366 0.5015260 0.2131520

$vectors
                        EV1         EV2        EV3         EV4         EV5
rk_academic      -0.4876816  0.28115567  0.3779721  0.08143094  0.05527027
rk_employer      -0.4726835  0.28941567  0.4021804  0.18473911  0.20861096
rk_ratio         -0.3114638 -0.79289902  0.3704858 -0.18660208 -0.31580188
rk_citations     -0.4119484  0.29472593 -0.4217199 -0.13454306 -0.73312495
rk_intl_faculty  -0.3896137 -0.07836083 -0.3770419 -0.65199069  0.52421836
rk_intl_students -0.3467377 -0.33984910 -0.4879754  0.69370486  0.20351597
                          EV6
rk_academic       0.728402026
rk_employer      -0.673359308
rk_ratio         -0.049904822
rk_citations     -0.100067282
rk_intl_faculty  -0.001847863
rk_intl_students  0.059248322

> 
> # wrap as a 'tbl_ord' and augment with dimension names
> augment_ord(as_tbl_ord(qs_eigen))
# A tbl_ord of class 'eigen_ord': (6 x 6) x (6 x 6)'
# 6 coordinates: EV1, EV2, ..., EV6
# 
# Rows (standard): [ 6 x 6 | 1 ]
     EV1     EV2    EV3 ... |   name            
                            |   <chr>           
1 -0.488  0.281   0.378     | 1 rk_academic     
2 -0.473  0.289   0.402     | 2 rk_employer     
3 -0.311 -0.793   0.370 ... | 3 rk_ratio        
4 -0.412  0.295  -0.422     | 4 rk_citations    
5 -0.390 -0.0784 -0.377     | 5 rk_intl_faculty 
6 -0.347 -0.340  -0.488     | 6 rk_intl_students
# 
# Columns (standard): [ 6 x 6 | 1 ]
     EV1     EV2    EV3 ... |   name            
                            |   <chr>           
1 -0.488  0.281   0.378     | 1 rk_academic     
2 -0.473  0.289   0.402     | 2 rk_employer     
3 -0.311 -0.793   0.370 ... | 3 rk_ratio        
4 -0.412  0.295  -0.422     | 4 rk_citations    
5 -0.390 -0.0784 -0.377     | 5 rk_intl_faculty 
6 -0.347 -0.340  -0.488     | 6 rk_intl_students
> 
> # decomposition returns pure eigenvectors
> get_conference(qs_eigen)
[1] 0 0
> 
> 
> 
> cleanEx()
> nameEx("methods-factanal")
> ### * methods-factanal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods-factanal
> ### Title: Functionality for factor analysis ('factanal') objects
> ### Aliases: methods-factanal as_tbl_ord.factanal recover_rows.factanal
> ###   recover_cols.factanal recover_inertia.factanal recover_coord.factanal
> ###   recover_conference.factanal recover_supp_rows.factanal
> ###   recover_aug_rows.factanal recover_aug_cols.factanal
> ###   recover_aug_coord.factanal
> 
> ### ** Examples
> 
> # data frame of Swiss fertility and socioeconomic indicators
> class(swiss)
[1] "data.frame"
> head(swiss)
             Fertility Agriculture Examination Education Catholic
Courtelary        80.2        17.0          15        12     9.96
Delemont          83.1        45.1           6         9    84.84
Franches-Mnt      92.5        39.7           5         5    93.40
Moutier           85.8        36.5          12         7    33.77
Neuveville        76.9        43.5          17        15     5.16
Porrentruy        76.1        35.3           9         7    90.57
             Infant.Mortality
Courtelary               22.2
Delemont                 22.2
Franches-Mnt             20.2
Moutier                  20.3
Neuveville               20.6
Porrentruy               26.6
> # perform factor analysis
> swiss_fa <- factanal(~ ., factors = 2L, data = swiss, scores = "regression")
> 
> # wrap as a 'tbl_ord' object
> (swiss_fa <- as_tbl_ord(swiss_fa))
# A tbl_ord of class 'factanal': (53 x 2) x (6 x 2)'
# 2 coordinates: Factor1 and Factor2
# 
# Rows (symmetric): [ 53 x 2 | 0 ]
  Factor1 Factor2 | 
                  | 
1  -0.652  0.393  | 
2  -0.631  0.333  | 
3   0.685 -0.510  | 
4   0.997 -0.0313 | 
5  -0.124  0.961  | 

# 
# Columns (symmetric): [ 6 x 2 | 0 ]
  Factor1 Factor2 | 
                  | 
1 -0.652   0.393  | 
2 -0.631   0.333  | 
3  0.685  -0.510  | 
4  0.997  -0.0313 | 
5 -0.124   0.961  | 
6 -0.0947  0.175  | 
> 
> # recover loadings
> get_rows(swiss_fa, elements = "active")
                     Factor1     Factor2
Fertility        -0.65238512  0.39335226
Agriculture      -0.63054439  0.33275063
Examination       0.68498141 -0.51036433
Education         0.99700850 -0.03128268
Catholic         -0.12417831  0.96118093
Infant.Mortality -0.09466294  0.17483734
> get_cols(swiss_fa)
                     Factor1     Factor2
Fertility        -0.65238512  0.39335226
Agriculture      -0.63054439  0.33275063
Examination       0.68498141 -0.51036433
Education         0.99700850 -0.03128268
Catholic         -0.12417831  0.96118093
Infant.Mortality -0.09466294  0.17483734
> # recover scores
> head(get_rows(swiss_fa, elements = "score"))
                 Factor1    Factor2
Courtelary    0.07912746 -0.6344915
Delemont     -0.17926953  1.0783941
Franches-Mnt -0.58784929  1.2004233
Moutier      -0.42433417 -0.1583409
Neuveville    0.38211185 -0.6682790
Porrentruy   -0.37286722  1.0884740
> 
> # augment column loadings with uniquenesses
> (swiss_fa <- augment_ord(swiss_fa))
# A tbl_ord of class 'factanal': (53 x 2) x (6 x 2)'
# 2 coordinates: Factor1 and Factor2
# 
# Rows (symmetric): [ 53 x 2 | 2 ]
  Factor1 Factor2 |   name        .element
                  |   <chr>       <chr>   
1  -0.652  0.393  | 1 Fertility   active  
2  -0.631  0.333  | 2 Agriculture active  
3   0.685 -0.510  | 3 Examination active  
4   0.997 -0.0313 | 4 Education   active  
5  -0.124  0.961  | 5 Catholic    active  
# ℹ 48 more rows
# 
# Columns (symmetric): [ 6 x 2 | 3 ]
  Factor1 Factor2 |   name           uniqueness .element
                  |   <chr>               <dbl> <chr>   
1 -0.652   0.393  | 1 Fertility          0.420  active  
2 -0.631   0.333  | 2 Agriculture        0.492  active  
3  0.685  -0.510  | 3 Examination        0.270  active  
4  0.997  -0.0313 | 4 Education          0.005  active  
5 -0.124   0.961  | 5 Catholic           0.0607 active  
6 -0.0947  0.175  | 6 Infant.Mortal…     0.960  active  
> 
> # symmetric biplot
> swiss_fa %>%
+   ggbiplot() +
+   theme_bw() +
+   geom_cols_vector(aes(color = uniqueness)) +
+   geom_cols_text_radiate(aes(label = name)) +
+   expand_limits(x = c(-2, 2.5), y = c(-1.5, 2))
> 
> 
> 
> cleanEx()
> nameEx("methods-kmeans")
> ### * methods-kmeans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods-kmeans
> ### Title: Functionality for k-means clustering ('kmeans') objects
> ### Aliases: methods-kmeans as_tbl_ord.kmeans recover_rows.kmeans
> ###   recover_cols.kmeans recover_coord.kmeans recover_aug_rows.kmeans
> ###   recover_aug_cols.kmeans recover_aug_coord.kmeans
> 
> ### ** Examples
> 
> # data frame of Anderson iris species measurements
> class(iris)
[1] "data.frame"
> head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> # compute 3-means clustering on scaled iris measurements
> set.seed(5601L)
> iris %>%
+   subset(select = -Species) %>%
+   scale() %>%
+   kmeans(centers = 3) %>%
+   print() -> iris_km
K-means clustering with 3 clusters of sizes 50, 53, 47

Cluster means:
  Sepal.Length Sepal.Width Petal.Length Petal.Width
1  -1.01119138  0.85041372   -1.3006301  -1.2507035
2  -0.05005221 -0.88042696    0.3465767   0.2805873
3   1.13217737  0.08812645    0.9928284   1.0141287

Clustering vector:
  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20 
  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 
 21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40 
  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 
 41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60 
  1   1   1   1   1   1   1   1   1   1   3   3   3   2   2   2   3   2   2   2 
 61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80 
  2   2   2   2   2   3   2   2   2   2   3   2   2   2   2   3   3   3   2   2 
 81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 
  2   2   2   2   2   3   3   2   2   2   2   2   2   2   2   2   2   2   2   2 
101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 
  3   2   3   3   3   3   2   3   3   3   3   3   3   2   2   3   3   3   3   2 
121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 
  3   2   3   2   3   3   2   3   3   3   3   3   3   2   2   3   3   3   2   3 
141 142 143 144 145 146 147 148 149 150 
  3   3   2   3   3   3   2   3   3   2 

Within cluster sum of squares by cluster:
[1] 47.35062 44.08754 47.45019
 (between_SS / total_SS =  76.7 %)

Available components:

[1] "cluster"      "centers"      "totss"        "withinss"     "tot.withinss"
[6] "betweenss"    "size"         "iter"         "ifault"      
> 
> # visualize clusters using PCA
> iris %>%
+   subset(select = -Species) %>%
+   prcomp() %>%
+   as_tbl_ord() %>%
+   mutate_rows(cluster = iris_km$cluster) %>%
+   ggbiplot() +
+   geom_rows_point(aes(color = factor(as.character(as.integer(cluster)),
+                                      levels = as.character(seq(3L))))) +
+   scale_color_brewer(type = "qual", name = "cluster")
> 
> # wrap as a 'tbl_ord' object
> (iris_km_ord <- as_tbl_ord(iris_km))
# A tbl_ord of class 'kmeans': (150 x 3) x (4 x 3)'
# 3 coordinates: 1, 2, 3
# 
# Rows: [ 150 x 3 | 0 ]
    `1`   `2`   `3` | 
                    | 
1     1     0     0 | 
2     1     0     0 | 
3     1     0     0 | 
4     1     0     0 | 
5     1     0     0 | 

# 
# Columns: [ 4 x 3 | 0 ]
     `1`     `2`    `3` | 
                        | 
1 -1.01  -0.0501 1.13   | 
2  0.850 -0.880  0.0881 | 
3 -1.30   0.347  0.993  | 
4 -1.25   0.281  1.01   | 
> 
> # augment everything with names, observations with cluster assignment
> (iris_km_ord <- augment_ord(iris_km_ord))
# A tbl_ord of class 'kmeans': (150 x 3) x (4 x 3)'
# 3 coordinates: 1, 2, 3
# 
# Rows: [ 150 x 3 | 2 ]
    `1`   `2`   `3` |   name  cluster
                    |   <chr> <fct>  
1     1     0     0 | 1 1     1      
2     1     0     0 | 2 2     1      
3     1     0     0 | 3 3     1      
4     1     0     0 | 4 4     1      
5     1     0     0 | 5 5     1      
# ℹ 145 more rows
# 
# Columns: [ 4 x 3 | 1 ]
     `1`     `2`    `3` |   name        
                        |   <chr>       
1 -1.01  -0.0501 1.13   | 1 Sepal.Length
2  0.850 -0.880  0.0881 | 2 Sepal.Width 
3 -1.30   0.347  0.993  | 3 Petal.Length
4 -1.25   0.281  1.01   | 4 Petal.Width 
> 
> # summarize clusters with standard deviation
> iris_km_ord %>%
+   tidy() %>%
+   transform(sdev = sqrt(withinss / size))
  name size withinss inertia prop_var quality      sdev
1    1   50 47.35062      NA       NA      NA 0.9731456
2    2   53 44.08754      NA       NA      NA 0.9120529
3    3   47 47.45019      NA       NA      NA 1.0047779
> 
> # discriminate between clusters 2 and 3
> iris_km_ord %>%
+   ggbiplot(aes(x = `2`, y = `3`), color = factor(.cluster)) +
+   geom_jitter(stat = "rows", aes(shape = cluster), width = .2, height = .2) +
+   geom_cols_axis(aes(color = `1`, label = name),
+                  text_size = 2, text_dodge = .1,
+                  label_size = 3, label_alpha = .5) +
+   scale_x_continuous(expand = expansion(mult = .8)) +
+   scale_y_continuous(expand = expansion(mult = .5)) +
+   ggtitle(
+     "Measurement loadings onto clusters 2 and 3",
+     "Color indicates loadings onto cluster 1"
+   )
> 
> 
> 
> cleanEx()
> nameEx("methods-lda")
> ### * methods-lda
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods-lda
> ### Title: Functionality for linear discriminant analysis ('lda') objects
> ### Aliases: methods-lda as_tbl_ord.lda as_tbl_ord.lda_ord recover_rows.lda
> ###   recover_rows.lda_ord recover_cols.lda recover_cols.lda_ord
> ###   recover_inertia.lda recover_inertia.lda_ord recover_coord.lda
> ###   recover_coord.lda_ord recover_conference.lda
> ###   recover_conference.lda_ord recover_aug_rows.lda
> ###   recover_aug_rows.lda_ord recover_aug_cols.lda
> ###   recover_aug_cols.lda_ord recover_aug_coord.lda
> ###   recover_aug_coord.lda_ord recover_supp_rows.lda
> ###   recover_supp_rows.lda_ord
> 
> ### ** Examples
> 
> # data frame of Anderson iris species measurements
> class(iris)
[1] "data.frame"
> head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> 
> # default (unstandardized discriminant) coefficients
> lda_ord(iris[, 1:4], iris[, 5]) %>%
+   as_tbl_ord() %>%
+   print() -> iris_lda
# A tbl_ord of class 'lda_ord': (153 x 2) x (4 x 2)'
# 2 coordinates: LD1 and LD2
# 
# Rows (principal): [ 153 x 2 | 0 ]
    LD1    LD2 | 
               | 
1  7.61 -0.215 | 
2 -1.83  0.728 | 
3 -5.78 -0.513 | 
4  8.06 -0.300 | 
5  7.13  0.787 | 

# 
# Columns (standard): [ 4 x 2 | 0 ]
     LD1     LD2 | 
                 | 
1  0.829 -0.0241 | 
2  1.53  -2.16   | 
3 -2.20   0.932  | 
4 -2.81  -2.84   | 
> 
> # recover centroid coordinates and measurement discriminant coefficients
> get_rows(iris_lda, elements = "active")
                 LD1        LD2
setosa      7.607600 -0.2151330
versicolor -1.825049  0.7278996
virginica  -5.782550 -0.5127666
> head(get_rows(iris_lda, elements = "score"))
          LD1        LD2
[1,] 8.061800 -0.3004206
[2,] 7.128688  0.7866604
[3,] 7.489828  0.2653845
[4,] 6.813201  0.6706311
[5,] 8.132309 -0.5144625
[6,] 7.701947 -1.4617210
> get_cols(iris_lda)
                    LD1         LD2
Sepal.Length  0.8293776 -0.02410215
Sepal.Width   1.5344731 -2.16452123
Petal.Length -2.2012117  0.93192121
Petal.Width  -2.8104603 -2.83918785
> 
> # augment ordination with centroid and measurement names
> augment_ord(iris_lda)
# A tbl_ord of class 'lda_ord': (153 x 2) x (4 x 2)'
# 2 coordinates: LD1 and LD2
# 
# Rows (principal): [ 153 x 2 | 5 ]
    LD1    LD2 |   name        prior counts grouping 
               |   <chr>       <dbl>  <int> <chr>    
1  7.61 -0.215 | 1 setosa      0.333     50 setosa   
2 -1.83  0.728 | 2 versicolor  0.333     50 versicol…
3 -5.78 -0.513 | 3 virginica   0.333     50 virginica
4  8.06 -0.300 | 4 <NA>       NA         NA setosa   
5  7.13  0.787 | 5 <NA>       NA         NA setosa   
# ℹ 148 more rows
# ℹ 1 more variable: .element <chr>
# 
# Columns (standard): [ 4 x 2 | 2 ]
     LD1     LD2 |   name         .element
                 |   <chr>        <chr>   
1  0.829 -0.0241 | 1 Sepal.Length active  
2  1.53  -2.16   | 2 Sepal.Width  active  
3 -2.20   0.932  | 3 Petal.Length active  
4 -2.81  -2.84   | 4 Petal.Width  active  
> 
> 
> 
> cleanEx()
> nameEx("methods-lm")
> ### * methods-lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods-lm
> ### Title: Functionality for linear model objects
> ### Aliases: methods-lm as_tbl_ord.lm recover_rows.lm recover_cols.lm
> ###   recover_coord.lm recover_aug_rows.lm recover_aug_cols.lm
> ###   recover_aug_coord.lm recover_aug_rows.glm recover_rows.mlm
> ###   recover_cols.mlm recover_coord.mlm recover_aug_rows.mlm
> ###   recover_aug_cols.mlm recover_aug_coord.mlm
> 
> ### ** Examples
> 
> # Motor Trend design and performance data
> head(mtcars)
                   mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
> # regression analysis of performance measures on design specifications
> mtcars_centered <- scale(mtcars, scale = FALSE)
> mtcars_centered %>%
+   as.data.frame() %>%
+   lm(formula = mpg ~ wt + cyl) %>%
+   print() -> mtcars_lm

Call:
lm(formula = mpg ~ wt + cyl, data = .)

Coefficients:
(Intercept)           wt          cyl  
  6.721e-16   -3.191e+00   -1.508e+00  

> 
> # wrap as a 'tbl_ord' object
> (mtcars_lm_ord <- as_tbl_ord(mtcars_lm))
# A tbl_ord of class 'lm': (32 x 3) x (1 x 3)'
# 3 coordinates: (Intercept), wt, cyl
# 
# Rows: [ 32 x 3 | 0 ]
  `(Intercept)`       wt    cyl | 
                                | 
1             1 -0.597   -0.188 | 
2             1 -0.342   -0.188 | 
3             1 -0.897   -2.19  | 
4             1 -0.00225 -0.188 | 
5             1  0.223    1.81  | 

# 
# Columns: [ 1 x 3 | 0 ]
  `(Intercept)`    wt   cyl | 
                            | 
1      6.72e-16 -3.19 -1.51 | 
> # augment everything with names, predictors with observation stats
> augment_ord(mtcars_lm_ord)
# A tbl_ord of class 'lm': (32 x 3) x (1 x 3)'
# 3 coordinates: (Intercept), wt, cyl
# 
# Rows: [ 32 x 3 | 7 ]
  `(Intercept)`       wt    cyl |   name      hat sigma  cooksd wt.res
                                |   <chr>   <dbl> <dbl>   <dbl>  <dbl>
1             1 -0.597   -0.188 | 1 Mazda… 0.0548  2.60 5.08e-3 -1.28 
2             1 -0.342   -0.188 | 2 Mazda… 0.0376  2.61 4.44e-4 -0.465
3             1 -0.897   -2.19  | 3 Datsu… 0.0798  2.52 5.68e-2 -3.45 
4             1 -0.00225 -0.188 | 4 Horne… 0.0321  2.61 1.80e-3  1.02 
5             1  0.223    1.81  | 5 Horne… 0.0912  2.58 2.35e-2  2.05 
# ℹ 27 more rows
# ℹ 2 more variables: .fit <dbl>,
#   .se.fit <dbl>
# 
# Columns: [ 1 x 3 | 1 ]
  `(Intercept)`    wt   cyl |   name 
                            |   <chr>
1      6.72e-16 -3.19 -1.51 | 1 mpg  
> # calculate influences as the squares of weighted residuals
> mutate_rows(augment_ord(mtcars_lm_ord), influence = wt.res^2)
# A tbl_ord of class 'lm': (32 x 3) x (1 x 3)'
# 3 coordinates: (Intercept), wt, cyl
# 
# Rows: [ 32 x 3 | 8 ]
  `(Intercept)`       wt    cyl |   name      hat sigma  cooksd wt.res
                                |   <chr>   <dbl> <dbl>   <dbl>  <dbl>
1             1 -0.597   -0.188 | 1 Mazda… 0.0548  2.60 5.08e-3 -1.28 
2             1 -0.342   -0.188 | 2 Mazda… 0.0376  2.61 4.44e-4 -0.465
3             1 -0.897   -2.19  | 3 Datsu… 0.0798  2.52 5.68e-2 -3.45 
4             1 -0.00225 -0.188 | 4 Horne… 0.0321  2.61 1.80e-3  1.02 
5             1  0.223    1.81  | 5 Horne… 0.0912  2.58 2.35e-2  2.05 
# ℹ 27 more rows
# ℹ 3 more variables: .fit <dbl>,
#   .se.fit <dbl>, influence <dbl>
# 
# Columns: [ 1 x 3 | 1 ]
  `(Intercept)`    wt   cyl |   name 
                            |   <chr>
1      6.72e-16 -3.19 -1.51 | 1 mpg  
> 
> # regression biplot with performance isolines
> mtcars_lm_ord %>%
+   augment_ord() %>%
+   mutate_cols(center = attr(mtcars_centered, "scaled:center")[name]) %>%
+   mutate_rows(influence = wt.res^2) %T>% print() %>%
+   ggbiplot(aes(x = wt, y = cyl, intercept = `(Intercept)`)) +
+   #theme_biplot() +
+   geom_origin(marker = "circle", radius = unit(0.02, "snpc")) +
+   geom_rows_point(aes(color = influence)) +
+   geom_cols_vector() +
+   geom_cols_isoline(aes(center = center), by = .5, hjust = -.1) +
+   ggtitle(
+     "Weight isolines with data colored by importance",
+     "Regressing gas mileage onto weight and number of cylinders"
+   )
# A tbl_ord of class 'lm': (32 x 3) x (1 x 3)'
# 3 coordinates: (Intercept), wt, cyl
# 
# Rows: [ 32 x 3 | 8 ]
  `(Intercept)`       wt    cyl |   name      hat sigma  cooksd wt.res
                                |   <chr>   <dbl> <dbl>   <dbl>  <dbl>
1             1 -0.597   -0.188 | 1 Mazda… 0.0548  2.60 5.08e-3 -1.28 
2             1 -0.342   -0.188 | 2 Mazda… 0.0376  2.61 4.44e-4 -0.465
3             1 -0.897   -2.19  | 3 Datsu… 0.0798  2.52 5.68e-2 -3.45 
4             1 -0.00225 -0.188 | 4 Horne… 0.0321  2.61 1.80e-3  1.02 
5             1  0.223    1.81  | 5 Horne… 0.0912  2.58 2.35e-2  2.05 
# ℹ 27 more rows
# ℹ 3 more variables: .fit <dbl>,
#   .se.fit <dbl>, influence <dbl>
# 
# Columns: [ 1 x 3 | 2 ]
  `(Intercept)`    wt   cyl |   name  center
                            |   <chr>  <dbl>
1      6.72e-16 -3.19 -1.51 | 1 mpg     20.1
> 
> 
> 
> cleanEx()
> nameEx("methods-lra")
> ### * methods-lra
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods-lra
> ### Title: Functionality for log-ratio analysis ('lra') objects
> ### Aliases: methods-lra as_tbl_ord.lra recover_rows.lra recover_cols.lra
> ###   recover_inertia.lra recover_coord.lra recover_conference.lra
> ###   recover_aug_rows.lra recover_aug_cols.lra recover_aug_coord.lra
> 
> ### ** Examples
> 
> # data frame of violent crime arrests in the United States
> class(USArrests)
[1] "data.frame"
> head(USArrests)
           Murder Assault UrbanPop Rape
Alabama      13.2     236       58 21.2
Alaska       10.0     263       48 44.5
Arizona       8.1     294       80 31.0
Arkansas      8.8     190       50 19.5
California    9.0     276       91 40.6
Colorado      7.9     204       78 38.7
> # get state abbreviation data
> state <- data.frame(
+   name = state.name,
+   abb = state.abb
+ )
> 
> # compute (non-compositional, unweighted) log-ratio analysis
> USArrests %>%
+   subset(select = -UrbanPop) %>%
+   lra() %>%
+   as_tbl_ord() %>%
+   print() -> arrests_lra
# A tbl_ord of class 'lra': (50 x 2) x (3 x 2)'
# 2 coordinates: LRSV1 and LRSV2
# 
# Rows (standard): [ 50 x 2 | 0 ]
   LRSV1  LRSV2 | 
                | 
1 -0.680  0.930 | 
2  0.930 -0.625 | 
3 -0.330 -1.31  | 
4 -0.351  0.277 | 
5  0.552 -1.00  | 

# 
# Columns (standard): [ 3 x 2 | 0 ]
   LRSV1  LRSV2 | 
                | 
1  0.283  4.96  | 
2 -0.371 -0.181 | 
3  2.88  -0.366 | 
> 
> # augment log-ratio profiles with names and join state abbreviations
> arrests_lra %>%
+   augment_ord() %>%
+   left_join_rows(state, by = "name") %>%
+   print() -> arrests_lra
# A tbl_ord of class 'lra': (50 x 2) x (3 x 2)'
# 2 coordinates: LRSV1 and LRSV2
# 
# Rows (standard): [ 50 x 2 | 3 ]
   LRSV1  LRSV2 |   name       weight abb  
                |   <chr>       <dbl> <chr>
1 -0.680  0.930 | 1 Alabama    0.0271 AL   
2  0.930 -0.625 | 2 Alaska     0.0318 AK   
3 -0.330 -1.31  | 3 Arizona    0.0333 AZ   
4 -0.351  0.277 | 4 Arkansas   0.0219 AR   
5  0.552 -1.00  | 5 California 0.0326 CA   
# ℹ 45 more rows
# 
# Columns (standard): [ 3 x 2 | 2 ]
   LRSV1  LRSV2 |   name    weight
                |   <chr>    <dbl>
1  0.283  4.96  | 1 Murder  0.0390
2 -0.371 -0.181 | 2 Assault 0.855 
3  2.88  -0.366 | 3 Rape    0.106 
> 
> # recover state and arrest profiles
> head(get_rows(arrests_lra))
                LRSV1      LRSV2
Alabama    -0.6800120  0.9296011
Alaska      0.9299899 -0.6245772
Arizona    -0.3298496 -1.3115817
Arkansas   -0.3513443  0.2773231
California  0.5516590 -1.0042801
Colorado    1.2291066 -0.6388469
> get_cols(arrests_lra)
            LRSV1      LRSV2
Murder   0.283086  4.9570302
Assault -0.370595 -0.1805698
Rape     2.876702 -0.3660163
> # initially, inertia is conferred on neither factor
> get_conference(arrests_lra)
[1] 0 0
> 
> # row-principal biplot
> arrests_lra %>%
+   confer_inertia("rows") %>%
+   ggbiplot(aes(color = .matrix), sec.axes = "cols", scale.factor = 1/20) +
+   scale_color_manual(values = c("tomato4", "turquoise4")) +
+   theme_bw() +
+   geom_rows_text(aes(label = abb), size = 3, alpha = .75) +
+   geom_cols_polygon(fill = NA, linetype = "dashed") +
+   geom_cols_text(aes(label = name, size = weight), fontface = "bold") +
+   scale_size_area(guide = "none") +
+   ggtitle(
+     "Non-compositional LRA of violent crime arrest rates",
+     "United States, 1973"
+   ) +
+   expand_limits(x = c(-.35)) +
+   guides(color = "none")
> 
> 
> 
> cleanEx()
> nameEx("methods-mca")
> ### * methods-mca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods-mca
> ### Title: Functionality for multiple correspondence analysis ('mca')
> ###   objects
> ### Aliases: methods-mca as_tbl_ord.mca recover_rows.mca recover_cols.mca
> ###   recover_inertia.mca recover_conference.mca recover_coord.mca
> ###   recover_supp_rows.mca recover_aug_rows.mca recover_aug_cols.mca
> ###   recover_aug_coord.mca
> 
> ### ** Examples
> 
> # table of admissions and rejections from UC Berkeley
> class(UCBAdmissions)
[1] "table"
> ucb_admissions <- as.data.frame(UCBAdmissions)
> ucb_admissions <-
+   ucb_admissions[rep(seq(nrow(ucb_admissions)), ucb_admissions$Freq), -4L]
> head(ucb_admissions)
       Admit Gender Dept
1   Admitted   Male    A
1.1 Admitted   Male    A
1.2 Admitted   Male    A
1.3 Admitted   Male    A
1.4 Admitted   Male    A
1.5 Admitted   Male    A
> # perform multiple correspondence analysis
> ucb_admissions %>%
+   MASS::mca() %>%
+   as_tbl_ord() %>%
+   # augment profiles with names, masses, distances, and inertias
+   augment_ord() %>%
+   print() -> admissions_mca
# A tbl_ord of class 'mca': (9052 x 2) x (10 x 2)'
# 2 coordinates: Dim1 and Dim2
# 
# Rows (principal): [ 9052 x 2 | 2 ]
     Dim1     Dim2 |   name  .element
                   |   <chr> <chr>   
1 -0.0100 -0.00261 | 1 1     active  
2 -0.0100 -0.00261 | 2 1.1   active  
3 -0.0100 -0.00261 | 3 1.2   active  
4 -0.0100 -0.00261 | 4 1.3   active  
5 -0.0100 -0.00261 | 5 1.4   active  
# ℹ 9,047 more rows
# 
# Columns (standard): [ 10 x 2 | 4 ]
       Dim1      Dim2 |    name        factor level .element
                      |    <chr>       <chr>  <chr> <chr>   
 1 -0.00533 -0.00483  |  1 Admit.Admi… Admit  Admi… active  
 2  0.00338  0.00306  |  2 Admit.Reje… Admit  Reje… active  
 3 -0.00397  0.00266  |  3 Gender.Male Gender Male  active  
 4  0.00582 -0.00390  |  4 Gender.Fem… Gender Fema… active  
 5 -0.00748 -0.000829 |  5 Dept.A      Dept   A     active  
 6 -0.00838  0.00295  |  6 Dept.B      Dept   B     active  
 7  0.00395 -0.00851  |  7 Dept.C      Dept   C     active  
 8  0.00160 -0.000439 |  8 Dept.D      Dept   D     active  
 9  0.00561 -0.00450  |  9 Dept.E      Dept   E     active  
10  0.00519  0.0138   | 10 Dept.F      Dept   F     active  
> 
> # recover row and column coordinates and row weights
> head(get_rows(admissions_mca, elements = "score"))
            Dim1         Dim2
1   -0.005592325 -0.001001186
1.1 -0.005592325 -0.001001186
1.2 -0.005592325 -0.001001186
1.3 -0.005592325 -0.001001186
1.4 -0.005592325 -0.001001186
1.5 -0.005592325 -0.001001186
> get_cols(admissions_mca)
                       Dim1          Dim2
Admit.Admitted -0.005329295 -0.0048307823
Admit.Rejected  0.003375284  0.0030595536
Gender.Male    -0.003971450  0.0026563610
Gender.Female   0.005824072 -0.0038955136
Dept.A         -0.007476230 -0.0008291371
Dept.B         -0.008381159  0.0029516575
Dept.C          0.003949742 -0.0085082718
Dept.D          0.001600698 -0.0004388113
Dept.E          0.005610973 -0.0045007472
Dept.F          0.005193103  0.0137723160
> head(get_rows(admissions_mca))
            Dim1         Dim2
1   -0.009997779 -0.002609712
1.1 -0.009997779 -0.002609712
1.2 -0.009997779 -0.002609712
1.3 -0.009997779 -0.002609712
1.4 -0.009997779 -0.002609712
1.5 -0.009997779 -0.002609712
> 
> # column-standard biplot of factor levels
> admissions_mca %>%
+   ggbiplot() +
+   theme_bw() + theme_biplot() +
+   geom_origin() +
+   #geom_rows_point(stat = "unique") +
+   geom_cols_point(aes(color = factor, shape = factor)) +
+   geom_cols_text_repel(aes(label = level, color = factor),
+                        show.legend = FALSE) +
+   scale_color_brewer(palette = "Dark2") +
+   scale_size_area(guide = "none") +
+   labs(color = "Factor level", shape = "Factor level")
> 
> 
> 
> cleanEx()
> nameEx("methods-prcomp")
> ### * methods-prcomp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods-prcomp
> ### Title: Functionality for principal components analysis ('prcomp')
> ###   objects
> ### Aliases: methods-prcomp as_tbl_ord.prcomp recover_rows.prcomp
> ###   recover_cols.prcomp recover_inertia.prcomp recover_coord.prcomp
> ###   recover_conference.prcomp recover_aug_rows.prcomp
> ###   recover_aug_cols.prcomp recover_aug_coord.prcomp
> 
> ### ** Examples
> 
> # data frame of Anderson iris species measurements
> class(iris)
[1] "data.frame"
> head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> 
> # compute scaled row-principal components of scaled measurements
> iris[, -5] %>%
+   prcomp(scale = TRUE) %>%
+   as_tbl_ord() %>%
+   print() -> iris_pca
# A tbl_ord of class 'prcomp': (150 x 4) x (4 x 4)'
# 4 coordinates: PC1, PC2, ..., PC4
# 
# Rows (principal): [ 150 x 4 | 0 ]
    PC1    PC2     PC3 ... | 
                           | 
1 -2.26 -0.478  0.127      | 
2 -2.07  0.672  0.234  ... | 
3 -2.36  0.341 -0.0441     | 
4 -2.29  0.595 -0.0910     | 
5 -2.38 -0.645 -0.0157     | 

# 
# Columns (standard): [ 4 x 4 | 0 ]
     PC1     PC2    PC3 ... | 
                            | 
1  0.521 -0.377   0.720     | 
2 -0.269 -0.923  -0.244 ... | 
3  0.580 -0.0245 -0.142     | 
4  0.565 -0.0669 -0.634     | 
> 
> # recover observation principal coordinates and measurement standard coordinates
> head(get_rows(iris_pca))
           PC1        PC2         PC3          PC4
[1,] -2.257141 -0.4784238  0.12727962  0.024087508
[2,] -2.074013  0.6718827  0.23382552  0.102662845
[3,] -2.356335  0.3407664 -0.04405390  0.028282305
[4,] -2.291707  0.5953999 -0.09098530 -0.065735340
[5,] -2.381863 -0.6446757 -0.01568565 -0.035802870
[6,] -2.068701 -1.4842053 -0.02687825  0.006586116
> get_cols(iris_pca)
                    PC1         PC2        PC3        PC4
Sepal.Length  0.5210659 -0.37741762  0.7195664  0.2612863
Sepal.Width  -0.2693474 -0.92329566 -0.2443818 -0.1235096
Petal.Length  0.5804131 -0.02449161 -0.1421264 -0.8014492
Petal.Width   0.5648565 -0.06694199 -0.6342727  0.5235971
> 
> # augment measurements with names and scaling parameters
> (iris_pca <- augment_ord(iris_pca))
# A tbl_ord of class 'prcomp': (150 x 4) x (4 x 4)'
# 4 coordinates: PC1, PC2, ..., PC4
# 
# Rows (principal): [ 150 x 4 | 0 ]
    PC1    PC2     PC3 ... | 
                           | 
1 -2.26 -0.478  0.127      | 
2 -2.07  0.672  0.234  ... | 
3 -2.36  0.341 -0.0441     | 
4 -2.29  0.595 -0.0910     | 
5 -2.38 -0.645 -0.0157     | 

# 
# Columns (standard): [ 4 x 4 | 3 ]
     PC1     PC2    PC3 ... |   name         center scale
                            |   <chr>         <dbl> <dbl>
1  0.521 -0.377   0.720     | 1 Sepal.Length   5.84 0.828
2 -0.269 -0.923  -0.244 ... | 2 Sepal.Width    3.06 0.436
3  0.580 -0.0245 -0.142     | 3 Petal.Length   3.76 1.77 
4  0.565 -0.0669 -0.634     | 4 Petal.Width    1.20 0.762
> 
> 
> 
> cleanEx()
> nameEx("methods-princomp")
> ### * methods-princomp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods-princomp
> ### Title: Functionality for principal components analysis ('princomp')
> ###   objects
> ### Aliases: methods-princomp as_tbl_ord.princomp recover_rows.princomp
> ###   recover_cols.princomp recover_inertia.princomp recover_coord.princomp
> ###   recover_conference.princomp recover_aug_rows.princomp
> ###   recover_aug_cols.princomp recover_aug_coord.princomp
> 
> ### ** Examples
> 
> # data frame of Anderson iris species measurements
> class(iris)
[1] "data.frame"
> head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> 
> # compute unscaled row-principal components of scaled measurements
> iris[, -5] %>%
+   princomp() %>%
+   as_tbl_ord() %>%
+   print() -> iris_pca
# A tbl_ord of class 'princomp': (150 x 4) x (4 x 4)'
# 4 coordinates: Comp.1, Comp.2, ..., Comp.4
# 
# Rows (principal): [ 150 x 4 | 0 ]
  Comp.1 Comp.2  Comp.3 ... | 
                            | 
1  -2.68  0.319  0.0279     | 
2  -2.71 -0.177  0.210  ... | 
3  -2.89 -0.145 -0.0179     | 
4  -2.75 -0.318 -0.0316     | 
5  -2.73  0.327 -0.0901     | 

# 
# Columns (standard): [ 4 x 4 | 0 ]
   Comp.1  Comp.2  Comp.3 ... | 
                              | 
1  0.361   0.657   0.582      | 
2 -0.0845  0.730  -0.598  ... | 
3  0.857  -0.173  -0.0762     | 
4  0.358  -0.0755 -0.546      | 
> 
> # recover observation principal coordinates and measurement standard coordinates
> head(get_rows(iris_pca))
        Comp.1     Comp.2      Comp.3       Comp.4
[1,] -2.684126  0.3193972  0.02791483  0.002262437
[2,] -2.714142 -0.1770012  0.21046427  0.099026550
[3,] -2.888991 -0.1449494 -0.01790026  0.019968390
[4,] -2.745343 -0.3182990 -0.03155937 -0.075575817
[5,] -2.728717  0.3267545 -0.09007924 -0.061258593
[6,] -2.280860  0.7413304 -0.16867766 -0.024200858
> get_cols(iris_pca)
                  Comp.1      Comp.2      Comp.3     Comp.4
Sepal.Length  0.36138659  0.65658877  0.58202985  0.3154872
Sepal.Width  -0.08452251  0.73016143 -0.59791083 -0.3197231
Petal.Length  0.85667061 -0.17337266 -0.07623608 -0.4798390
Petal.Width   0.35828920 -0.07548102 -0.54583143  0.7536574
> 
> # augment measurement coordinates with names and scaling parameters
> (iris_pca <- augment_ord(iris_pca))
# A tbl_ord of class 'princomp': (150 x 4) x (4 x 4)'
# 4 coordinates: Comp.1, Comp.2, ..., Comp.4
# 
# Rows (principal): [ 150 x 4 | 0 ]
  Comp.1 Comp.2  Comp.3 ... | 
                            | 
1  -2.68  0.319  0.0279     | 
2  -2.71 -0.177  0.210  ... | 
3  -2.89 -0.145 -0.0179     | 
4  -2.75 -0.318 -0.0316     | 
5  -2.73  0.327 -0.0901     | 

# 
# Columns (standard): [ 4 x 4 | 3 ]
   Comp.1  Comp.2  Comp.3 ... |   name         center scale
                              |   <chr>         <dbl> <dbl>
1  0.361   0.657   0.582      | 1 Sepal.Length   5.84     1
2 -0.0845  0.730  -0.598  ... | 2 Sepal.Width    3.06     1
3  0.857  -0.173  -0.0762     | 3 Petal.Length   3.76     1
4  0.358  -0.0755 -0.546      | 4 Petal.Width    1.20     1
> 
> 
> 
> cleanEx()
> nameEx("methods-svd")
> ### * methods-svd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: methods-svd
> ### Title: Functionality for singular value decompositions
> ### Aliases: methods-svd as_tbl_ord.svd_ord recover_rows.svd_ord
> ###   recover_cols.svd_ord recover_inertia.svd_ord recover_coord.svd_ord
> ###   recover_conference.svd_ord recover_aug_rows.svd_ord
> ###   recover_aug_cols.svd_ord recover_aug_coord.svd_ord
> 
> ### ** Examples
> 
> # matrix of U.S. personal expenditure data
> class(USPersonalExpenditure)
[1] "matrix" "array" 
> print(USPersonalExpenditure)
                      1940   1945  1950 1955  1960
Food and Tobacco    22.200 44.500 59.60 73.2 86.80
Household Operation 10.500 15.500 29.00 36.5 46.20
Medical and Health   3.530  5.760  9.71 14.0 21.10
Personal Care        1.040  1.980  2.45  3.4  5.40
Private Education    0.341  0.974  1.80  2.6  3.64
> # singular value decomposition into row and column coordinates
> USPersonalExpenditure %>%
+   svd_ord() %>%
+   as_tbl_ord() %>%
+   print() -> spend_svd
# A tbl_ord of class 'svd_ord': (5 x 5) x (5 x 5)'
# 5 coordinates: SV1, SV2, ..., SV5
# 
# Rows (standard): [ 5 x 5 | 0 ]
      SV1     SV2     SV3 ... | 
                              | 
1 -0.881   0.456  -0.122      | 
2 -0.436  -0.677   0.583  ... | 
3 -0.176  -0.562  -0.734      | 
4 -0.0455 -0.0929 -0.314      | 
5 -0.0311 -0.0989 -0.0892     | 
# 
# Columns (standard): [ 5 x 5 | 0 ]
     SV1     SV2    SV3 ... | 
                            | 
1 -0.159  0.113   0.182     | 
2 -0.302  0.792  -0.527 ... | 
3 -0.429  0.211   0.620     | 
4 -0.532  0.0266  0.302     | 
5 -0.645 -0.561  -0.461     | 
> 
> # recover matrices of row and column coordinates
> get_rows(spend_svd)
                            SV1         SV2         SV3         SV4         SV5
Food and Tobacco    -0.88086766  0.45563080 -0.12237718  0.02450591 -0.02993361
Household Operation -0.43580483 -0.67662102  0.58341818 -0.07630369  0.07784028
Medical and Health  -0.17637018 -0.56230756 -0.73372346  0.04111351 -0.33565360
Personal Care       -0.04553400 -0.09285599 -0.31360568 -0.49361448  0.80454996
Private Education   -0.03108899 -0.09885616 -0.08915387  0.86500383  0.48278452
> get_cols(spend_svd)
            SV1         SV2        SV3         SV4         SV5
1940 -0.1589586  0.11313761  0.1824780 -0.89728506 -0.35144462
1945 -0.3016855  0.79223017 -0.5274149  0.02654943  0.04985844
1950 -0.4293572  0.21081041  0.6202698 -0.01464040  0.62150007
1955 -0.5323309  0.02659741  0.3024320  0.42107353 -0.66869157
1960 -0.6449761 -0.56073415 -0.4607988 -0.12906349  0.20146975
> 
> # augment with row and column names
> augment_ord(spend_svd)
# A tbl_ord of class 'svd_ord': (5 x 5) x (5 x 5)'
# 5 coordinates: SV1, SV2, ..., SV5
# 
# Rows (standard): [ 5 x 5 | 1 ]
      SV1     SV2     SV3 ... |   name               
                              |   <chr>              
1 -0.881   0.456  -0.122      | 1 Food and Tobacco   
2 -0.436  -0.677   0.583  ... | 2 Household Operation
3 -0.176  -0.562  -0.734      | 3 Medical and Health 
4 -0.0455 -0.0929 -0.314      | 4 Personal Care      
5 -0.0311 -0.0989 -0.0892     | 5 Private Education  
# 
# Columns (standard): [ 5 x 5 | 1 ]
     SV1     SV2    SV3 ... |   name 
                            |   <chr>
1 -0.159  0.113   0.182     | 1 1940 
2 -0.302  0.792  -0.527 ... | 2 1945 
3 -0.429  0.211   0.620     | 3 1950 
4 -0.532  0.0266  0.302     | 4 1955 
5 -0.645 -0.561  -0.461     | 5 1960 
> # initial matrix decomposition confers no inertia to coordinates
> get_conference(spend_svd)
[1] 0 0
> 
> 
> 
> cleanEx()
> nameEx("negation")
> ### * negation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: negation
> ### Title: Negation of ordination axes
> ### Aliases: negation get_negation revert_negation negate_ord
> ###   negate_to_first_orthant
> 
> ### ** Examples
> 
> (pca <- ordinate(iris, cols = 1:4, prcomp))
# A tbl_ord of class 'prcomp': (150 x 4) x (4 x 4)'
# 4 coordinates: PC1, PC2, ..., PC4
# 
# Rows (principal): [ 150 x 4 | 1 ]
    PC1    PC2     PC3 ... |   Species
                           |   <fct>  
1 -2.68 -0.319  0.0279     | 1 setosa 
2 -2.71  0.177  0.210  ... | 2 setosa 
3 -2.89  0.145 -0.0179     | 3 setosa 
4 -2.75  0.318 -0.0316     | 4 setosa 
5 -2.73 -0.327 -0.0901     | 5 setosa 
# ℹ 145 more rows
# 
# Columns (standard): [ 4 x 4 | 2 ]
      PC1     PC2     PC3 ... |   name         center
                              |   <chr>         <dbl>
1  0.361  -0.657   0.582      | 1 Sepal.Length   5.84
2 -0.0845 -0.730  -0.598  ... | 2 Sepal.Width    3.06
3  0.857   0.173  -0.0762     | 3 Petal.Length   3.76
4  0.358   0.0755 -0.546      | 4 Petal.Width    1.20
> ggbiplot(pca) + geom_rows_point() + geom_cols_vector()
> 
> # manually negate second coordinate
> (pca_neg <- negate_ord(pca, 2))
# A tbl_ord of class 'prcomp': (150 x 4) x (4 x 4)'
# 4 coordinates: PC1, PC2, ..., PC4
# 
# Rows (principal): [ 150 x 4 | 1 ]
    PC1    PC2     PC3 ... |   Species
                           |   <fct>  
1 -2.68  0.319  0.0279     | 1 setosa 
2 -2.71 -0.177  0.210  ... | 2 setosa 
3 -2.89 -0.145 -0.0179     | 3 setosa 
4 -2.75 -0.318 -0.0316     | 4 setosa 
5 -2.73  0.327 -0.0901     | 5 setosa 
# ℹ 145 more rows
# 
# Columns (standard): [ 4 x 4 | 2 ]
      PC1     PC2     PC3 ... |   name         center
                              |   <chr>         <dbl>
1  0.361   0.657   0.582      | 1 Sepal.Length   5.84
2 -0.0845  0.730  -0.598  ... | 2 Sepal.Width    3.06
3  0.857  -0.173  -0.0762     | 3 Petal.Length   3.76
4  0.358  -0.0755 -0.546      | 4 Petal.Width    1.20
> ggbiplot(pca_neg) + geom_rows_point() + geom_cols_vector()
> 
> # NB: 'prcomp' method takes precedence; negations are part of the wrapper
> biplot(pca)
> biplot(pca_neg)
> 
> # negate to the first orthant
> (pca_orth <- negate_to_first_orthant(pca, "v"))
# A tbl_ord of class 'prcomp': (150 x 4) x (4 x 4)'
# 4 coordinates: PC1, PC2, ..., PC4
# 
# Rows (principal): [ 150 x 4 | 1 ]
    PC1    PC2     PC3 ... |   Species
                           |   <fct>  
1 -2.68  0.319 -0.0279     | 1 setosa 
2 -2.71 -0.177 -0.210  ... | 2 setosa 
3 -2.89 -0.145  0.0179     | 3 setosa 
4 -2.75 -0.318  0.0316     | 4 setosa 
5 -2.73  0.327  0.0901     | 5 setosa 
# ℹ 145 more rows
# 
# Columns (standard): [ 4 x 4 | 2 ]
      PC1     PC2     PC3 ... |   name         center
                              |   <chr>         <dbl>
1  0.361   0.657  -0.582      | 1 Sepal.Length   5.84
2 -0.0845  0.730   0.598  ... | 2 Sepal.Width    3.06
3  0.857  -0.173   0.0762     | 3 Petal.Length   3.76
4  0.358  -0.0755  0.546      | 4 Petal.Width    1.20
> get_negation(pca_orth)
PC1 PC2 PC3 PC4 
  1  -1  -1   1 
> 
> 
> 
> cleanEx()
> nameEx("ordinate")
> ### * ordinate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ordinate
> ### Title: Fit an ordination model to a data object
> ### Aliases: ordinate ordinate.default ordinate.array ordinate.table
> ###   ordinate.data.frame ordinate.dist
> 
> ### ** Examples
> 
> # LRA of arrest data
> ordinate(USArrests, cols = c(Murder, Rape, Assault), lra)
# A tbl_ord of class 'lra': (50 x 2) x (3 x 2)'
# 2 coordinates: LRSV1 and LRSV2
# 
# Rows (standard): [ 50 x 2 | 3 ]
   LRSV1  LRSV2 |   name       weight UrbanPop
                |   <chr>       <dbl>    <int>
1 -0.680  0.930 | 1 Alabama    0.0271       58
2  0.930 -0.625 | 2 Alaska     0.0318       48
3 -0.330 -1.31  | 3 Arizona    0.0333       80
4 -0.351  0.277 | 4 Arkansas   0.0219       50
5  0.552 -1.00  | 5 California 0.0326       91
# ℹ 45 more rows
# 
# Columns (standard): [ 3 x 2 | 2 ]
   LRSV1  LRSV2 |   name    weight
                |   <chr>    <dbl>
1  0.283  4.96  | 1 Murder  0.0390
2  2.88  -0.366 | 2 Rape    0.106 
3 -0.371 -0.181 | 3 Assault 0.855 
> 
> # CMDS of inter-city distance data
> ordinate(UScitiesD, cmdscale_ord, k = 3L)
# A tbl_ord of class 'cmds_ord': (10 x 3) x (10 x 3)'
# 3 coordinates: PCo1, PCo2, PCo3
# 
# Rows (symmetric): [ 10 x 3 | 1 ]
     PCo1   PCo2   PCo3 |    name         
                        |    <chr>        
 1  -719.  143.  -35.1  |  1 Atlanta      
 2  -382. -341.  -29.6  |  2 Chicago      
 3   482.  -25.3 -53.4  |  3 Denver       
 4  -161.  573.   -1.45 |  4 Houston      
 5  1204.  390.   18.6  |  5 LosAngeles   
 6 -1134.  582.   32.3  |  6 Miami        
 7 -1072. -519.   34.3  |  7 NewYork      
 8  1421.  113.    7.75 |  8 SanFrancisco 
 9  1342. -580.   23.7  |  9 Seattle      
10  -980. -335.    2.90 | 10 Washington.DC
# 
# Columns (symmetric): [ 10 x 3 | 1 ]
     PCo1   PCo2   PCo3 |    name         
                        |    <chr>        
 1  -719.  143.  -35.1  |  1 Atlanta      
 2  -382. -341.  -29.6  |  2 Chicago      
 3   482.  -25.3 -53.4  |  3 Denver       
 4  -161.  573.   -1.45 |  4 Houston      
 5  1204.  390.   18.6  |  5 LosAngeles   
 6 -1134.  582.   32.3  |  6 Miami        
 7 -1072. -519.   34.3  |  7 NewYork      
 8  1421.  113.    7.75 |  8 SanFrancisco 
 9  1342. -580.   23.7  |  9 Seattle      
10  -980. -335.    2.90 | 10 Washington.DC
> 
> # PCA of iris data
> ordinate(iris, princomp, cols = -Species, augment = c(Sepal.Width, Species))
# A tbl_ord of class 'princomp': (150 x 4) x (4 x 4)'
# 4 coordinates: Comp.1, Comp.2, ..., Comp.4
# 
# Rows (principal): [ 150 x 4 | 2 ]
  Comp.1 Comp.2  Comp.3 ... |   Sepal.Width Species
                            |         <dbl> <fct>  
1  -2.68  0.319  0.0279     | 1         3.5 setosa 
2  -2.71 -0.177  0.210  ... | 2         3   setosa 
3  -2.89 -0.145 -0.0179     | 3         3.2 setosa 
4  -2.75 -0.318 -0.0316     | 4         3.1 setosa 
5  -2.73  0.327 -0.0901     | 5         3.6 setosa 
# ℹ 145 more rows
# 
# Columns (standard): [ 4 x 4 | 3 ]
   Comp.1  Comp.2  Comp.3 ... |   name         center scale
                              |   <chr>         <dbl> <dbl>
1  0.361   0.657   0.582      | 1 Sepal.Length   5.84     1
2 -0.0845  0.730  -0.598  ... | 2 Sepal.Width    3.06     1
3  0.857  -0.173  -0.0762     | 3 Petal.Length   3.76     1
4  0.358  -0.0755 -0.546      | 4 Petal.Width    1.20     1
> ordinate(iris, cols = 1:4, ~ prcomp(., center = TRUE, scale. = TRUE))
# A tbl_ord of class 'prcomp': (150 x 4) x (4 x 4)'
# 4 coordinates: PC1, PC2, ..., PC4
# 
# Rows (principal): [ 150 x 4 | 1 ]
    PC1    PC2     PC3 ... |   Species
                           |   <fct>  
1 -2.26 -0.478  0.127      | 1 setosa 
2 -2.07  0.672  0.234  ... | 2 setosa 
3 -2.36  0.341 -0.0441     | 3 setosa 
4 -2.29  0.595 -0.0910     | 4 setosa 
5 -2.38 -0.645 -0.0157     | 5 setosa 
# ℹ 145 more rows
# 
# Columns (standard): [ 4 x 4 | 3 ]
     PC1     PC2    PC3 ... |   name         center scale
                            |   <chr>         <dbl> <dbl>
1  0.521 -0.377   0.720     | 1 Sepal.Length   5.84 0.828
2 -0.269 -0.923  -0.244 ... | 2 Sepal.Width    3.06 0.436
3  0.580 -0.0245 -0.142     | 3 Petal.Length   3.76 1.77 
4  0.565 -0.0669 -0.634     | 4 Petal.Width    1.20 0.762
> 
> # CA of hair & eye color data
> haireye <- as.data.frame(rowSums(HairEyeColor, dims = 2L))
> ordinate(haireye, MASS::corresp, cols = everything())
# A tbl_ord of class 'correspondence': (4 x 1) x (4 x 1)'
# 1 coordinate: Can1
# 
# Rows (standard): [ 4 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -1.10  | 1 Black
2 -0.324 | 2 Brown
3 -0.283 | 3 Red  
4  1.83  | 4 Blond
# 
# Columns (standard): [ 4 x 1 | 1 ]
    Can1 |   name 
         |   <chr>
1 -1.08  | 1 Brown
2  1.20  | 2 Blue 
3 -0.465 | 3 Hazel
4  0.354 | 4 Green
> 
> # FA of Swiss social data
> ordinate(swiss, model = factanal, factors = 2L, scores = "Bartlett")
# A tbl_ord of class 'factanal': (53 x 2) x (6 x 2)'
# 2 coordinates: Factor1 and Factor2
# 
# Rows (symmetric): [ 53 x 2 | 2 ]
  Factor1 Factor2 |   name        .element
                  |   <chr>       <chr>   
1  -0.652  0.393  | 1 Fertility   active  
2  -0.631  0.333  | 2 Agriculture active  
3   0.685 -0.510  | 3 Examination active  
4   0.997 -0.0313 | 4 Education   active  
5  -0.124  0.961  | 5 Catholic    active  
# ℹ 48 more rows
# 
# Columns (symmetric): [ 6 x 2 | 3 ]
  Factor1 Factor2 |   name           uniqueness .element
                  |   <chr>               <dbl> <chr>   
1 -0.652   0.393  | 1 Fertility          0.420  active  
2 -0.631   0.333  | 2 Agriculture        0.492  active  
3  0.685  -0.510  | 3 Examination        0.270  active  
4  0.997  -0.0313 | 4 Education          0.005  active  
5 -0.124   0.961  | 5 Catholic           0.0607 active  
6 -0.0947  0.175  | 6 Infant.Mortal…     0.960  active  
> 
> # LDA of iris data
> ordinate(iris, ~ lda_ord(.[, 1:4], .[, 5], ret.x = TRUE))
# A tbl_ord of class 'lda_ord': (153 x 2) x (4 x 2)'
# 2 coordinates: LD1 and LD2
# 
# Rows (principal): [ 153 x 2 | 4 ]
    LD1    LD2 |   name        prior counts .element
               |   <chr>       <dbl>  <int> <chr>   
1  7.61 -0.215 | 1 setosa      0.333     50 active  
2 -1.83  0.728 | 2 versicolor  0.333     50 active  
3 -5.78 -0.513 | 3 virginica   0.333     50 active  
4  8.06 -0.300 | 4 <NA>       NA         NA score   
5  7.13  0.787 | 5 <NA>       NA         NA score   
# ℹ 148 more rows
# 
# Columns (standard): [ 4 x 2 | 2 ]
     LD1     LD2 |   name         .element
                 |   <chr>        <chr>   
1  0.829 -0.0241 | 1 Sepal.Length active  
2  1.53  -2.16   | 2 Sepal.Width  active  
3 -2.20   0.932  | 3 Petal.Length active  
4 -2.81  -2.84   | 4 Petal.Width  active  
> 
> # CCA of savings data
> ordinate(
+   LifeCycleSavings[, c("pop15", "pop75")],
+   # second data set must be handled as an additional parameter to `model`
+   y = LifeCycleSavings[, c("sr", "dpi", "ddpi")],
+   model = cancor_ord, scores = TRUE
+ )
# A tbl_ord of class 'cancor_ord': (54 x 2) x (56 x 2)'
# 2 coordinates: CanCor1 and CanCor2
# 
# Rows (standard): [ 54 x 2 | 3 ]
   CanCor1 CanCor2 |   name      center .element
                   |   <chr>      <dbl> <chr>   
1 -0.00911 -0.0362 | 1 pop15      35.1  active  
2  0.0486  -0.260  | 2 pop75       2.29 active  
3  0.0804   0.0577 | 3 Australia  NA    score   
4  0.210   -0.125  | 4 Austria    NA    score   
5  0.207   -0.147  | 5 Belgium    NA    score   
# ℹ 49 more rows
# 
# Columns (standard): [ 56 x 2 | 3 ]
   CanCor1    CanCor2 |   name       center .element
                      |   <chr>       <dbl> <chr>   
1 0.00847   0.0334    | 1 sr           9.67 active  
2 0.000131 -0.0000759 | 2 dpi       1107.   active  
3 0.00417  -0.0123    | 3 ddpi         3.76 active  
4 0.171    -0.0232    | 4 Australia   NA    score   
5 0.0735    0.0475    | 5 Austria     NA    score   
# ℹ 51 more rows
> 
> 
> 
> cleanEx()
> nameEx("plot.tbl_ord")
> ### * plot.tbl_ord
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.tbl_ord
> ### Title: Plot and biplot methods for 'tbl_ord' objects
> ### Aliases: plot.tbl_ord
> 
> ### ** Examples
> 
> # note: behavior depends on installed packages with class-specific methods
> 
> # class 'prcomp'
> iris_pca <- prcomp(iris[, -5L], scale = TRUE)
> iris_pca_ord <- as_tbl_ord(iris_pca)
> plot(iris_pca)
> plot(iris_pca_ord)
> screeplot(iris_pca)
> screeplot(iris_pca_ord)
> biplot(iris_pca)
> biplot(iris_pca_ord)
> 
> # class 'correspondence'
> haireye_ca <- MASS::corresp(rowSums(HairEyeColor, dims = 2L), nf = 2L)
> haireye_ca_ord <- as_tbl_ord(haireye_ca)
> plot(haireye_ca)
> plot(haireye_ca_ord)
> # no `screeplot()` method for class 'correspondence'
> screeplot(haireye_ca_ord)
> biplot(haireye_ca)
> biplot(haireye_ca_ord)
> 
> 
> 
> cleanEx()
> nameEx("qswur_usa")
> ### * qswur_usa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qswur_usa
> ### Title: U.S. university rankings
> ### Aliases: qswur_usa
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # subset QS data to rank variables
> head(qswur_usa)
# A tibble: 6 × 13
   year institution       size  focus res     age status rk_academic rk_employer
  <int> <chr>             <fct> <fct> <fct> <int> <chr>        <int>       <int>
1  2017 MASSACHUSETTS IN… M     CO    VH        5 B                6           4
2  2017 STANFORD UNIVERS… L     FC    VH        5 A                5           5
3  2017 HARVARD UNIVERSI… L     FC    VH        5 B                1           1
4  2017 CALIFORNIA INSTI… S     CO    VH        5 B               23          90
5  2017 UNIVERSITY OF CH… L     FC    VH        5 B               13          47
6  2017 PRINCETON UNIVER… M     CO    VH        5 B               10          32
# ℹ 4 more variables: rk_ratio <int>, rk_citations <int>,
#   rk_intl_faculty <int>, rk_intl_students <int>
> qs_ranks <- subset(
+   qswur_usa,
+   complete.cases(qswur_usa),
+   select = 8:13
+ )
> # calculate Kendall correlation matrix
> qs_cor <- cor(qs_ranks, method = "kendall")
> 
> # calculate eigendecomposition
> qs_eigen <- eigen_ord(qs_cor)
> # view correlations as cosines of biplot vectors
> biplot(x = qs_eigen$vectors, y = qs_eigen$vectors, col = c(NA, "black"))
> 
> 
> 
> cleanEx()
> nameEx("recoverers")
> ### * recoverers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: recoverers
> ### Title: Access factors, coordinates, and metadata from ordination
> ###   objects
> ### Aliases: recoverers recover_rows recover_cols recover_rows.default
> ###   recover_cols.default recover_rows.data.frame recover_cols.data.frame
> ###   get_rows get_cols as.matrix.tbl_ord recover_inertia
> ###   recover_inertia.default recover_coord recover_coord.default
> ###   recover_coord.data.frame get_coord get_inertia dim.tbl_ord
> 
> ### ** Examples
> 
> # example ordination: LRA of U.S. arrests data
> arrests_lra <- ordinate(USArrests, cols = c(Murder, Rape, Assault), lra)
> 
> # extract matrix factors
> as.matrix(arrests_lra, .matrix = "rows")
                     LRSV1        LRSV2
Alabama        -0.68001198  0.929601139
Alaska          0.92998988 -0.624577164
Arizona        -0.32984955 -1.311581695
Arkansas       -0.35134428  0.277323143
California      0.55165901 -1.004280086
Colorado        1.22910659 -0.638846890
Connecticut    -0.43610804 -1.027017532
Delaware       -1.54269183 -1.349322890
Florida        -0.54682514  0.300298438
Georgia         0.15812112  1.916932033
Hawaii          3.51365819  2.150284964
Idaho          -0.05250833 -2.109188891
Illinois       -0.52429773  0.002652531
Indiana         1.22231804  0.881075829
Iowa            1.39095549 -0.632985189
Kansas          0.75715595  0.380674137
Kentucky        0.68864901  2.024832534
Louisiana      -0.69015525  1.238509473
Maine          -0.63716612 -1.499305459
Maryland       -0.63629812 -0.286175559
Massachusetts  -0.22762978 -1.124006923
Michigan        0.41414730  0.171745261
Minnesota       1.45222388 -0.789191960
Mississippi    -1.47068651  1.436924829
Missouri        0.78566710  0.278289912
Montana         0.65946921  0.566956397
Nebraska        0.82281297 -0.284750183
Nevada          1.14994121  0.060475841
New Hampshire   0.88778358 -0.710870888
New Jersey      0.01717089  0.205735676
New Mexico     -0.12336523 -0.223126918
New York       -0.35365080  0.100656157
North Carolina -2.35659680  0.189728037
North Dakota    0.74912231 -2.900272794
Ohio            1.11076020  0.766013515
Oklahoma        0.30637650 -0.053491161
Oregon          1.13217636 -1.312593507
Pennsylvania    0.48983869  0.840580871
Rhode Island   -2.42442178 -1.868251942
South Carolina -0.96800438  0.752042083
South Dakota    0.61067278 -0.091684230
Tennessee       0.55166149  1.334277800
Texas           0.22895595  1.088292623
Utah            1.20949943 -1.771844197
Vermont         1.78310111 -0.254863377
Virginia        0.33180838  0.612645656
Washington      1.07067103 -1.635935144
West Virginia  -0.02043499  1.475198849
Wisconsin       1.43728882  0.033416687
Wyoming        -0.50955934  0.033243165
> as.matrix(arrests_lra, .matrix = "cols")
            LRSV1      LRSV2
Murder   0.283086  4.9570302
Rape     2.876702 -0.3660163
Assault -0.370595 -0.1805698
> # special named functions
> get_rows(arrests_lra)
                     LRSV1        LRSV2
Alabama        -0.68001198  0.929601139
Alaska          0.92998988 -0.624577164
Arizona        -0.32984955 -1.311581695
Arkansas       -0.35134428  0.277323143
California      0.55165901 -1.004280086
Colorado        1.22910659 -0.638846890
Connecticut    -0.43610804 -1.027017532
Delaware       -1.54269183 -1.349322890
Florida        -0.54682514  0.300298438
Georgia         0.15812112  1.916932033
Hawaii          3.51365819  2.150284964
Idaho          -0.05250833 -2.109188891
Illinois       -0.52429773  0.002652531
Indiana         1.22231804  0.881075829
Iowa            1.39095549 -0.632985189
Kansas          0.75715595  0.380674137
Kentucky        0.68864901  2.024832534
Louisiana      -0.69015525  1.238509473
Maine          -0.63716612 -1.499305459
Maryland       -0.63629812 -0.286175559
Massachusetts  -0.22762978 -1.124006923
Michigan        0.41414730  0.171745261
Minnesota       1.45222388 -0.789191960
Mississippi    -1.47068651  1.436924829
Missouri        0.78566710  0.278289912
Montana         0.65946921  0.566956397
Nebraska        0.82281297 -0.284750183
Nevada          1.14994121  0.060475841
New Hampshire   0.88778358 -0.710870888
New Jersey      0.01717089  0.205735676
New Mexico     -0.12336523 -0.223126918
New York       -0.35365080  0.100656157
North Carolina -2.35659680  0.189728037
North Dakota    0.74912231 -2.900272794
Ohio            1.11076020  0.766013515
Oklahoma        0.30637650 -0.053491161
Oregon          1.13217636 -1.312593507
Pennsylvania    0.48983869  0.840580871
Rhode Island   -2.42442178 -1.868251942
South Carolina -0.96800438  0.752042083
South Dakota    0.61067278 -0.091684230
Tennessee       0.55166149  1.334277800
Texas           0.22895595  1.088292623
Utah            1.20949943 -1.771844197
Vermont         1.78310111 -0.254863377
Virginia        0.33180838  0.612645656
Washington      1.07067103 -1.635935144
West Virginia  -0.02043499  1.475198849
Wisconsin       1.43728882  0.033416687
Wyoming        -0.50955934  0.033243165
> get_cols(arrests_lra)
            LRSV1      LRSV2
Murder   0.283086  4.9570302
Rape     2.876702 -0.3660163
Assault -0.370595 -0.1805698
> # get dimensions of underlying matrix factorization (not of original data)
> dim(arrests_lra)
[1] 50  3
> 
> # get names of artificial / latent coordinates
> get_coord(arrests_lra)
[1] "LRSV1" "LRSV2"
> # get distribution of inertia
> get_inertia(arrests_lra)
      LRSV1       LRSV2 
0.013826903 0.004074913 
> 
> 
> 
> cleanEx()
> nameEx("stat_center")
> ### * stat_center
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stat_center
> ### Title: Compute geometric centers and spreads for ordination factors
> ### Aliases: stat_center stat_star
> 
> ### ** Examples
> 
> # scaled PCA of Anderson iris measurements
> iris[, -5] %>%
+   princomp(cor = TRUE) %>%
+   as_tbl_ord() %>%
+   mutate_rows(species = iris$Species) %>%
+   print() -> iris_pca
# A tbl_ord of class 'princomp': (150 x 4) x (4 x 4)'
# 4 coordinates: Comp.1, Comp.2, ..., Comp.4
# 
# Rows (principal): [ 150 x 4 | 1 ]
  Comp.1 Comp.2  Comp.3 ... |   species
                            |   <fct>  
1  -2.26  0.480  0.128      | 1 setosa 
2  -2.08 -0.674  0.235  ... | 2 setosa 
3  -2.36 -0.342 -0.0442     | 3 setosa 
4  -2.30 -0.597 -0.0913     | 4 setosa 
5  -2.39  0.647 -0.0157     | 5 setosa 
# ℹ 145 more rows
# 
# Columns (standard): [ 4 x 4 | 0 ]
  Comp.1 Comp.2 Comp.3 ... | 
                           | 
1  0.521 0.377   0.720     | 
2 -0.269 0.923  -0.244 ... | 
3  0.580 0.0245 -0.142     | 
4  0.565 0.0669 -0.634     | 
> 
> # row-principal biplot with centroid-based stars
> iris_pca %>%
+   ggbiplot(aes(color = species)) +
+   theme_bw() +
+   scale_color_brewer(type = "qual", palette = 2) +
+   stat_rows_star(alpha = .5, fun.center = "mean") +
+   geom_rows_point(alpha = .5) +
+   stat_rows_center(fun.center = "mean", size = 4, shape = 1L) +
+   ggtitle(
+     "Row-principal PCA biplot of Anderson iris measurements",
+     "Segments connect each observation to its within-species centroid"
+   )
> 
> 
> 
> cleanEx()
> nameEx("stat_chull")
> ### * stat_chull
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stat_chull
> ### Title: Restrict geometric data to boundary points for its convex hull
> ### Aliases: stat_chull
> 
> ### ** Examples
> 
> # correspondence analysis of combined female and male hair and eye color data
> HairEyeColor %>%
+   rowSums(dims = 2L) %>%
+   MASS::corresp(nf = 2L) %>%
+   as_tbl_ord() %>%
+   augment_ord() %>%
+   print() -> hec_ca
# A tbl_ord of class 'correspondence': (4 x 2) x (4 x 2)'
# 2 coordinates: Can1 and Can2
# 
# Rows (standard): [ 4 x 2 | 1 ]
    Can1   Can2 |   name 
                |   <chr>
1 -1.10   1.44  | 1 Black
2 -0.324 -0.219 | 2 Brown
3 -0.283 -2.14  | 3 Red  
4  1.83   0.467 | 4 Blond
# 
# Columns (standard): [ 4 x 2 | 1 ]
    Can1   Can2 |   name 
                |   <chr>
1 -1.08   0.592 | 1 Brown
2  1.20   0.556 | 2 Blue 
3 -0.465 -1.12  | 3 Hazel
4  0.354 -2.27  | 4 Green
> # inertia across artificial coordinates (all singular values < 1)
> get_inertia(hec_ca)
      Can1       Can2 
0.20877265 0.02222661 
> 
> # in row-principal biplot, row coordinates are weighted averages of columns
> hec_ca %>%
+   confer_inertia("rows") %>%
+   ggbiplot(aes(color = .matrix, fill = .matrix, shape = .matrix)) +
+   theme_bw() +
+   stat_cols_chull(alpha = .1) +
+   geom_cols_point() +
+   geom_rows_point() +
+   ggtitle("Row-principal CA of hair & eye color")
> # in column-principal biplot, column coordinates are weighted averages of rows
> hec_ca %>%
+   confer_inertia("cols") %>%
+   ggbiplot(aes(color = .matrix, fill = .matrix, shape = .matrix)) +
+   theme_bw() +
+   stat_rows_chull(alpha = .1) +
+   geom_rows_point() +
+   geom_cols_point() +
+   ggtitle("Column-principal CA of hair & eye color")
> 
> 
> 
> cleanEx()
> nameEx("stat_cone")
> ### * stat_cone
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stat_cone
> ### Title: Restrict geometric data to boundary points for its conical hull
> ### Aliases: stat_cone
> 
> ### ** Examples
> 
> # centered principal components analysis of U.S. personal expenditure data
> USPersonalExpenditure %>%
+   prcomp() %>%
+   as_tbl_ord() %>%
+   augment_ord() %>%
+   # allow radiating text to exceed plotting window
+   ggbiplot(aes(label = name), clip = "off",
+            sec.axes = "cols", scale.factor = 50) +
+   geom_rows_label(size = 3) +
+   geom_cols_vector() +
+   # omit labels in the conical hull without the origin
+   stat_cols_cone(linetype = "dotted") +
+   geom_cols_text_radiate(stat = "cone") +
+   ggtitle(
+     "U.S. Personal Expenditure data, 1940-1960",
+     "Row-principal biplot of centered PCA"
+   )
> 
> 
> 
> cleanEx()
> nameEx("stat_rows")
> ### * stat_rows
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stat_rows
> ### Title: Render plot elements for one matrix of an ordination
> ### Aliases: stat_rows stat_cols
> 
> ### ** Examples
> 
> # FA of Swiss social data
> swiss_fa <-
+   ordinate(swiss, model = factanal, factors = 2L, scores = "regression")
> # active and supplementary elements
> get_rows(swiss_fa, elements = "active")
                     Factor1     Factor2
Fertility        -0.65238512  0.39335226
Agriculture      -0.63054439  0.33275063
Examination       0.68498141 -0.51036433
Education         0.99700850 -0.03128268
Catholic         -0.12417831  0.96118093
Infant.Mortality -0.09466294  0.17483734
> head(get_rows(swiss_fa, elements = "score"))
                 Factor1    Factor2
Courtelary    0.07912746 -0.6344915
Delemont     -0.17926953  1.0783941
Franches-Mnt -0.58784929  1.2004233
Moutier      -0.42433417 -0.1583409
Neuveville    0.38211185 -0.6682790
Porrentruy   -0.37286722  1.0884740
> 
> # biplot using element filters and selection
> # (note that filter precedes selection)
> ggbiplot(swiss_fa) +
+   geom_rows_point(elements = "score") +
+   geom_rows_text(aes(label = name), elements = "score", subset = c(1, 4, 18)) +
+   scale_alpha_manual(values = c(0, 1), guide = "none") +
+   geom_cols_vector() +
+   geom_cols_text_radiate(aes(label = name))
`subset` will be applied after data are restricted to score elements.
> 
> 
> 
> cleanEx()
> nameEx("stat_spantree")
> ### * stat_spantree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stat_spantree
> ### Title: Calculate a minimum spanning tree among cases or variables
> ### Aliases: stat_spantree
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # classical multidimensional scaling of road distances between European cities
> ##D euro_mds <- ordinate(eurodist, cmdscale_ord, k = 11)
> ##D 
> ##D # biplot with minimal spanning tree based on full-dimensional distances
> ##D # (as implemented in {mlpack})
> ##D euro_mds %>%
> ##D   negate_ord("PCo2") %>%
> ##D   ggbiplot() +
> ##D   stat_cols_spantree(
> ##D     ord_aes(euro_mds), engine = "mlpack",
> ##D     alpha = .5, linetype = "dotted"
> ##D   ) +
> ##D   geom_cols_text(aes(label = name), size = 3) +
> ##D   ggtitle(
> ##D     "MDS biplot of road distances between European cities",
> ##D     "Dotted segments constitute the minimal spanning tree"
> ##D   )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("tbl_ord")
> ### * tbl_ord
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tbl_ord
> ### Title: A unified ordination object class
> ### Aliases: tbl_ord as_tbl_ord as_tbl_ord.tbl_ord make_tbl_ord is_tbl_ord
> ###   is.tbl_ord valid_tbl_ord un_tbl_ord
> 
> ### ** Examples
> 
> # illustrative ordination: FA of Swiss social data
> swiss_fa <- factanal(swiss, factors = 3L, scores = "regression")
> print(swiss_fa)

Call:
factanal(x = swiss, factors = 3L, scores = "regression")

Uniquenesses:
       Fertility      Agriculture      Examination        Education 
           0.005            0.286            0.213            0.114 
        Catholic Infant.Mortality 
           0.083            0.743 

Loadings:
                 Factor1 Factor2 Factor3
Fertility        -0.512   0.203   0.832 
Agriculture      -0.774   0.312  -0.129 
Examination       0.751  -0.423  -0.211 
Education         0.901          -0.262 
Catholic         -0.186   0.913   0.220 
Infant.Mortality                  0.500 

               Factor1 Factor2 Factor3
SS loadings      2.273   1.164   1.120
Proportion Var   0.379   0.194   0.187
Cumulative Var   0.379   0.573   0.759

The degrees of freedom for the model is 0 and the fit was 1e-04 
> 
> # add the 'tbl_ord' wrapper
> swiss_fa_ord <- as_tbl_ord(swiss_fa)
> # inspect wrapped model
> is_tbl_ord(swiss_fa_ord)
[1] TRUE
> print(swiss_fa_ord)
# A tbl_ord of class 'factanal': (53 x 3) x (6 x 3)'
# 3 coordinates: Factor1, Factor2, Factor3
# 
# Rows (symmetric): [ 53 x 3 | 0 ]
  Factor1 Factor2 Factor3 | 
                          | 
1  -0.512  0.203    0.832 | 
2  -0.774  0.312   -0.129 | 
3   0.751 -0.423   -0.211 | 
4   0.901  0.0784  -0.262 | 
5  -0.186  0.913    0.220 | 

# 
# Columns (symmetric): [ 6 x 3 | 0 ]
  Factor1 Factor2 Factor3 | 
                          | 
1 -0.512   0.203    0.832 | 
2 -0.774   0.312   -0.129 | 
3  0.751  -0.423   -0.211 | 
4  0.901   0.0784  -0.262 | 
5 -0.186   0.913    0.220 | 
6  0.0289  0.0772   0.500 | 
> valid_tbl_ord(swiss_fa_ord)
[1] TRUE
> # unwrap the model
> un_tbl_ord(swiss_fa_ord)

Call:
factanal(x = swiss, factors = 3L, scores = "regression")

Uniquenesses:
       Fertility      Agriculture      Examination        Education 
           0.005            0.286            0.213            0.114 
        Catholic Infant.Mortality 
           0.083            0.743 

Loadings:
                 Factor1 Factor2 Factor3
Fertility        -0.512   0.203   0.832 
Agriculture      -0.774   0.312  -0.129 
Examination       0.751  -0.423  -0.211 
Education         0.901          -0.262 
Catholic         -0.186   0.913   0.220 
Infant.Mortality                  0.500 

               Factor1 Factor2 Factor3
SS loadings      2.273   1.164   1.120
Proportion Var   0.379   0.194   0.187
Cumulative Var   0.379   0.573   0.759

The degrees of freedom for the model is 0 and the fit was 1e-04 
> 
> # create a 'tbl_ord' directly from row and column factors
> # (missing inertia & other attributes)
> swiss_fa_ord2 <- make_tbl_ord(rows = swiss_fa$scores, cols = swiss_fa$loadings)
> # inspect wrapped factors
> is_tbl_ord(swiss_fa_ord2)
[1] TRUE
> print(swiss_fa_ord2)
# A tbl_ord: (47 x 3) x (6 x 3)'
# 3 coordinates: Factor1, Factor2, Factor3
# 
# Rows: [ 47 x 3 | 0 ]
  Factor1 Factor2 Factor3 | 
                          | 
1   0.453  -0.900   1.46  | 
2  -0.143   0.886   0.942 | 
3  -0.308   0.848   1.75  | 
4  -0.125  -0.463   1.53  | 
5   0.341  -0.846   1.05  | 

# 
# Columns: [ 6 x 3 | 0 ]
  Factor1 Factor2 Factor3 | 
                          | 
1 -0.512   0.203    0.832 | 
2 -0.774   0.312   -0.129 | 
3  0.751  -0.423   -0.211 | 
4  0.901   0.0784  -0.262 | 
5 -0.186   0.913    0.220 | 
6  0.0289  0.0772   0.500 | 
> valid_tbl_ord(swiss_fa_ord2)
[1] TRUE
> # unwrap factors
> un_tbl_ord(swiss_fa_ord2)
$rows
                 Factor1    Factor2     Factor3
Courtelary    0.45318326 -0.8996943  1.45754866
Delemont     -0.14322063  0.8855428  0.94227871
Franches-Mnt -0.30797336  0.8477030  1.74514043
Moutier      -0.12534083 -0.4629021  1.52823000
Neuveville    0.34109514 -0.8458178  1.04687165
Porrentruy   -0.04473114  1.0029812  0.32499084
Broye        -0.20957031  0.9388742  0.95013743
Glane        -0.07584684  0.9555256  1.84540889
Gruyere      -0.17406590  1.0769276  0.80852222
Sarine        0.48706293  0.9876863  1.28186031
Veveyse      -0.21675238  1.0104124  1.24699185
Aigle        -0.10911693 -0.6583181 -0.49672411
Aubonne      -0.68437504 -0.8402563 -0.52979298
Avenches     -0.03638406 -0.7941117  0.04684235
Cossonay     -0.63417597 -0.9062500 -0.97644764
Echallens    -0.85262069 -0.5223686 -0.56695418
Grandson     -0.07196915 -0.9996237  0.34908713
Lausanne      1.61585928 -0.2740672 -0.32842180
La Vallee     1.11176971 -0.7484136 -0.66355682
Lavaux       -0.45759227 -0.8101884 -0.57253943
Morges       -0.16023764 -0.8189392 -0.35143678
Moudon       -0.76689425 -0.8871886 -0.73359873
Nyone         0.01148304 -0.4441114 -1.18020392
Orbe         -0.53346789 -0.8042945 -1.34826105
Oron         -1.11777160 -1.0181496 -0.21175864
Payerne      -0.36904017 -0.8817496  0.37541143
Paysd'enhaut -1.13077900 -0.8986374 -0.29968480
Rolle        -0.42160714 -0.6023891 -1.03877760
Vevey         0.94345222 -0.3409626 -0.46681372
Yverdon      -0.32587490 -0.7719262 -0.45767841
Conthey      -1.31619000  1.3250097 -0.61688868
Entremont    -0.89250420  1.4492843 -0.97170425
Herens       -1.23489054  1.2885602 -0.38378811
Martigwy     -0.65337979  1.3258772 -0.68175988
Monthey      -0.77161554  1.1439436  0.14336145
St Maurice   -0.58929096  1.5132175 -1.21362340
Sierre       -1.07854088  1.0949088  1.16699564
Sion          0.07266005  1.2536309  0.60709606
Boudry        0.42781724 -0.9511974  0.51240946
La Chauxdfnd  0.80305682 -0.8488623  0.28442301
Le Locle      0.63722154 -0.8395794  0.83668414
Neuchatel     2.31502030 -0.3320992  0.93658497
Val de Ruz   -0.19124613 -1.0328917  0.84358034
ValdeTravers  0.26693510 -0.9979172  0.17191080
V. De Geneve  3.72546960  1.0799755 -1.35159069
Rive Droite   1.02570325  0.9919321 -2.04348421
Rive Gauche   1.45927665  1.0609142 -1.96687793

$cols

Loadings:
                 Factor1 Factor2 Factor3
Fertility        -0.512   0.203   0.832 
Agriculture      -0.774   0.312  -0.129 
Examination       0.751  -0.423  -0.211 
Education         0.901          -0.262 
Catholic         -0.186   0.913   0.220 
Infant.Mortality                  0.500 

               Factor1 Factor2 Factor3
SS loadings      2.273   1.164   1.120
Proportion Var   0.379   0.194   0.187
Cumulative Var   0.379   0.573   0.759

> 
> 
> 
> cleanEx()
> nameEx("tidiers")
> ### * tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidiers
> ### Title: Tidiers for 'tbl_ord' objects
> ### Aliases: tidiers tidy.tbl_ord glance.tbl_ord fortify.tbl_ord
> 
> ### ** Examples
> 
> # illustrative ordination: PCA of iris data
> iris_pca <- ordinate(iris, ~ prcomp(., center = TRUE, scale. = TRUE), seq(4L))
> 
> # use `tidy()` to summarize distribution of inertia
> tidy(iris_pca)
# A tibble: 4 × 5
  name   sdev inertia prop_var quality
  <fct> <dbl>   <dbl>    <dbl>   <dbl>
1 PC1   1.71   435.    0.730     0.730
2 PC2   0.956  136.    0.229     0.958
3 PC3   0.383   21.9   0.0367    0.995
4 PC4   0.144    3.09  0.00518   1    
> # this facilitates scree plots
> tidy(iris_pca) %>%
+   ggplot(aes(x = name, y = prop_var)) +
+   geom_col() +
+   scale_y_continuous(labels = scales::percent) +
+   labs(x = NULL, y = "Proportion of variance")
> 
> # use `fortify()` to prepare either matrix factor for `ggplot()`
> fortify(iris_pca, .matrix = "V") %>%
+   ggplot(aes(x = name, y = PC1)) +
+   geom_col() +
+   coord_flip() +
+   labs(x = "Measurement")
> iris_pca %>%
+   fortify(.matrix = "U") %>%
+   ggplot(aes(x = PC1, fill = Species)) +
+   geom_histogram() +
+   labs(y = NULL)
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> # ... or to prepare both for `ggbiplot()`
> fortify(iris_pca)
# A tibble: 154 × 10
     PC1     PC2     PC3      PC4 Species .element .matrix name  center scale
   <dbl>   <dbl>   <dbl>    <dbl> <fct>   <chr>    <chr>   <chr>  <dbl> <dbl>
 1 -2.26 -0.478   0.127   0.0241  setosa  active   rows    <NA>      NA    NA
 2 -2.07  0.672   0.234   0.103   setosa  active   rows    <NA>      NA    NA
 3 -2.36  0.341  -0.0441  0.0283  setosa  active   rows    <NA>      NA    NA
 4 -2.29  0.595  -0.0910 -0.0657  setosa  active   rows    <NA>      NA    NA
 5 -2.38 -0.645  -0.0157 -0.0358  setosa  active   rows    <NA>      NA    NA
 6 -2.07 -1.48   -0.0269  0.00659 setosa  active   rows    <NA>      NA    NA
 7 -2.44 -0.0475 -0.334  -0.0367  setosa  active   rows    <NA>      NA    NA
 8 -2.23 -0.222   0.0884 -0.0245  setosa  active   rows    <NA>      NA    NA
 9 -2.33  1.11   -0.145  -0.0268  setosa  active   rows    <NA>      NA    NA
10 -2.18  0.467   0.253  -0.0398  setosa  active   rows    <NA>      NA    NA
# ℹ 144 more rows
> 
> # use `glance()` to summarize the model as an ordination
> glance(iris_pca)
# A tibble: 1 × 7
   rank n.row n.col inertia prop.var.1 prop.var.2 class 
  <int> <int> <int>   <dbl>      <dbl>      <dbl> <chr> 
1     4   150     4     596      0.730      0.229 prcomp
> # this enables comparisons to other models
> rbind(
+   glance(ordinate(subset(iris, Species == "setosa"), prcomp, seq(4L))),
+   glance(ordinate(subset(iris, Species == "versicolor"), prcomp, seq(4L))),
+   glance(ordinate(subset(iris, Species == "virginica"), prcomp, seq(4L)))
+ )
# A tibble: 3 × 7
   rank n.row n.col inertia prop.var.1 prop.var.2 class 
  <int> <int> <int>   <dbl>      <dbl>      <dbl> <chr> 
1     4    50     4    15.2      0.765      0.119 prcomp
2     4    50     4    30.6      0.781      0.116 prcomp
3     4    50     4    43.5      0.783      0.120 prcomp
> 
> 
> 
> cleanEx()
> nameEx("wrap-ord")
> ### * wrap-ord
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wrap-ord
> ### Title: Wrappers for lossy ordination methods
> ### Aliases: wrap-ord eigen_ord svd_ord cmdscale_ord cancor_ord
> 
> ### ** Examples
> 
> # glass composition data from one furnace
> glass_banias <- subset(
+   glass,
+   Context == "L.15;B.166",
+   select = c("SiO2", "Na2O", "CaO", "Al2O3", "MgO", "K2O")
+ )
> # eigendecomposition of a covariance matrix
> (glass_cov <- cov(glass_banias))
            SiO2       Na2O        CaO    Al2O3         MgO      K2O
SiO2   2.6155367  0.6093667 -1.2869867 -0.45252 -0.46817333 -0.31149
Na2O   0.6093667  0.2559067 -0.3217067 -0.16542 -0.10587333 -0.10726
CaO   -1.2869867 -0.3217067  0.7060267  0.24842  0.20559333  0.13220
Al2O3 -0.4525200 -0.1654200  0.2484200  0.12716  0.07972000  0.07230
MgO   -0.4681733 -0.1058733  0.2055933  0.07972  0.09462667  0.06682
K2O   -0.3114900 -0.1072600  0.1322000  0.07230  0.06682000  0.06131
> eigen_ord(glass_cov)
eigen() decomposition
$values
[1] 3.617285e+00 1.467376e-01 8.282650e-02 1.360291e-02 1.141672e-04
[6] 8.542292e-18

$vectors
             EV1         EV2         EV3         EV4        EV5        EV6
SiO2   0.8469970  0.31716695 -0.25837288 -0.11577441 -0.2822267  0.1489597
Na2O   0.2099520 -0.79170694 -0.10021025 -0.51787194  0.1385212  0.1780413
CaO   -0.4260986  0.04199369 -0.76882445 -0.05663831 -0.3233201  0.3432808
Al2O3 -0.1556273  0.45906193 -0.08066526 -0.77062798  0.2878426 -0.2860325
MgO   -0.1492104 -0.07286372  0.38010592 -0.30504020 -0.8407925 -0.1672273
K2O   -0.1023356  0.23408287  0.42558539 -0.16816668  0.0826960  0.8476385

> # singular value decomposition of a data matrix
> svd_ord(glass_banias)
$d
[1] 177.16843535   2.56375788   0.82468871   0.51400398   0.21898181
[6]   0.01400983

$u
         SV1          SV2         SV3        SV4        SV5         SV6
1 -0.4114474  0.268953258  0.54464383 -0.4529219  0.4351102  0.25938230
2 -0.4099492  0.124966122  0.51481370  0.3162816 -0.6000110 -0.30206743
3 -0.4097327 -0.103523503 -0.13351247  0.5115444  0.6162163 -0.40271096
4 -0.3914429 -0.815275824 -0.07487103 -0.3907913 -0.1362392 -0.07220201
5 -0.4168814  0.486413365 -0.59131457 -0.3710452 -0.1857274 -0.26036475
6 -0.4095779 -0.007607042 -0.25543255  0.3778329 -0.1337444  0.77865078

$v
              SV1         SV2         SV3          SV4         SV5         SV6
SiO2  -0.97757835  0.09992541 -0.16303444  0.046753453 -0.05969843 -0.04500518
Na2O  -0.16869103  0.14528933  0.81605152 -0.238508341  0.42108755  0.22426170
CaO   -0.11569079 -0.87296399  0.28883998  0.323881874 -0.16853953  0.08840776
Al2O3 -0.01665686 -0.29609746 -0.38102381  0.008014293  0.87323378 -0.06533172
MgO   -0.03775856 -0.28137368  0.06285458 -0.713218748 -0.10916969 -0.62837365
K2O   -0.02822033 -0.19998734 -0.27371758 -0.572086712 -0.12751682  0.73535272

attr(,"class")
[1] "svd_ord"
> # classical multidimensional scaling of a distance matrix
> cmdscale_ord(dist(glass_banias))
$points
            [,1]        [,2]
[1,] -0.87986198  0.53544035
[2,] -0.45244074  0.40907498
[3,] -0.08144239 -0.26484655
[4,]  3.61567304 -0.04227923
[5,] -1.99639680 -0.36657720
[6,] -0.20553113 -0.27081236

$eig
[1] 1.808643e+01 7.336881e-01 4.141325e-01 6.801456e-02 5.708361e-04
[6] 7.717581e-16

$x
             [,1]        [,2]        [,3]        [,4]       [,5]         [,6]
[1,] -2.207855556 -1.12728889  0.22354444   6.3455444 -3.2300556 -0.003888889
[2,] -1.127288889 -0.87692222  0.03611111   3.3851111 -1.3678889 -0.049122222
[3,]  0.223544444  0.03611111 -0.47385556   0.7213444 -0.2278556 -0.279288889
[4,]  6.345544444  3.38511111  0.72134444 -26.2322556 14.2529444  1.527311111
[5,] -3.230055556 -1.36788889 -0.22785556  14.2529444 -8.5234556 -0.903688889
[6,] -0.003888889 -0.04912222 -0.27928889   1.5273111 -0.9036889 -0.291322222

$ac
[1] 0

$GOF
[1] 0.9749924 0.9749924

attr(,"class")
[1] "cmds_ord"
> 
> # canonical correlation analysis with trace components
> glass_banias_minor <- subset(
+   glass,
+   Context == "L.15;B.166",
+   select = c("TiO2", "FeO", "MnO", "P2O5", "Cl", "SO3")
+ )
> # impute half of detection threshold
> glass_banias_minor$TiO2[[1L]] <- 0.5
> cancor_ord(glass_banias, glass_banias_minor)
$cor
[1] 1 1 1 1 1

$xcoef
            [,1]      [,2]       [,3]      [,4]        [,5]
SiO2   -6.478637 -1.459733  -9.968805 -2.879401  1.73968803
Na2O    2.631115  1.760384   3.475978  2.843217 -0.04016827
CaO    -6.900433 -1.602503 -12.523567 -3.775547  1.97611217
Al2O3   5.471809  4.091362  10.855957  4.535237 -0.14588622
MgO   -18.393417 -5.876955 -27.270091 -6.686017  5.63988147

$ycoef
           [,1]       [,2]        [,3]     [,4]       [,5]
TiO2  -3.395629  0.4041233  -0.4572835 2.960014   2.138864
FeO    5.366955  2.5396431  -5.2190661 0.000000  -1.124745
MnO    6.114207 -2.1599415  -1.7300966 0.000000  -2.456741
P2O5 -19.459931 -4.8487519  -9.5657812 0.000000   6.309073
Cl    22.681184 -3.6895103 -11.0569463 0.000000 -14.413068

$xcenter
     SiO2      Na2O       CaO     Al2O3       MgO       K2O 
70.691667 12.196667  8.383333  1.210000  2.736667  2.045000 

$ycenter
     TiO2       FeO       MnO      P2O5        Cl       SO3 
0.1933333 0.4300000 0.9666667 0.2700000 0.8100000 0.3483333 

attr(,"class")
[1] "cancor_ord"
> 
> # calculate canonical scores and structure correlations
> glass_cca <-
+   cancor_ord(glass_banias[, 1:3], glass_banias_minor[, 1:3], scores = TRUE)
> # scores
> glass_cca$xscores
            [,1]         [,2]       [,3]
[1,]  0.08625757  0.564009626  0.5086737
[2,] -0.06325679  0.009686013  0.4449230
[3,] -0.31243762 -0.589123478  0.1458326
[4,]  0.85114073 -0.156299524 -0.2733283
[5,] -0.34697599  0.470284132 -0.6433738
[6,] -0.21472789 -0.298556769 -0.1827271
> # intraset correlations
> glass_cca$xstructure
           [,1]       [,2]       [,3]
SiO2 -0.9261925  0.3749912 0.03935800
Na2O -0.5467957  0.5715073 0.61187732
CaO   0.7639885 -0.6435255 0.04686735
> # interset correlations
> glass_cca$xstructure %*% diag(glass_cca$cor)
           [,1]       [,2]       [,3]
SiO2 -0.9261925  0.3594308 0.02748688
Na2O -0.5467957  0.5477923 0.42732349
CaO   0.7639885 -0.6168220 0.03273126
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.27 0.31 5.93 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
