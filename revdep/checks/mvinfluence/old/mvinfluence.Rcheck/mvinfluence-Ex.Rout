
R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mvinfluence"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('mvinfluence')
Loading required package: car
Warning: package 'car' was built under R version 4.4.3
Loading required package: carData
Warning: package 'carData' was built under R version 4.4.3
Loading required package: heplots
Warning: package 'heplots' was built under R version 4.4.3
Loading required package: broom
Warning: package 'broom' was built under R version 4.4.3
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Fertilizer")
> ### * Fertilizer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Fertilizer
> ### Title: Fertilizer Data
> ### Aliases: Fertilizer
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data(Fertilizer)
> 
> # simple plots
> plot(Fertilizer, col=c('red', rep("blue",7)), 
+      cex=c(2,rep(1.2,7)), 
+      pch=as.character(1:8))
> 
> # A biplot shows the data in 2D. It gives another view of how case 1 stands out in data space
> biplot(prcomp(Fertilizer))
> 
> # fit the mlm
> mod <- lm(cbind(grain, straw) ~ fertilizer, data=Fertilizer)
> Anova(mod)

Type II MANOVA Tests: Pillai test statistic
           Df test stat approx F num Df den Df    Pr(>F)    
fertilizer  1   0.94119    40.01      2      5 0.0008388 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> # influence plots (m=1)
> influencePlot(mod)
          H        Q    CookD        L        R
1 0.6203523 1.853289 3.449076 1.634021 4.881602
> influencePlot(mod, type='LR')
          H        Q    CookD        L        R
1 0.6203523 1.853289 3.449076 1.634021 4.881602
> influencePlot(mod, type='stres')
          H        Q    CookD        L        R
1 0.6203523 1.853289 3.449076 1.634021 4.881602
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("as.data.frame.inflmlm")
> ### * as.data.frame.inflmlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.data.frame.inflmlm
> ### Title: Convert an inflmlm object to a data frame
> ### Aliases: as.data.frame.inflmlm
> 
> ### ** Examples
> 
> # none
> 
> 
> 
> 
> cleanEx()
> nameEx("cooks.distance.mlm")
> ### * cooks.distance.mlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cooks.distance.mlm
> ### Title: Cook's distance for a MLM
> ### Aliases: cooks.distance.mlm
> ### Keywords: models regression
> 
> ### ** Examples
> 
> 
> data(Rohwer, package="heplots")
> Rohwer2 <- subset(Rohwer, subset=group==2)
> rownames(Rohwer2)<- 1:nrow(Rohwer2)
> Rohwer.mod <- lm(cbind(SAT, PPVT, Raven) ~ n+s+ns+na+ss, data=Rohwer2)
> 
> hatvalues(Rohwer.mod)
         1          2          3          4          5          6          7 
0.16700926 0.21845327 0.14173469 0.07314341 0.56821462 0.15432157 0.04530969 
         8          9         10         11         12         13         14 
0.17661104 0.05131298 0.45161152 0.14542776 0.17050399 0.10374592 0.12649927 
        15         16         17         18         19         20         21 
0.33246744 0.33183461 0.17320579 0.26353864 0.29835817 0.07880597 0.14023750 
        22         23         24         25         26         27         28 
0.19380286 0.04455330 0.20641708 0.15712604 0.15333879 0.36726467 0.11189754 
        29         30         31         32 
0.30426999 0.08655434 0.08921878 0.07320950 
> cooks.distance(Rohwer.mod)
          1           2           3           4           5           6 
0.110668789 0.035758983 0.074110633 0.006454502 0.846717339 0.014584590 
          7           8           9          10          11          12 
0.025295531 0.147676200 0.040403408 0.063391985 0.045680183 0.116293594 
         13          14          15          16          17          18 
0.042671229 0.164273594 0.015190817 0.118323491 0.144482540 0.056707069 
         19          20          21          22          23          24 
0.173206386 0.037332773 0.151642786 0.040245143 0.030356681 0.072943655 
         25          26          27          28          29          30 
0.260083518 0.042608984 0.338661595 0.034223968 0.302596343 0.045051960 
         31          32 
0.097583942 0.055032090 
> 
> 
> 
> 
> cleanEx()
> nameEx("hatvalues.mlm")
> ### * hatvalues.mlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hatvalues.mlm
> ### Title: Hatvalues for a MLM
> ### Aliases: hatvalues.mlm
> ### Keywords: models regression
> 
> ### ** Examples
> 
> 
> data(Rohwer, package="heplots")
> Rohwer2 <- subset(Rohwer, subset=group==2)
> rownames(Rohwer2)<- 1:nrow(Rohwer2)
> Rohwer.mod <- lm(cbind(SAT, PPVT, Raven) ~ n+s+ns+na+ss, data=Rohwer2)
> 
> options(digits=3)
> hatvalues(Rohwer.mod)
     1      2      3      4      5      6      7      8      9     10     11 
0.1670 0.2185 0.1417 0.0731 0.5682 0.1543 0.0453 0.1766 0.0513 0.4516 0.1454 
    12     13     14     15     16     17     18     19     20     21     22 
0.1705 0.1037 0.1265 0.3325 0.3318 0.1732 0.2635 0.2984 0.0788 0.1402 0.1938 
    23     24     25     26     27     28     29     30     31     32 
0.0446 0.2064 0.1571 0.1533 0.3673 0.1119 0.3043 0.0866 0.0892 0.0732 
> cooks.distance(Rohwer.mod)
      1       2       3       4       5       6       7       8       9      10 
0.11067 0.03576 0.07411 0.00645 0.84672 0.01458 0.02530 0.14768 0.04040 0.06339 
     11      12      13      14      15      16      17      18      19      20 
0.04568 0.11629 0.04267 0.16427 0.01519 0.11832 0.14448 0.05671 0.17321 0.03733 
     21      22      23      24      25      26      27      28      29      30 
0.15164 0.04025 0.03036 0.07294 0.26008 0.04261 0.33866 0.03422 0.30260 0.04505 
     31      32 
0.09758 0.05503 
> 
> 
> 
> cleanEx()
> nameEx("infIndexPlot.mlm")
> ### * infIndexPlot.mlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: infIndexPlot.mlm
> ### Title: Influence Index Plots for Multivariate Linear Models
> ### Aliases: infIndexPlot.mlm influenceIndexPlot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> # iris data
> data(iris)
> iris.mod <- lm(as.matrix(iris[,1:4]) ~ Species, data=iris)
> infIndexPlot(iris.mod, col=iris$Species, id.n=3)
> 
> # Sake data
> data(Sake, package="heplots")
> Sake.mod <- lm(cbind(taste,smell) ~ ., data=Sake)
> infIndexPlot(Sake.mod, id.n=3)
> 
> # Rohwer data
> data(Rohwer, package="heplots")
> Rohwer2 <- subset(Rohwer, subset=group==2)
> rownames(Rohwer2)<- 1:nrow(Rohwer2)
> rohwer.mlm <- lm(cbind(SAT, PPVT, Raven) ~ n + s + ns + na + ss, data=Rohwer2)
> infIndexPlot(rohwer.mlm, id.n=3)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("influence.mlm")
> ### * influence.mlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: influence.mlm
> ### Title: Regression Deletion Diagnostics for Multivariate Linear Models
> ### Aliases: influence.mlm
> ### Keywords: models regression
> 
> ### ** Examples
> 
> 
> # Rohwer data
> data(Rohwer, package="heplots")
> Rohwer2 <- subset(Rohwer, subset=group==2)
> rownames(Rohwer2)<- 1:nrow(Rohwer2)
> Rohwer.mod <- lm(cbind(SAT, PPVT, Raven) ~ n+s+ns+na+ss, data=Rohwer2)
> 
> # m=1 diagnostics
> influence(Rohwer.mod) |> head()
$m
[1] 1

$H
 [1] 0.1670 0.2185 0.1417 0.0731 0.5682 0.1543 0.0453 0.1766 0.0513 0.4516
[11] 0.1454 0.1705 0.1037 0.1265 0.3325 0.3318 0.1732 0.2635 0.2984 0.0788
[21] 0.1402 0.1938 0.0446 0.2064 0.1571 0.1533 0.3673 0.1119 0.3043 0.0866
[31] 0.0892 0.0732

$Q
 [1] 0.1529 0.0378 0.1207 0.0204 0.3439 0.0218 0.1288 0.1930 0.1817 0.0324
[11] 0.0725 0.1574 0.0949 0.2997 0.0105 0.0823 0.1925 0.0497 0.1340 0.1093
[21] 0.2495 0.0479 0.1572 0.0815 0.3820 0.0641 0.2128 0.0706 0.2295 0.1201
[31] 0.2524 0.1735

$CookD
 [1] 0.11067 0.03576 0.07411 0.00645 0.84672 0.01458 0.02530 0.14768 0.04040
[10] 0.06339 0.04568 0.11629 0.04267 0.16427 0.01519 0.11832 0.14448 0.05671
[19] 0.17321 0.03733 0.15164 0.04025 0.03036 0.07294 0.26008 0.04261 0.33866
[28] 0.03422 0.30260 0.04505 0.09758 0.05503

$L
 [1] 0.2005 0.2795 0.1651 0.0789 1.3160 0.1825 0.0475 0.2145 0.0541 0.8235
[11] 0.1702 0.2056 0.1158 0.1448 0.4981 0.4966 0.2095 0.3578 0.4252 0.0855
[21] 0.1631 0.2404 0.0466 0.2601 0.1864 0.1811 0.5804 0.1260 0.4373 0.0948
[31] 0.0980 0.0790

$R
 [1] 0.1836 0.0483 0.1406 0.0220 0.7964 0.0258 0.1349 0.2344 0.1915 0.0591
[11] 0.0848 0.1898 0.1059 0.3431 0.0158 0.1232 0.2328 0.0674 0.1909 0.1187
[21] 0.2902 0.0594 0.1646 0.1028 0.4532 0.0757 0.3363 0.0795 0.3299 0.1315
[31] 0.2771 0.1872

> 
> # try an m=2 case
> ## res2 <- influence.mlm(Rohwer.mod, m=2, do.coef=FALSE)
> ## res2.df <- as.data.frame(res2)
> ## head(res2.df)
> ## scatterplotMatrix(log(res2.df))
> 
> 
> influencePlot(Rohwer.mod, id.n=4, type="cookd")
       H      Q  CookD     L      R
5  0.568 0.3439 0.8467 1.316 0.7964
10 0.452 0.0324 0.0634 0.824 0.0591
14 0.126 0.2997 0.1643 0.145 0.3431
15 0.332 0.0105 0.0152 0.498 0.0158
25 0.157 0.3820 0.2601 0.186 0.4532
27 0.367 0.2128 0.3387 0.580 0.3363
29 0.304 0.2295 0.3026 0.437 0.3299
> 
> 
> # Sake data
> data(Sake, package="heplots")
> Sake.mod <- lm(cbind(taste,smell) ~ ., data=Sake)
> influence(Sake.mod)
Multivariate influence statistics for model:
 lm(formula = cbind(taste, smell) ~ ., data = Sake) 
 m=  1 case deletion diagnostics 
        H      Q   CookD      L      R
1  0.8116 0.5757 1.09033 4.3086 3.0564
2  0.2975 0.0500 0.03472 0.4234 0.0712
3  0.0897 0.0711 0.01490 0.0986 0.0782
4  0.1581 0.1729 0.06379 0.1878 0.2054
5  0.1954 0.4069 0.18550 0.2428 0.5057
6  0.2772 0.0255 0.01652 0.3835 0.0353
7  0.2294 0.2042 0.10928 0.2977 0.2649
8  0.3536 0.0546 0.04506 0.5471 0.0845
9  0.2128 0.2124 0.10548 0.2704 0.2698
10 0.2559 0.0923 0.05510 0.3439 0.1240
11 0.2768 0.2131 0.13763 0.3827 0.2947
12 0.1756 0.0848 0.03474 0.2129 0.1029
13 0.0926 0.1556 0.03364 0.1021 0.1715
14 0.2033 0.0485 0.02301 0.2551 0.0609
15 0.4379 0.0168 0.01717 0.7789 0.0299
16 0.0932 0.0917 0.01995 0.1028 0.1012
17 0.2638 0.0668 0.04109 0.3583 0.0907
18 0.1969 0.0213 0.00978 0.2451 0.0265
19 0.3102 0.0150 0.01088 0.4497 0.0218
20 0.1747 0.1386 0.05651 0.2117 0.1679
21 0.6017 0.2129 0.29893 1.5107 0.5346
22 0.4220 0.1444 0.14223 0.7302 0.2499
23 0.4737 0.1119 0.12364 0.9001 0.2125
24 0.3005 0.1197 0.08395 0.4297 0.1712
25 0.3250 0.4486 0.34018 0.4815 0.6646
26 0.2875 0.1307 0.08767 0.4035 0.1834
27 0.1421 0.0157 0.00519 0.1657 0.0182
28 0.7408 0.0167 0.02889 2.8583 0.0645
29 0.3058 0.1606 0.11458 0.4406 0.2313
30 0.2946 0.1552 0.10670 0.4177 0.2200
> influencePlot(Sake.mod, id.n=3, type="cookd")
       H      Q  CookD     L      R
1  0.812 0.5757 1.0903 4.309 3.0564
21 0.602 0.2129 0.2989 1.511 0.5346
25 0.325 0.4486 0.3402 0.481 0.6646
28 0.741 0.0167 0.0289 2.858 0.0645
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("influencePlot.mlm")
> ### * influencePlot.mlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: influencePlot.mlm
> ### Title: Influence Plots for Multivariate Linear Models
> ### Aliases: influencePlot.mlm
> ### Keywords: models multivariate regression
> 
> ### ** Examples
> 
> 
> data(Rohwer, package="heplots")
> Rohwer2 <- subset(Rohwer, subset=group==2)
> Rohwer.mod <- lm(cbind(SAT, PPVT, Raven) ~ n+s+ns+na+ss, data=Rohwer2)
> 
> influencePlot(Rohwer.mod, id.n=4, type="stres")
       H      Q  CookD     L      R
42 0.568 0.3439 0.8467 1.316 0.7964
47 0.452 0.0324 0.0634 0.824 0.0591
51 0.126 0.2997 0.1643 0.145 0.3431
52 0.332 0.0105 0.0152 0.498 0.0158
62 0.157 0.3820 0.2601 0.186 0.4532
64 0.367 0.2128 0.3387 0.580 0.3363
66 0.304 0.2295 0.3026 0.437 0.3299
> influencePlot(Rohwer.mod, id.n=4, type="LR")
       H      Q  CookD     L      R
42 0.568 0.3439 0.8467 1.316 0.7964
47 0.452 0.0324 0.0634 0.824 0.0591
51 0.126 0.2997 0.1643 0.145 0.3431
52 0.332 0.0105 0.0152 0.498 0.0158
62 0.157 0.3820 0.2601 0.186 0.4532
64 0.367 0.2128 0.3387 0.580 0.3363
66 0.304 0.2295 0.3026 0.437 0.3299
> influencePlot(Rohwer.mod, id.n=4, type="cookd")
       H      Q  CookD     L      R
42 0.568 0.3439 0.8467 1.316 0.7964
47 0.452 0.0324 0.0634 0.824 0.0591
51 0.126 0.2997 0.1643 0.145 0.3431
52 0.332 0.0105 0.0152 0.498 0.0158
62 0.157 0.3820 0.2601 0.186 0.4532
64 0.367 0.2128 0.3387 0.580 0.3363
66 0.304 0.2295 0.3026 0.437 0.3299
> 
> # Sake data
> data(Sake, package="heplots")
> 	Sake.mod <- lm(cbind(taste,smell) ~ ., data=Sake)
> 	influencePlot(Sake.mod, id.n=3, type="stres")
       H      Q  CookD     L      R
1  0.812 0.5757 1.0903 4.309 3.0564
21 0.602 0.2129 0.2989 1.511 0.5346
25 0.325 0.4486 0.3402 0.481 0.6646
28 0.741 0.0167 0.0289 2.858 0.0645
> 	influencePlot(Sake.mod, id.n=3, type="LR")
       H      Q  CookD     L      R
1  0.812 0.5757 1.0903 4.309 3.0564
21 0.602 0.2129 0.2989 1.511 0.5346
25 0.325 0.4486 0.3402 0.481 0.6646
28 0.741 0.0167 0.0289 2.858 0.0645
> 	influencePlot(Sake.mod, id.n=3, type="cookd")
       H      Q  CookD     L      R
1  0.812 0.5757 1.0903 4.309 3.0564
21 0.602 0.2129 0.2989 1.511 0.5346
25 0.325 0.4486 0.3402 0.481 0.6646
28 0.741 0.0167 0.0289 2.858 0.0645
> 
> # Adopted data	
> data(Adopted, package="heplots")
> Adopted.mod <- lm(cbind(Age2IQ, Age4IQ, Age8IQ, Age13IQ) ~ AMED + BMIQ, data=Adopted)
> influencePlot(Adopted.mod, id.n=3)
        H      Q CookD      L     R
12 0.1315 0.1057 0.273 0.1514 0.122
37 0.0599 0.1469 0.173 0.0638 0.156
44 0.1414 0.0978 0.272 0.1648 0.114
45 0.1986 0.1313 0.513 0.2479 0.164
51 0.0857 0.1669 0.281 0.0938 0.182
> influencePlot(Adopted.mod, id.n=3, type="LR", ylim=c(-4,-1.5))
        H      Q CookD      L     R
12 0.1315 0.1057 0.273 0.1514 0.122
37 0.0599 0.1469 0.173 0.0638 0.156
44 0.1414 0.0978 0.272 0.1648 0.114
45 0.1986 0.1313 0.513 0.2479 0.164
51 0.0857 0.1669 0.281 0.0938 0.182
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("lrPlot")
> ### * lrPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lrPlot
> ### Title: Regression LR Influence Plot
> ### Aliases: lrPlot lrPlot.lm
> ### Keywords: regression
> 
> ### ** Examples
> 
> 
> # artificial example from Lawrence (1995)
> x <- c( 0, 0, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 18, 18 )
> y <- c( 0, 6, 6, 7, 6, 7, 6, 7, 6,  7,  6,  7,  7,  18 )
> DF <- data.frame(x,y, row.names=LETTERS[1:length(x)])
> DF
   x  y
A  0  0
B  0  6
C  7  6
D  7  7
E  8  6
F  8  7
G  9  6
H  9  7
I 10  6
J 10  7
K 11  6
L 11  7
M 18  7
N 18 18
> 
> with(DF, {
+ 	plot(x,y, pch=16, cex=1.3)
+ 	abline(lm(y~x), col="red", lwd=2)
+ 	NB <- c(1,2,13,14)
+ 	text(x[NB],y[NB], LETTERS[NB], pos=c(4,4,2,2))
+ 	}
+ )
> 
> mod <- lm(y~x, data=DF)
> # standard influence plot from car
> influencePlot(mod, id.n=4)
Warning in plot.window(...) : "id.n" is not a graphical parameter
Warning in plot.xy(xy, type, ...) : "id.n" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "id.n" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "id.n" is not a graphical parameter
Warning in box(...) : "id.n" is not a graphical parameter
Warning in title(...) : "id.n" is not a graphical parameter
Warning in plot.xy(xy.coords(x, y), type = type, ...) :
  "id.n" is not a graphical parameter
  StudRes   Hat CookD
B    1.70 0.307 0.553
M   -2.16 0.307 0.793
N    5.16 0.307 1.879
> 
> # lrPlot version
> lrPlot(mod, id.n=4)
Note: 7 points less than R= -2 have been clipped to preserve resolution
  Rstudent   Hat CookD     L      R
A    -1.05 0.307 0.240 -1.51 0.0884
B     1.70 0.307 0.553 -1.51 1.0612
M    -2.16 0.307 0.793 -1.51 1.5427
N     5.16 0.307 1.879 -1.51 3.2807
> 
> 
> library(car)
> dmod <- lm(prestige ~ income + education, data = Duncan)
> influencePlot(dmod, id.n=3)
Warning in plot.window(...) : "id.n" is not a graphical parameter
Warning in plot.xy(xy, type, ...) : "id.n" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "id.n" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "id.n" is not a graphical parameter
Warning in box(...) : "id.n" is not a graphical parameter
Warning in title(...) : "id.n" is not a graphical parameter
Warning in plot.xy(xy.coords(x, y), type = type, ...) :
  "id.n" is not a graphical parameter
            StudRes    Hat CookD
minister      3.135 0.1731 0.566
reporter     -2.397 0.0544 0.099
conductor    -1.704 0.1945 0.224
RR.engineer   0.809 0.2691 0.081
> lrPlot(dmod, id.n=3)
Note: 11 points less than R= -3 have been clipped to preserve resolution
            Rstudent    Hat  CookD     L      R
minister       3.135 0.1731 0.5664 -2.66  2.285
reporter      -2.397 0.0544 0.0990 -3.95  1.748
conductor     -1.704 0.1945 0.2236 -2.52  1.066
contractor     2.044 0.0433 0.0585 -4.20  1.430
RR.engineer    0.809 0.2691 0.0810 -2.10 -0.424
> 
> 
> 
> 
> cleanEx()
> nameEx("mlm.influence")
> ### * mlm.influence
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlm.influence
> ### Title: Calculate Regression Deletion Diagnostics for Multivariate
> ###   Linear Models
> ### Aliases: mlm.influence
> ### Keywords: models multivariate regression
> 
> ### ** Examples
> 
> 
> Rohwer2 <- subset(Rohwer, subset=group==2)
> rownames(Rohwer2)<- 1:nrow(Rohwer2)
> Rohwer.mod <- lm(cbind(SAT, PPVT, Raven) ~ n+s+ns+na+ss, data=Rohwer2)
> Rohwer.mod

Call:
lm(formula = cbind(SAT, PPVT, Raven) ~ n + s + ns + na + ss, 
    data = Rohwer2)

Coefficients:
             SAT       PPVT      Raven   
(Intercept)  -28.4675   39.6971   13.2438
n              3.2571    0.0673    0.0593
s              2.9966    0.3700    0.4924
ns            -5.8591   -0.3744   -0.1640
na             5.6662    1.5230    0.1190
ss            -0.6227    0.4102   -0.1212

> influence(Rohwer.mod)
Multivariate influence statistics for model:
 lm(formula = cbind(SAT, PPVT, Raven) ~ n + s + ns + na + ss, 
    data = Rohwer2) 
 m=  1 case deletion diagnostics 
        H      Q   CookD      L      R
1  0.1670 0.1529 0.11067 0.2005 0.1836
2  0.2185 0.0378 0.03576 0.2795 0.0483
3  0.1417 0.1207 0.07411 0.1651 0.1406
4  0.0731 0.0204 0.00645 0.0789 0.0220
5  0.5682 0.3439 0.84672 1.3160 0.7964
6  0.1543 0.0218 0.01458 0.1825 0.0258
7  0.0453 0.1288 0.02530 0.0475 0.1349
8  0.1766 0.1930 0.14768 0.2145 0.2344
9  0.0513 0.1817 0.04040 0.0541 0.1915
10 0.4516 0.0324 0.06339 0.8235 0.0591
11 0.1454 0.0725 0.04568 0.1702 0.0848
12 0.1705 0.1574 0.11629 0.2056 0.1898
13 0.1037 0.0949 0.04267 0.1158 0.1059
14 0.1265 0.2997 0.16427 0.1448 0.3431
15 0.3325 0.0105 0.01519 0.4981 0.0158
16 0.3318 0.0823 0.11832 0.4966 0.1232
17 0.1732 0.1925 0.14448 0.2095 0.2328
18 0.2635 0.0497 0.05671 0.3578 0.0674
19 0.2984 0.1340 0.17321 0.4252 0.1909
20 0.0788 0.1093 0.03733 0.0855 0.1187
21 0.1402 0.2495 0.15164 0.1631 0.2902
22 0.1938 0.0479 0.04025 0.2404 0.0594
23 0.0446 0.1572 0.03036 0.0466 0.1646
24 0.2064 0.0815 0.07294 0.2601 0.1028
25 0.1571 0.3820 0.26008 0.1864 0.4532
26 0.1533 0.0641 0.04261 0.1811 0.0757
27 0.3673 0.2128 0.33866 0.5804 0.3363
28 0.1119 0.0706 0.03422 0.1260 0.0795
29 0.3043 0.2295 0.30260 0.4373 0.3299
30 0.0866 0.1201 0.04505 0.0948 0.1315
31 0.0892 0.2524 0.09758 0.0980 0.2771
32 0.0732 0.1735 0.05503 0.0790 0.1872
> 
> # extract the most influential cases
> influence(Rohwer.mod) |> 
+     as.data.frame() |> 
+     dplyr::arrange(dplyr::desc(CookD)) |> 
+     head()
       H     Q CookD     L     R
5  0.568 0.344 0.847 1.316 0.796
27 0.367 0.213 0.339 0.580 0.336
29 0.304 0.229 0.303 0.437 0.330
25 0.157 0.382 0.260 0.186 0.453
19 0.298 0.134 0.173 0.425 0.191
14 0.126 0.300 0.164 0.145 0.343
> 
> # Sake data
> Sake.mod <- lm(cbind(taste,smell) ~ ., data=Sake)
> influence(Sake.mod) |>
+     as.data.frame() |> 
+     dplyr::arrange(dplyr::desc(CookD)) |> head()
       H     Q CookD     L     R
1  0.812 0.576 1.090 4.309 3.056
25 0.325 0.449 0.340 0.481 0.665
21 0.602 0.213 0.299 1.511 0.535
5  0.195 0.407 0.186 0.243 0.506
22 0.422 0.144 0.142 0.730 0.250
11 0.277 0.213 0.138 0.383 0.295
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("mpower")
> ### * mpower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mpower
> ### Title: General Matrix Power
> ### Aliases: mpower %^%
> ### Keywords: array
> 
> ### ** Examples
> 
> 
> M <- matrix(sample(1:9), 3,3)
> mpower(M,2)
     [,1] [,2] [,3]
[1,]  106   29   50
[2,]  100   56   68
[3,]  122   49   94
> mpower(M,4)
      [,1]  [,2]  [,3]
[1,] 20236  7148 11972
[2,] 24496  9368 15200
[3,] 29300 10888 18268
> 
> # make a symmetric matrix
> MM <- crossprod(M)
> mpower(MM, -1)
        [,1]    [,2]    [,3]
[1,]  0.0212 -0.0154 -0.0126
[2,] -0.0154  0.0718 -0.0211
[3,] -0.0126 -0.0211  0.0329
> Mhalf <- mpower(MM, 1/2)
> all.equal(MM, Mhalf %*% Mhalf)
[1] TRUE
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("print.inflmlm")
> ### * print.inflmlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.inflmlm
> ### Title: Print an inflmlm object
> ### Aliases: print.inflmlm
> 
> ### ** Examples
> 
> # none
> 
> 
> 
> 
> cleanEx()
> nameEx("tr")
> ### * tr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tr
> ### Title: Matrix trace
> ### Aliases: tr
> ### Keywords: array
> 
> ### ** Examples
> 
> 
> M <- matrix(sample(1:9), 3,3)
> tr(M)
[1] 16
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.87 0.22 1.15 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
