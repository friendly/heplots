
R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ICSClust"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('ICSClust')
Loading required package: ICS
Warning: package 'ICS' was built under R version 4.4.3
Loading required package: mvtnorm
Warning: package 'mvtnorm' was built under R version 4.4.3
Loading required package: ggplot2
Warning: package 'ggplot2' was built under R version 4.4.3
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ICSClust")
> ### * ICSClust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ICSClust
> ### Title: Tandem clustering with ICS
> ### Aliases: ICSClust
> 
> ### ** Examples
> 
> X <- iris[,1:4]
> 
> # indicating the number of components to retain for the dimension reduction
> # step as well as the number of clusters searched for.
> out <- ICSClust(X, nb_select = 2, nb_clusters = 3)
> summary(out)

ICS based on two scatter matrices
S1: COV
S2: COV4

The generalized kurtosis measures of the components are:
  IC.1   IC.2   IC.3   IC.4 
1.2074 1.0269 0.9292 0.7405 

The coefficient matrix of the linear transformation is:
     Sepal.Length Sepal.Width Petal.Length Petal.Width
IC.1     -0.52335      1.9933       2.3731     -4.4308
IC.2      0.83296      1.3275      -1.2666      2.7900
IC.3      3.05683     -2.2269      -1.6354      0.3654
IC.4      0.05244      0.6032      -0.3483     -0.3798

 2 components are selected: IC.4 IC.1

 3 clusters are identified:

 1  2  3 
44 57 49 
> plot(out)
> 
> # changing the scatter pair to consider in ICS
> out <- ICSClust(X, nb_select = 1, nb_clusters = 3,
+ ICS_args = list(S1 = ICS_mcd_raw, S2 = ICS_cov,S1_args = list(alpha = 0.5)))
> summary(out)

ICS based on two scatter matrices
S1: MCD
S2: COV

The generalized kurtosis measures of the components are:
  IC.1   IC.2   IC.3   IC.4 
7.7873 0.8922 0.5127 0.4021 

The coefficient matrix of the linear transformation is:
     Sepal.Length Sepal.Width Petal.Length Petal.Width
IC.1      0.11917       2.130      -1.7231       0.982
IC.2      0.04347       2.013       1.5762      -3.061
IC.3     -2.23512       1.286       1.8094      -1.896
IC.4     -0.47775       1.044      -0.4397       2.011

 1 components are selected: IC.1

 3 clusters are identified:

 1  2  3 
69 31 50 
> plot(out)
>  
> # changing the criterion for choosing the invariant coordinates
> out <- ICSClust(X, nb_clusters = 3, criterion = "normal_crit",
+ ICS_crit_args = list(level = 0.1, test = "anscombe.test", max_select = NULL))
> summary(out)

ICS based on two scatter matrices
S1: COV
S2: COV4

The generalized kurtosis measures of the components are:
  IC.1   IC.2   IC.3   IC.4 
1.2074 1.0269 0.9292 0.7405 

The coefficient matrix of the linear transformation is:
     Sepal.Length Sepal.Width Petal.Length Petal.Width
IC.1     -0.52335      1.9933       2.3731     -4.4308
IC.2      0.83296      1.3275      -1.2666      2.7900
IC.3      3.05683     -2.2269      -1.6354      0.3654
IC.4      0.05244      0.6032      -0.3483     -0.3798

 1 components are selected: IC.4

 3 clusters are identified:

 1  2  3 
49 51 50 
> plot(out)
> 
> # changing the clustering method
> out <- ICSClust(X, nb_clusters = 3, method  = "tkmeans_clust", 
+ clustering_args = list(alpha = 0.1))
> summary(out)

ICS based on two scatter matrices
S1: COV
S2: COV4

The generalized kurtosis measures of the components are:
  IC.1   IC.2   IC.3   IC.4 
1.2074 1.0269 0.9292 0.7405 

The coefficient matrix of the linear transformation is:
     Sepal.Length Sepal.Width Petal.Length Petal.Width
IC.1     -0.52335      1.9933       2.3731     -4.4308
IC.2      0.83296      1.3275      -1.2666      2.7900
IC.3      3.05683     -2.2269      -1.6354      0.3654
IC.4      0.05244      0.6032      -0.3483     -0.3798

 2 components are selected: IC.4 IC.1

 4 clusters are identified:

 0  1  2  3 
15 48 46 41 
> plot(out)
> 
> 
> 
> cleanEx()
> nameEx("component_plot")
> ### * component_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: component_plot
> ### Title: Scatterplot Matrix with densities on the diagonal
> ### Aliases: component_plot
> 
> ### ** Examples
> 
> X <- iris[,1:4]
> component_plot(X)
> out <- ICS(X)
> component_plot(out, select = c(1,4))
> 
> 
> 
> 
> cleanEx()
> nameEx("discriminatory_crit")
> ### * discriminatory_crit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: discriminatory_crit
> ### Title: Selection of ICS components based on discriminatory power
> ### Aliases: discriminatory_crit discriminatory_crit.ICS
> ###   discriminatory_crit.default
> 
> ### ** Examples
> 
> X <- iris[,-5]
> out <- ICS(X)
> discriminatory_crit(out, clusters = iris[,5], select_only = FALSE)
$crit
[1] "discriminatory"

$method
[1] "eta2"

$nb_select
[1] 2

$select
[1] "IC.3" "IC.4"

$power
IC.3,IC.4 
0.8018688 

$power_combinations
IC.1,IC.2 IC.1,IC.4 IC.3,IC.4 
0.1147591 0.7983092 0.8018688 

$gen_kurtosis
     IC.1      IC.2      IC.3      IC.4 
1.2073988 1.0269412 0.9292235 0.7404672 

attr(,"class")
[1] "ICS_crit"
> 
> 
> 
> cleanEx()
> nameEx("kmeans_clust")
> ### * kmeans_clust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kmeans_clust
> ### Title: _k_-means clustering
> ### Aliases: kmeans_clust
> 
> ### ** Examples
> 
> kmeans_clust(iris[,1:4], k = 3, clusters_only = TRUE)
  [1] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
 [38] 3 3 3 3 3 3 3 3 3 3 3 3 3 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [75] 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 2 2 2 1 2 2 2 2
[112] 2 2 1 1 2 2 2 2 1 2 1 2 1 2 2 1 1 2 2 2 2 2 1 2 2 2 2 1 2 2 2 1 2 2 2 1 2
[149] 2 1
> 
> 
> 
> 
> cleanEx()
> nameEx("mclust_clust")
> ### * mclust_clust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mclust_clust
> ### Title: Model-Based Clustering
> ### Aliases: mclust_clust rmclust_clust
> 
> ### ** Examples
> 
> mclust_clust(iris[,1:4], k = 3, clusters_only = TRUE)
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 2 3 2
 [75] 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3
[112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[149] 3 3
> 
> 
> 
> cleanEx()
> nameEx("med_crit")
> ### * med_crit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: med_crit
> ### Title: Selection of Invariant components using the med criterion
> ### Aliases: med_crit med_crit.ICS med_crit.default
> 
> ### ** Examples
> 
> X <- iris[,-5]
> out <- ICS(X)
> med_crit(out, nb_select = 2, select_only = FALSE)
$crit
[1] "med"

$nb_select
[1] 2

$gen_kurtosis
     IC.1      IC.2      IC.3      IC.4 
1.2073988 1.0269412 0.9292235 0.7404672 

$med_gen_kurtosis
[1] 0.9780823

$gen_kurtosis_diff_med
      IC.1       IC.2       IC.3       IC.4 
0.22931644 0.04885885 0.04885885 0.23761513 

$select
[1] "IC.4" "IC.1"

attr(,"class")
[1] "ICS_crit"
> 
> 
> 
> cleanEx()
> nameEx("mixture_sim")
> ### * mixture_sim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mixture_sim
> ### Title: Simulation of a mixture of Gaussian distributions
> ### Aliases: mixture_sim
> 
> ### ** Examples
> 
> X <- mixture_sim()
> summary(X)
   cluster                X1                X2                 X3          
 Length:500         Min.   :-2.5923   Min.   :-3.67130   Min.   :-2.97226  
 Class :character   1st Qu.:-0.1647   1st Qu.:-0.60407   1st Qu.:-0.70891  
 Mode  :character   Median : 4.9240   Median : 0.04937   Median : 0.02030  
                    Mean   : 4.9761   Mean   : 0.05013   Mean   : 0.04451  
                    3rd Qu.:10.0159   3rd Qu.: 0.77604   3rd Qu.: 0.78406  
                    Max.   :13.0645   Max.   : 2.86214   Max.   : 3.05574  
       X4                  X5                 X6                 X7          
 Min.   :-3.202110   Min.   :-3.21319   Min.   :-3.00805   Min.   :-2.99510  
 1st Qu.:-0.651968   1st Qu.:-0.60718   1st Qu.:-0.70744   1st Qu.:-0.76888  
 Median :-0.023335   Median : 0.06738   Median :-0.04533   Median :-0.01778  
 Mean   :-0.009739   Mean   : 0.01997   Mean   :-0.05367   Mean   :-0.03261  
 3rd Qu.: 0.693150   3rd Qu.: 0.64635   3rd Qu.: 0.60464   3rd Qu.: 0.71366  
 Max.   : 2.649167   Max.   : 3.81028   Max.   : 2.56509   Max.   : 3.15397  
       X8                 X9                X10           
 Min.   :-2.79596   Min.   :-2.97230   Min.   :-3.539586  
 1st Qu.:-0.61596   1st Qu.:-0.76166   1st Qu.:-0.664837  
 Median : 0.03788   Median :-0.10525   Median :-0.031595  
 Mean   : 0.05534   Mean   :-0.07803   Mean   :-0.003895  
 3rd Qu.: 0.77551   3rd Qu.: 0.65798   3rd Qu.: 0.599192  
 Max.   : 2.63413   Max.   : 2.71433   Max.   : 2.547228  
> 
> 
> 
> cleanEx()
> nameEx("normal_crit")
> ### * normal_crit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: normal_crit
> ### Title: Selection of Non-normal Invariant Components Using Marginal
> ###   Normality Tests
> ### Aliases: normal_crit normal_crit.ICS normal_crit.default
> 
> ### ** Examples
> 
> X <- iris[,-5]
> out <- ICS(X)
> normal_crit(out, level = 0.1, select_only = FALSE)
$crit
[1] "normal"

$level
[1] 0.1

$max_select
[1] 3

$test
[1] "agostino.test"

$pvalues
       IC.1        IC.2        IC.3        IC.4 
0.074928106 0.194602231 0.931122199 0.009422768 

$adjusted_levels
[1] 0.10 0.05

$select
[1] "IC.4"

$gen_kurtosis
     IC.1      IC.2      IC.3      IC.4 
1.2073988 1.0269412 0.9292235 0.7404672 

attr(,"class")
[1] "ICS_crit"
> 
> 
> 
> 
> cleanEx()
> nameEx("pam_clust")
> ### * pam_clust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pam_clust
> ### Title: Partitioning Around Medoids clustering
> ### Aliases: pam_clust
> 
> ### ** Examples
> 
> pam_clust(iris[,1:4], k = 3, clusters_only = TRUE)
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [75] 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 3 3 3 2 3 3 3 3
[112] 3 3 2 2 3 3 3 3 2 3 2 3 2 3 3 2 2 3 3 3 3 3 2 3 3 3 3 2 3 3 3 2 3 3 3 2 3
[149] 3 2
>  
> 
> 
> 
> cleanEx()
> nameEx("rimle_clust")
> ### * rimle_clust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rimle_clust
> ### Title: Robust Improper Maximum Likelihood Clustering
> ### Aliases: rimle_clust
> 
> ### ** Examples
> 
> rimle_clust(iris[,1:4], k = 3, clusters_only = TRUE)
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 2
 [75] 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3
[112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[149] 3 3
> 
> 
> 
> cleanEx()
> nameEx("runif_outside_range")
> ### * runif_outside_range
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runif_outside_range
> ### Title: Uniform distribution outside a given range
> ### Aliases: runif_outside_range
> 
> ### ** Examples
> 
> ## illustrations for argument 'mult'
> 
> # draw observations with argument 'mult = 2'
> xy2 <- runif_outside_range(1000, min = rep(-1, 2), max = rep(1, 2), 
+                            mult = 2)
> # each side of the larger hyperrectangle is twice as long as 
> # the corresponding side of the smaller rectanglar cut-out
> df2 <- data.frame(x = xy2[, 1], y = xy2[, 2])
> ggplot(data = df2, mapping = aes(x = x, y = y)) + 
+   geom_point()
> 
> # draw observations with argument 'mult = 4'
> xy4 <- runif_outside_range(1000, min = rep(-1, 2), max = rep(1, 2), 
+                            mult = 4)
> # each side of the larger hyperrectangle is four times as long 
> # as the corresponding side of the smaller rectanglar cut-out
> df4 <- data.frame(x = xy4[, 1], y = xy4[, 2])
> ggplot(data = df4, mapping = aes(x = x, y = y)) + 
+   geom_point()
> 
> 
> 
> 
> cleanEx()
> nameEx("select_plot")
> ### * select_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select_plot
> ### Title: Plot of the Generalized Kurtosis Values of the ICS
> ###   Transformation
> ### Aliases: select_plot select_plot.default select_plot.data.frame
> ###   select_plot.ICS_crit
> 
> ### ** Examples
> 
> X <- iris[,-5]
> out <- ICS(X)
> 
> # on an ICS object
> select_plot(out)
> select_plot(out, type = "lines")
> 
> # on an ICS_crit object 
> # median criterion
> out_med <- med_crit(out, nb_select = 1, select_only = FALSE)
> select_plot(out_med, type = "lines")
> select_plot(out_med, screeplot = FALSE, type = "lines", 
+ color = "lightblue")
> 
> # discriminatory criterion
> out_disc <- discriminatory_crit(out, clusters = iris[,5], 
+  select_only = FALSE)
> select_plot(out_disc)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("tkmeans_clust")
> ### * tkmeans_clust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tkmeans_clust
> ### Title: Trimmed k-means clustering
> ### Aliases: tkmeans_clust
> 
> ### ** Examples
> 
> tkmeans_clust(iris[,1:4], k = 3, alpha = 0.1, clusters_only = TRUE)
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [38] 1 1 1 1 0 1 1 1 1 1 1 1 1 2 3 2 3 3 3 2 0 3 3 0 3 3 3 3 3 3 3 3 3 2 3 2 3
 [75] 3 3 2 2 3 3 3 3 3 2 3 3 2 3 3 3 3 3 3 0 3 3 3 3 0 3 2 2 2 2 2 0 3 0 2 0 2
[112] 2 2 2 2 2 2 0 0 3 2 2 0 2 2 2 2 2 2 2 0 0 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2
[149] 2 2
> 
> 
> 
> cleanEx()
> nameEx("var_crit")
> ### * var_crit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: var_crit
> ### Title: Selection of Invariant components using the var criterion
> ### Aliases: var_crit var_crit.ICS var_crit.default
> 
> ### ** Examples
> 
> X <- iris[,-5]
> out <- ICS(X)
> var_crit(out, nb_select = 2, select_only = FALSE)
$crit
[1] "var"

$nb_select
[1] 2

$gen_kurtosis
     IC.1      IC.2      IC.3      IC.4 
1.2073988 1.0269412 0.9292235 0.7404672 

$select
[1] "IC.1" "IC.4"

$RollVarX
[1] 0.016282470 0.004774375 0.017814467

$Order
[1] 1 4 2 3

attr(,"class")
[1] "ICS_crit"
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.45 0.41 4.86 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
