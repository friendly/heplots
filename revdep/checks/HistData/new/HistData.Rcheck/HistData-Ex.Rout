
R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "HistData"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('HistData')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Arbuthnot")
> ### * Arbuthnot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Arbuthnot
> ### Title: Arbuthnot's data on male and female birth ratios
> ### Aliases: Arbuthnot
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Arbuthnot)
> # plot the sex ratios
> with(Arbuthnot, plot(Year,Ratio, type='b', ylim=c(1, 1.20), ylab="Sex Ratio (M/F)"))
> abline(h=1, col="red")
> #  add loess smooth
> Arb.smooth <- with(Arbuthnot, loess.smooth(Year,Ratio))
> lines(Arb.smooth$x, Arb.smooth$y, col="blue", lwd=2)
> 
> # plot the total christenings to observe the anomalie in 1704
> with(Arbuthnot, plot(Year,Total, type='b', ylab="Total Christenings"))
> 
> 
> 
> cleanEx()
> nameEx("Armada")
> ### * Armada
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Armada
> ### Title: La Felicisima Armada
> ### Aliases: Armada
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Armada)
> # delete character and redundant variable
> armada <- Armada[,-c(1,6)]
> # use fleet as labels
> fleet <- Armada[, 1]
> 
> # do a PCA of the standardized data
> armada.pca <- prcomp(armada, scale.=TRUE)
> summary(armada.pca)
Importance of components:
                          PC1    PC2     PC3     PC4     PC5     PC6     PC7
Standard deviation     2.5688 1.1100 0.76352 0.52515 0.42582 0.29774 0.18390
Proportion of Variance 0.7332 0.1369 0.06477 0.03064 0.02015 0.00985 0.00376
Cumulative Proportion  0.7332 0.8701 0.93486 0.96551 0.98565 0.99550 0.99926
                          PC8     PC9
Standard deviation     0.0794 0.01885
Proportion of Variance 0.0007 0.00004
Cumulative Proportion  1.0000 1.00000
> 
> # screeplot
> plot(armada.pca, type="lines", pch=16, cex=2)
> 
> biplot(armada.pca, xlabs = fleet,
+   xlab = "PC1 (Fleet size)",
+   ylab = "PC2 (Fleet configuration)")
> 
> 
> 
> cleanEx()
> nameEx("Bowley")
> ### * Bowley
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Bowley
> ### Title: Bowley's data on values of British and Irish trade, 1855-1899
> ### Aliases: Bowley
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Bowley)
> 
> # plot the data 
> with(Bowley,plot(Year, Value, type='b', lwd=2, 
+ 	ylab="Value of British and Irish Exports",
+ 	main="Bowley's example of the method of smoothing curves"))
> 
> # find moving averages
> # simpler version using stats::filter
> running <- function(x, width = 5){
+   as.vector(stats::filter(x, rep(1 / width, width), sides = 2))
+   }
> 
> mav3<-running(Bowley$Value, width=3)
> mav5<-running(Bowley$Value, width=5)
> mav9<-running(Bowley$Value, width=9)
> lines(Bowley$Year, mav3, col='blue', lty=2)
> lines(Bowley$Year, mav5, col='green3', lty=3)
> lines(Bowley$Year, mav9, col='brown', lty=4)
> 
> # add lowess smooth
> lines(lowess(Bowley), col='red', lwd=2)
> 
> # Initial version, using ggplot
> library(ggplot2)
Warning: package 'ggplot2' was built under R version 4.4.3
> ggplot(aes(x=Year, y=Value), data=Bowley) +
+   geom_point() +
+   geom_smooth(method="loess", formula=y~x)
> 
> 
> 
> cleanEx()

detaching 'package:ggplot2'

> nameEx("Breslau")
> ### * Breslau
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Breslau
> ### Title: Halley's Breslau Life Table
> ### Aliases: Breslau
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Breslau)
> 
> # Reproduce Figure 1 in Bellhouse (2011)
> # He excluded age < 5 and made a point of the over-representation of deaths in quinquennial years.
> library(ggplot2)
Warning: package 'ggplot2' was built under R version 4.4.3
> library(dplyr, warn.conflicts = FALSE)
Warning: package 'dplyr' was built under R version 4.4.3
> Breslau5 <- Breslau |>
+   filter(age >= 5) |>
+   mutate(div5 = factor(age %% 5 == 0))
> 
> ggplot(Breslau5, aes(x=age, y=total), size=1.5) +
+   geom_point(aes(color=div5)) +
+   scale_color_manual(labels = c(FALSE, TRUE), 
+                      values = c("blue", "red")) +
+   guides(color=guide_legend("Age divisible by 5")) +
+   theme(legend.position = "top") +
+   labs(x = "Age current at death",
+        y = "Total number of deaths") +
+   theme_bw()
> 
> 
> 
> 
> cleanEx()

detaching 'package:dplyr', 'package:ggplot2'

> nameEx("Cavendish")
> ### * Cavendish
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Cavendish
> ### Title: Cavendish's Determinations of the Density of the Earth
> ### Aliases: Cavendish
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Cavendish)
> summary(Cavendish)
    density         density2        density3    
 Min.   :4.880   Min.   :5.070   Min.   :5.100  
 1st Qu.:5.300   1st Qu.:5.340   1st Qu.:5.340  
 Median :5.460   Median :5.470   Median :5.460  
 Mean   :5.448   Mean   :5.482   Mean   :5.483  
 3rd Qu.:5.610   3rd Qu.:5.620   3rd Qu.:5.625  
 Max.   :5.850   Max.   :5.880   Max.   :5.850  
                                 NA's   :6      
> boxplot(Cavendish, ylab='Density', xlab='Data set')
> abline(h=5.517, col="red", lwd=2)
> 
> # trimmed means
> sapply(Cavendish, mean, trim=.1, na.rm=TRUE)
 density density2 density3 
5.456000 5.483600 5.479474 
> 
> # express in terms of G
> G <- function(D, g=9.806, R=6371) 3*g / (4 * pi * R * D)
>  
> boxplot(10^5 * G(Cavendish), ylab='~ Gravitational constant (G)', xlab='Data set')
> abline(h=10^5 * G(5.517), col="red", lwd=2)
> 
> 
> 
> 
> cleanEx()
> nameEx("ChestSizes")
> ### * ChestSizes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ChestSizes
> ### Title: Chest measurements of Scottish Militiamen
> ### Aliases: ChestSizes ChestStigler
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(ChestSizes)
> 
> # frequency polygon
> plot(ChestSizes, type='b')
> # barplot
> barplot(ChestSizes[,2], ylab="Frequency", xlab="Chest size")
> 
> # calculate expected frequencies under normality, chest ~ N(xbar, std)
> n_obs <- sum(ChestSizes$count)
> xbar  <- with(ChestSizes, weighted.mean(chest, count))
> std   <- with(ChestSizes, sd(rep(chest, count)))
> 
> expected <- 
+ with(ChestSizes, diff(pnorm(c(32, chest) + .5, xbar, std)) * sum(count))
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("Cholera")
> ### * Cholera
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Cholera
> ### Title: William Farr's Data on Cholera in London, 1849
> ### Aliases: Cholera
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Cholera)
> 
> # plot cholera deaths vs. elevation
> plot(cholera_drate ~ elevation, data=Cholera, 
+ 	pch=16, cex.lab=1.2, cex=1.2,
+ 	xlab="Elevation above high water mark (ft)",
+ 	ylab="Deaths from cholera in 1849 per 10,000")
> 
> # Farr's mortality ~ 1/ elevation law
> elev <- c(0, 10, 30, 50, 70, 90, 100, 350)
> mort <- c(174, 99, 53, 34, 27, 22, 20, 6)
> lines(mort ~ elev, lwd=2, col="blue")
> 
> # better plots, using car::scatterplot
> 
> if(require("car", quietly=TRUE)) {
+ # show separate regression lines for each water supply
+   scatterplot(cholera_drate ~ elevation | water, data=Cholera, 
+               smooth=FALSE, pch=15:17,
+               id=list(n=2, labels=sub(",.*", "", Cholera$district)),
+               col=c("red", "darkgreen", "blue"),
+               legend=list(coords="topleft", title="Water supply"),
+               xlab="Elevation above high water mark (ft)",
+               ylab="Deaths from cholera in 1849 per 10,000")
+   
+   scatterplot(cholera_drate ~ poor_rate | water, data=Cholera, 
+               smooth=FALSE, pch=15:17,
+               id=list(n=2, labels=sub(",.*", "", Cholera$district)),
+               col=c("red", "darkgreen", "blue"),
+               legend=list(coords="topleft", title="Water supply"),
+               xlab="Poor rate per pound of house value",
+               ylab="Deaths from cholera in 1849 per 10,000")
+   }
Warning: package 'car' was built under R version 4.4.3
Warning: package 'carData' was built under R version 4.4.3
             Hammersmith Hanover Square & Mayfair      St George Southwark 
                       1                        3                        4 
             West London            Bethnal Green                  Chelsea 
                       5                        9                       10 
> 
> # fit a logistic regression model a la Bingham etal.
> fit <- glm( cbind(cholera_deaths, popn) ~ 
+             water + elevation + poor_rate + annual_deaths +
+             pop_dens + persons_house,
+             data=Cholera, family=binomial)
> summary(fit)

Call:
glm(formula = cbind(cholera_deaths, popn) ~ water + elevation + 
    poor_rate + annual_deaths + pop_dens + persons_house, family = binomial, 
    data = Cholera)

Coefficients:
                 Estimate Std. Error z value Pr(>|z|)    
(Intercept)    -5.1293609  0.1042127 -49.220  < 2e-16 ***
waterNew River -0.5201675  0.0249913 -20.814  < 2e-16 ***
waterKew       -0.9171423  0.0502833 -18.240  < 2e-16 ***
elevation      -0.0096775  0.0006030 -16.049  < 2e-16 ***
poor_rate       8.8410946  0.4027480  21.952  < 2e-16 ***
annual_deaths   0.0001616  0.0004751   0.340    0.734    
pop_dens        0.0008362  0.0001700   4.919 8.68e-07 ***
persons_house  -0.0089920  0.0123204  -0.730    0.465    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 6959.0  on 37  degrees of freedom
Residual deviance: 1054.5  on 30  degrees of freedom
AIC: 1349

Number of Fisher Scoring iterations: 4

> 
> # odds ratios
> cbind( OR = exp(coef(fit))[-1], exp(confint(fit))[-1,] )
Waiting for profiling to be done...
                         OR        2.5 %       97.5 %
waterNew River    0.5944210    0.5659523 6.242020e-01
waterKew          0.3996595    0.3618617 4.407120e-01
elevation         0.9903692    0.9891942 9.915349e-01
poor_rate      6912.5550001 3134.9232272 1.520140e+04
annual_deaths     1.0001616    0.9992299 1.001093e+00
pop_dens          1.0008365    1.0005029 1.001170e+00
persons_house     0.9910483    0.9673772 1.015244e+00
> 
> if (require(effects)) {
+   eff <- allEffects(fit)
+   plot(eff)
+ }
Loading required package: effects
Warning: package 'effects' was built under R version 4.4.3
lattice theme set by effectsTheme()
See ?effectsTheme for details.
> 
> 
> 
> 
> cleanEx()

detaching 'package:effects', 'package:car', 'package:carData'

> nameEx("CholeraDeaths1849")
> ### * CholeraDeaths1849
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CholeraDeaths1849
> ### Title: Daily Deaths from Cholera and Diarrhaea in England, 1849
> ### Aliases: CholeraDeaths1849
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(CholeraDeaths1849)
> str(CholeraDeaths1849)
tibble [730 × 6] (S3: tbl_df/tbl/data.frame)
 $ month         : chr [1:730] "Jan" "Jan" "Jan" "Jan" ...
 $ cause_of_death: Factor w/ 2 levels "Cholera","Diarrhaea": 1 1 1 1 1 1 1 1 1 1 ...
 $ day_of_month  : chr [1:730] "1" "2" "3" "4" ...
 $ deaths        : num [1:730] 13 19 28 24 23 39 25 35 26 23 ...
 $ date          : Date[1:730], format: "1849-01-01" "1849-01-02" ...
 $ day_of_week   : Ord.factor w/ 7 levels "Mon"<"Tue"<"Wed"<..: 1 2 3 4 5 6 7 1 2 3 ...
> 
> # Reproduce Farr's (1852) plate 2
> library(ggplot2)
Warning: package 'ggplot2' was built under R version 4.4.3
> CholeraDeaths1849  |>
+   ggplot(aes(x = date, y = deaths, colour = cause_of_death)) +
+   geom_line(linewidth = 1.2) +
+   theme_bw(base_size = 14) +
+   theme(legend.position = "top")
> 
> 
> 
> 
> cleanEx()

detaching 'package:ggplot2'

> nameEx("CushnyPeebles")
> ### * CushnyPeebles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CushnyPeebles
> ### Title: Cushny-Peebles Data: Soporific Effects of Scopolamine
> ###   Derivatives
> ### Aliases: CushnyPeebles CushnyPeeblesN
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(CushnyPeebles)
> # quick looks at the data
> plot(CushnyPeebles)
> boxplot(CushnyPeebles, ylab="Hours of Sleep", xlab="Treatment")
> 
> ##########################
> # Repeated measures MANOVA
> 
> CPmod <- lm(cbind(Control, L_hyoscyamine, L_hyoscine, DL_hyoscine) ~ 1, data=CushnyPeebles)
> 
> # Assign within-S factor and contrasts
> Treatment <- factor(colnames(CushnyPeebles), levels=colnames(CushnyPeebles))
> contrasts(Treatment) <- matrix(
+ 	c(-3, 1, 1, 1,
+ 	   0,-2, 1, 1,
+ 	   0, 0,-1, 1), ncol=3)
> colnames(contrasts(Treatment)) <- c("Control.Drug", "L.DL", "L_hy.DL_hy")
> 
> Treats <- data.frame(Treatment)
> if (require(car)) {
+ (CPaov <- Anova(CPmod, idata=Treats, idesign= ~Treatment))
+ }
Loading required package: car
Warning: package 'car' was built under R version 4.4.3
Loading required package: carData
Warning: package 'carData' was built under R version 4.4.3
Note: model has only an intercept; equivalent type-III tests substituted.

Type III Repeated Measures MANOVA Tests: Pillai test statistic
            Df test stat approx F num Df den Df    Pr(>F)    
(Intercept)  1   0.90437   85.113      1      9 6.969e-06 ***
Treatment    1   0.70354    5.537      3      7   0.02896 *  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> summary(CPaov, univariate=FALSE)

Type III Repeated Measures MANOVA Tests:

------------------------------------------
 
Term: (Intercept) 

 Response transformation matrix:
              (Intercept)
Control                 1
L_hyoscyamine           1
L_hyoscine              1
DL_hyoscine             1

Sum of squares and products for the hypothesis:
            (Intercept)
(Intercept)      3385.6

Multivariate Tests: (Intercept)
                 Df test stat approx F num Df den Df     Pr(>F)    
Pillai            1  0.904370 85.11285      1      9 6.9692e-06 ***
Wilks             1  0.095630 85.11285      1      9 6.9692e-06 ***
Hotelling-Lawley  1  9.456983 85.11285      1      9 6.9692e-06 ***
Roy               1  9.456983 85.11285      1      9 6.9692e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

------------------------------------------
 
Term: Treatment 

 Response transformation matrix:
              TreatmentControl.Drug TreatmentL.DL TreatmentL_hy.DL_hy
Control                          -3             0                   0
L_hyoscyamine                     1            -2                   0
L_hyoscine                        1             1                  -1
DL_hyoscine                       1             1                   1

Sum of squares and products for the hypothesis:
                      TreatmentControl.Drug TreatmentL.DL TreatmentL_hy.DL_hy
TreatmentControl.Drug                291.60       170.100              -0.540
TreatmentL.DL                        170.10        99.225              -0.315
TreatmentL_hy.DL_hy                   -0.54        -0.315               0.001

Multivariate Tests: Treatment
                 Df test stat approx F num Df den Df   Pr(>F)  
Pillai            1 0.7035419  5.53737      3      7 0.028955 *
Wilks             1 0.2964581  5.53737      3      7 0.028955 *
Hotelling-Lawley  1 2.3731584  5.53737      3      7 0.028955 *
Roy               1 2.3731584  5.53737      3      7 0.028955 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> if (require(heplots)) {
+   heplot(CPmod, idata=Treats, idesign= ~Treatment, iterm="Treatment", 
+ 	xlab="Control vs Drugs", ylab="L vs DL drug")
+   pairs(CPmod, idata=Treats, idesign= ~Treatment, iterm="Treatment")
+ }
Loading required package: heplots
Loading required package: broom
Warning: package 'broom' was built under R version 4.4.3
Note: model has only an intercept; equivalent type-III tests substituted.
Note: model has only an intercept; equivalent type-III tests substituted.
> 
> ################################
> # reshape to long format, add Ns
> 
> CPlong <- stack(CushnyPeebles)[,2:1]
> colnames(CPlong) <- c("treatment", "sleep")
> CPN <- stack(CushnyPeeblesN)
> CPlong <- data.frame(patient=rep(1:11,4), CPlong, n=CPN$values)
> str(CPlong)
'data.frame':	44 obs. of  4 variables:
 $ patient  : int  1 2 3 4 5 6 7 8 9 10 ...
 $ treatment: Factor w/ 4 levels "Control","L_hyoscyamine",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ sleep    : num  0.6 3 4.7 5.5 6.2 3.2 2.5 2.8 1.1 2.9 ...
 $ n        : int  9 9 8 9 9 8 8 7 8 9 ...
> 
> 
> 
> 
> cleanEx()

detaching 'package:heplots', 'package:broom', 'package:car',
  'package:carData'

> nameEx("Dactyl")
> ### * Dactyl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Dactyl
> ### Title: Edgeworth's counts of dactyls in Virgil's Aeneid
> ### Aliases: Dactyl
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Dactyl)
> 
> # display the basic table
> xtabs(count ~ Foot+Lines, data=Dactyl)
    Lines
Foot 1:5 6:10 11:15 16:20 21:25 26:30 31:35 36:40 41:45 46:50 51:55 56:60 61:65
   1   3    3     5     5     4     4     2     2     2     1     2     4     3
   2   1    4     0     3     3     3     5     2     2     4     3     1     2
   3   1    2     4     2     5     2     1     2     2     2     0     2     2
   4   2    2     1     0     3     1     2     0     2     1     1     2     1
    Lines
Foot 66:70 71:75
   1     2     4
   2     3     2
   3     0     1
   4     1     0
> 
> # simple two-way anova
> anova(dact.lm <- lm(count ~ Foot+Lines, data=Dactyl))
Analysis of Variance Table

Response: count
          Df Sum Sq Mean Sq F value    Pr(>F)    
Foot       3 27.650  9.2167  6.5499 0.0009826 ***
Lines     14 20.233  1.4452  1.0271 0.4467408    
Residuals 42 59.100  1.4071                      
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> # plot the lm-quartet
> op <- par(mfrow=c(2,2))
> plot(dact.lm)
> par(op)
> 
> # show table as a simple mosaicplot
> mosaicplot(xtabs(count ~ Foot+Lines, data=Dactyl), shade=TRUE)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("DrinksWages")
> ### * DrinksWages
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DrinksWages
> ### Title: Elderton and Pearson's (1910) data on drinking and wages
> ### Aliases: DrinksWages
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(DrinksWages)
> plot(DrinksWages) 
> 
> # plot proportion sober vs. wage | class
> with(DrinksWages, plot(wage, sober/n, col=c("blue","red","green")[class]))
> 
> # fit logistic regression model of sober on wage
> mod.sober <- glm(cbind(sober, n) ~ wage, family=binomial, data=DrinksWages)
> summary(mod.sober)

Call:
glm(formula = cbind(sober, n) ~ wage, family = binomial, data = DrinksWages)

Coefficients:
             Estimate Std. Error z value Pr(>|z|)   
(Intercept) -0.839963   0.323962  -2.593  0.00952 **
wage         0.001862   0.012811   0.145  0.88443   
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 44.717  on 69  degrees of freedom
Residual deviance: 44.696  on 68  degrees of freedom
AIC: 194.06

Number of Fisher Scoring iterations: 4

> op <- par(mfrow=c(2,2))
> plot(mod.sober)
> par(op)
> 
> # TODO: plot fitted model
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("EdgeworthDeaths")
> ### * EdgeworthDeaths
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EdgeworthDeaths
> ### Title: Edgeworth's Data on Death Rates in British Counties
> ### Aliases: EdgeworthDeaths
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(EdgeworthDeaths)
> 
> # fit the additive ANOVA model
> library(car)  # for Anova()
Warning: package 'car' was built under R version 4.4.3
Loading required package: carData
Warning: package 'carData' was built under R version 4.4.3
> EDmod <- lm(Freq ~ County + year, data=EdgeworthDeaths)
> Anova(EDmod)
Anova Table (Type II tests)

Response: Freq
          Sum Sq Df F value    Pr(>F)    
County     960.8  5  8.3234 5.005e-05 ***
year      3390.3  6 24.4761 2.665e-10 ***
Residuals  692.6 30                      
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> # now, consider as a two-way table of frequencies
> 
> library(vcd)
Warning: package 'vcd' was built under R version 4.4.3
Loading required package: grid
> library(MASS)
Warning: package 'MASS' was built under R version 4.4.3
> structable( ~ County + year, data=EdgeworthDeaths)
          year 1876 1877 1878 1879 1880 1881 1882
County                                           
Berks           175  172  187  186  181  153  169
Herts           174  165  185  184  176  166  163
Bucks           182  171  186  195  179  162  177
Oxford          179  182  194  183  180  169  167
Bedford         196  174  203  195  198  171  181
Cambridge       173  177  190  191  187  165  171
> loglm( Freq ~ County + year, data=EdgeworthDeaths)
Call:
loglm(formula = Freq ~ County + year, data = EdgeworthDeaths)

Statistics:
                      X^2 df P(> X^2)
Likelihood Ratio 3.853131 30        1
Pearson          3.850641 30        1
> 
> mosaic( ~ County + year, data=EdgeworthDeaths, 
+ 	shade=TRUE, legend=FALSE, labeling=labeling_values, 
+ 	gp=shading_Friendly)
> 
> 
> 
> 
> 
> cleanEx()

detaching 'package:MASS', 'package:vcd', 'package:grid', 'package:car',
  'package:carData'

> nameEx("Fingerprints")
> ### * Fingerprints
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Fingerprints
> ### Title: Waite's data on Patterns in Fingerprints
> ### Aliases: Fingerprints
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Fingerprints)
> xtabs(count ~ Whorls + Loops, data=Fingerprints)
      Loops
Whorls   0   1   2   3   4   5
     0  78 144 204 211 179  45
     1 106 153 126  80  32    
     2 130  92  55  15        
     3 125  38   7            
     4 104  26                
     5  50                    
> 
> 
> 
> cleanEx()
> nameEx("Galton")
> ### * Galton
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Galton
> ### Title: Galton's data on the heights of parents and their children
> ### Aliases: Galton
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Don't show: 
> 	# allow to work with car 1
> 	if (packageDescription("car")[["Version"]] < 2) {
+ 		dataEllipse <- data.ellipse
+ 	}
> ## End(Don't show)
> data(Galton)
> 
> ###########################################################################
> # sunflower plot with regression line and data ellipses and lowess smooth
> ###########################################################################
> 
> with(Galton, 
+ 	{
+ 	sunflowerplot(parent,child, xlim=c(62,74), ylim=c(62,74))
+ 	reg <- lm(child ~ parent)
+ 	abline(reg)
+ 	lines(lowess(parent, child), col="blue", lwd=2)
+ 	if(require(car)) {
+ 	dataEllipse(parent,child, xlim=c(62,74), ylim=c(62,74), plot.points=FALSE)
+ 		}
+   })
Loading required package: car
Warning: package 'car' was built under R version 4.4.3
Loading required package: carData
Warning: package 'carData' was built under R version 4.4.3
> 
> 
> 
> 
> cleanEx()

detaching 'package:car', 'package:carData'

> nameEx("GaltonFamilies")
> ### * GaltonFamilies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GaltonFamilies
> ### Title: Galton's data on the heights of parents and their children, by
> ###   child
> ### Aliases: GaltonFamilies
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(GaltonFamilies)
> str(GaltonFamilies)
'data.frame':	934 obs. of  8 variables:
 $ family         : Factor w/ 205 levels "001","002","003",..: 1 1 1 1 2 2 2 2 3 3 ...
 $ father         : num  78.5 78.5 78.5 78.5 75.5 75.5 75.5 75.5 75 75 ...
 $ mother         : num  67 67 67 67 66.5 66.5 66.5 66.5 64 64 ...
 $ midparentHeight: num  75.4 75.4 75.4 75.4 73.7 ...
 $ children       : int  4 4 4 4 4 4 4 4 2 2 ...
 $ childNum       : int  1 2 3 4 1 2 3 4 1 2 ...
 $ gender         : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 1 1 2 1 ...
 $ childHeight    : num  73.2 69.2 69 69 73.5 72.5 65.5 65.5 71 68 ...
> 
> ## reproduce Fig 2 in Hanley (2004)
> library(car)
Warning: package 'car' was built under R version 4.4.3
Loading required package: carData
Warning: package 'carData' was built under R version 4.4.3
> scatterplot(childHeight ~ midparentHeight | gender, data=GaltonFamilies, 
+     ellipse=TRUE, levels=0.68, legend.coords=list(x=64, y=78))
Warning in plot.window(...) : "levels" is not a graphical parameter
Warning in plot.window(...) :
  "legend.coords" is not a graphical parameter
Warning in plot.xy(xy, type, ...) :
  "levels" is not a graphical parameter
Warning in plot.xy(xy, type, ...) :
  "legend.coords" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "levels" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "legend.coords" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "levels" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "legend.coords" is not a graphical parameter
Warning in box(...) : "levels" is not a graphical parameter
Warning in box(...) : "legend.coords" is not a graphical parameter
Warning in title(...) : "levels" is not a graphical parameter
Warning in title(...) : "legend.coords" is not a graphical parameter
> 
> # multiply daughters' heights by 1.08
> GF1 <- within(GaltonFamilies, 
+               {childHeight <- ifelse (gender=="female", 1.08*childHeight, childHeight)} )
> scatterplot(childHeight ~ midparentHeight | gender, data=GF1, 
+     ellipse=TRUE, levels=0.68, legend.coords=list(x=64, y=78))
Warning in plot.window(...) : "levels" is not a graphical parameter
Warning in plot.window(...) :
  "legend.coords" is not a graphical parameter
Warning in plot.xy(xy, type, ...) :
  "levels" is not a graphical parameter
Warning in plot.xy(xy, type, ...) :
  "legend.coords" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "levels" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "legend.coords" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "levels" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "legend.coords" is not a graphical parameter
Warning in box(...) : "levels" is not a graphical parameter
Warning in box(...) : "legend.coords" is not a graphical parameter
Warning in title(...) : "levels" is not a graphical parameter
Warning in title(...) : "legend.coords" is not a graphical parameter
> 
> # add 5.2 to daughters' heights 
> GF2 <- within(GaltonFamilies, 
+               {childHeight <- ifelse (gender=="female", childHeight+5.2, childHeight)} )
> scatterplot(childHeight ~ midparentHeight | gender, data=GF2, 
+     ellipse=TRUE, levels=0.68, legend.coords=list(x=64, y=78))
Warning in plot.window(...) : "levels" is not a graphical parameter
Warning in plot.window(...) :
  "legend.coords" is not a graphical parameter
Warning in plot.xy(xy, type, ...) :
  "levels" is not a graphical parameter
Warning in plot.xy(xy, type, ...) :
  "legend.coords" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "levels" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "legend.coords" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "levels" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "legend.coords" is not a graphical parameter
Warning in box(...) : "levels" is not a graphical parameter
Warning in box(...) : "legend.coords" is not a graphical parameter
Warning in title(...) : "levels" is not a graphical parameter
Warning in title(...) : "legend.coords" is not a graphical parameter
> 
> #########################################
> # relationship between heights of parents
> #########################################
> 
> Parents <- subset(GaltonFamilies, !duplicated(GaltonFamilies$family))
> 
> with(Parents, {
+   sunflowerplot(mother, father, rotate=TRUE, pch=16, 
+      xlab="Mother height", ylab="Father height")
+ 	dataEllipse(mother, father, add=TRUE, plot.points=FALSE, 
+      center.pch=NULL, levels=0.68)
+ 	abline(lm(father ~ mother), col="red", lwd=2)
+ 	}
+ 	)
> 
> 
> 
> 
> cleanEx()

detaching 'package:car', 'package:carData'

> nameEx("Guerry")
> ### * Guerry
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Guerry
> ### Title: Data from A.-M. Guerry, "Essay on the Moral Statistics of
> ###   France"
> ### Aliases: Guerry
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Guerry)
> ## maybe str(Guerry) ; plot(Guerry) ...
> 
> 
> 
> cleanEx()
> nameEx("HalleyLifeTable")
> ### * HalleyLifeTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: HalleyLifeTable
> ### Title: Halley's Life Table
> ### Aliases: HalleyLifeTable
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(HalleyLifeTable)
> # what was the estimated population of Breslau?
> sum(HalleyLifeTable$number)
[1] 33894
> 
> # plot survival vs. age
> plot(number ~ age, data=HalleyLifeTable, type="h", ylab="Number surviving")
> 
> # population pyramid is transpose of this
> plot(age ~ number, data=HalleyLifeTable, type="l", xlab="Number surviving")
> with(HalleyLifeTable, segments(0, age, number, age, lwd=2))
> 
> # conditional probability of survival, one more year
> plot(ratio ~ age, data=HalleyLifeTable, ylab="Probability survive one more year")
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("HistData-package")
> ### * HistData-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: HistData-package
> ### Title: Data sets from the History of Statistics and Data Visualization
> ### Aliases: HistData-package HistData
> ### Keywords: package
> 
> ### ** Examples
> 
> # see examples for the separate data sets
> 
> 
> 
> cleanEx()
> nameEx("Jevons")
> ### * Jevons
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Jevons
> ### Title: W. Stanley Jevons' data on numerical discrimination
> ### Aliases: Jevons
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Jevons)
> # show as tables
> xtabs(frequency ~ estimated+actual, data=Jevons)
         actual
estimated   3   4   5   6   7   8   9  10  11  12  13  14  15
       3   23   0   0   0   0   0   0   0   0   0   0   0   0
       4    0  65   0   0   0   0   0   0   0   0   0   0   0
       5    0   0 102   7   0   0   0   0   0   0   0   0   0
       6    0   0   4 120  18   0   0   0   0   0   0   0   0
       7    0   0   1  20 113  30   2   0   0   0   0   0   0
       8    0   0   0   0  25  76  24   6   1   0   0   0   0
       9    0   0   0   0   0  28  76  37  11   1   0   0   0
       10   0   0   0   0   0   1  18  46  19   4   0   0   0
       11   0   0   0   0   0   0   2  16  26  17   7   2   0
       12   0   0   0   0   0   0   0   2  12  19  11   3   2
       13   0   0   0   0   0   0   0   0   0   3   6   3   1
       14   0   0   0   0   0   0   0   0   0   1   1   4   6
       15   0   0   0   0   0   0   0   0   0   0   1   2   2
> xtabs(frequency ~ error+actual, data=Jevons)
     actual
error   3   4   5   6   7   8   9  10  11  12  13  14  15
   -2   0   0   1   0   0   1   2   2   0   1   1   0   0
   -1   0   0   4  20  25  28  18  16  12   3   1   2   0
   0   23  65 102 120 113  76  76  46  26  19   6   4   2
   1    0   0   0   7  18  30  24  37  19  17  11   3   6
   2    0   0   0   0   0   0   2   6  11   4   7   3   1
   3    0   0   0   0   0   0   0   0   1   1   0   2   2
> 
> # show as sunflowerplot with regression line
> with(Jevons, sunflowerplot(actual, estimated, frequency, 
+   main="Jevons data on numerical estimation"))
> Jmod <-lm(estimated ~ actual, data=Jevons, weights=frequency)
> abline(Jmod)
> 
> # show as balloonplots
> if (require(gplots)) {
+ 
+ with(Jevons, balloonplot(actual, estimated, frequency, xlab="actual", ylab="estimated", 
+   main="Jevons data on numerical estimation\nBubble area proportional to frequency",
+   text.size=0.8))
+ 
+ with(Jevons, balloonplot(actual, error, frequency, xlab="actual", ylab="error", 
+   main="Jevons data on numerical estimation: Errors\nBubble area proportional to frequency", 
+   text.size=0.8))
+ }
Loading required package: gplots
Warning: package 'gplots' was built under R version 4.4.3

Attaching package: 'gplots'

The following object is masked from 'package:stats':

    lowess

> 
> # plot average error
> if(require(reshape)) {
+ unJevons <- untable(Jevons, Jevons$frequency)
+ str(unJevons)
+ 
+ require(plyr)
+ mean_error <- function(df) mean(df$error, na.rm=TRUE)
+ Jmean <- ddply(unJevons, .(actual), mean_error)
+ with(Jmean, plot(actual, V1, ylab='Mean error', xlab='Actual number', type='b', main='Jevons data'))
+ abline(h=0)
+ }
Loading required package: reshape
Warning: package 'reshape' was built under R version 4.4.3
'data.frame':	1027 obs. of  4 variables:
 $ actual   : num  3 3 3 3 3 3 3 3 3 3 ...
 $ estimated: num  3 3 3 3 3 3 3 3 3 3 ...
 $ frequency: num  23 23 23 23 23 23 23 23 23 23 ...
 $ error    : num  0 0 0 0 0 0 0 0 0 0 ...
Loading required package: plyr
Warning: package 'plyr' was built under R version 4.4.3

Attaching package: 'plyr'

The following objects are masked from 'package:reshape':

    rename, round_any

> 
> 
> 
> 
> cleanEx()

detaching 'package:plyr', 'package:reshape', 'package:gplots'

> nameEx("Langren")
> ### * Langren
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Langren
> ### Title: van Langren's Data on Longitude Distance between Toledo and Rome
> ### Aliases: Langren Langren1644 Langren.all
> ### Keywords: datasets spatial
> 
> ### ** Examples
> 
> data(Langren1644)
> 
> ####################################################
> # reproductions of Langren's graph overlaid on a map
> ####################################################
> 
> if (require(jpeg, quietly=TRUE)) {
+ 
+   gimage <- readJPEG(system.file("images", "google-toledo-rome3.jpg", package="HistData"))
+   # NB: dimensions from readJPEG are y, x, colors
+ 
+   gdim <- dim(gimage)[1:2]
+   ylim <- c(1,gdim[1])
+   xlim <- c(1,gdim[2])
+   op <- par(bty="n", xaxt="n", yaxt="n", mar=c(2, 1, 1, 1) + 0.1)
+   # NB: necessary to scale the plot to the pixel coordinates, and use asp=1
+   plot(xlim, ylim, xlim=xlim, ylim=ylim, type="n", ann=FALSE, asp=1 )
+   rasterImage(gimage, 1, 1, gdim[2], gdim[1])
+ 
+   # pixel coordinates of Toledo and Rome in the image, measured from the bottom left corner
+   toledo.map <- c(131, 59)
+   rome.map <- c(506, 119)
+   
+   # confirm locations of Toledo and Rome
+   points(rbind(toledo.map, rome.map), cex=2)
+   text(131, 95, "Toledo", cex=1.5)
+   text(506, 104, "Roma", cex=1.5)
+ 
+   # set a scale for translation of lat,long to pixel x,y
+   scale <- data.frame(x=c(131, 856), y=c(52,52))
+   rownames(scale)=c(0,30)
+ 
+   # translate from degrees longitude to pixels
+   xlate <- function(x) {
+     131+x*726/30	
+   }
+ 
+   # draw an axis
+   lines(scale)
+   ticks <- xlate(seq(0,30,5))
+   segments(ticks, 52, ticks, 45)
+   text(ticks, 40, seq(0,30,5))
+   text(xlate(8), 17, "Grados de la Longitud", cex=1.7)
+ 
+   # label the observations with the names
+   points(x=xlate(Langren1644$Longitude), y=rep(57, nrow(Langren1644)), 
+          pch=25, col="blue", bg="blue")
+   text(x=xlate(Langren1644$Longitude), y=rep(57, nrow(Langren1644)), 
+        labels=Langren1644$Name, srt=90, adj=c(-.1, .5), cex=0.8)
+   par(op)
+ }
Warning: package 'jpeg' was built under R version 4.4.3
> 
> ### Original implementation using ReadImages, now deprecated & shortly to be removed
> ## Not run: 
> ##D if (require(ReadImages)) {
> ##D   gimage <- read.jpeg(system.file("images", "google-toledo-rome3.jpg", package="HistData"))
> ##D   plot(gimage)
> ##D   
> ##D   # pixel coordinates of Toledo and Rome in the image, measured from the bottom left corner
> ##D   toledo.map <- c(130, 59)
> ##D   rome.map <- c(505, 119)
> ##D   
> ##D   # confirm locations of Toledo and Rome
> ##D   points(rbind(toledo.map, rome.map), cex=2)
> ##D   
> ##D   # set a scale for translation of lat,long to pixel x,y
> ##D   scale <- data.frame(x=c(130, 856), y=c(52,52))
> ##D   rownames(scale)=c(0,30)
> ##D   lines(scale)
> ##D   
> ##D   xlate <- function(x) {
> ##D     130+x*726/30	
> ##D   }
> ##D   points(x=xlate(Langren1644$Longitude), y=rep(57, nrow(Langren1644)), 
> ##D          pch=25, col="blue")
> ##D   text(x=xlate(Langren1644$Longitude), y=rep(57, nrow(Langren1644)), 
> ##D          labels=Langren1644$Name, srt=90, adj=c(0, 0.5), cex=0.8)
> ##D }
> ## End(Not run)
> 
> ### First attempt using ggplot2; temporarily abandonned.
> ## Not run: 
> ##D require(maps)
> ##D require(ggplot2)
> ##D require(reshape)
> ##D require(plyr)
> ##D require(scales)
> ##D 
> ##D # set latitude to that of Toledo
> ##D Langren1644$Latitude <- 39.68
> ##D 
> ##D #          x/long   y/lat
> ##D bbox <- c( 38.186, -9.184,
> ##D            43.692, 28.674 )
> ##D bbox <- matrix(bbox, 2, 2, byrow=TRUE)
> ##D 
> ##D borders <- as.data.frame(map("world", plot = FALSE,
> ##D   xlim = expand_range(bbox[,2], 0.2),
> ##D   ylim = expand_range(bbox[,1], 0.2))[c("x", "y")])
> ##D 
> ##D data(world.cities)
> ##D # get actual locations of Toledo & Rome
> ##D cities <- subset(world.cities,
> ##D   name %in% c("Rome", "Toledo") & country.etc %in% c("Spain", "Italy"))
> ##D colnames(cities)[4:5]<-c("Latitude", "Longitude")
> ##D 
> ##D mplot <- ggplot(Langren1644, aes(Longitude, Latitude) ) +
> ##D   geom_path(aes(x, y), borders, colour = "grey60") +
> ##D   geom_point(y = 40) +
> ##D   geom_text(aes(label = Name), y = 40.1, angle = 90, hjust = 0, size = 3)
> ##D mplot <- mplot +
> ##D 	geom_segment(aes(x=-4.03, y=40, xend=30, yend=40))
> ##D 
> ##D mplot <- mplot +
> ##D   geom_point(data = cities, colour = "red", size = 2) +
> ##D   geom_text(data=cities, aes(label=name), color="red", size=3, vjust=-0.5) +
> ##D   coord_cartesian(xlim=bbox[,2], ylim=bbox[,1])
> ##D 
> ##D # make the plot have approximately aspect ratio = 1
> ##D windows(width=10, height=2)
> ##D mplot
> ## End(Not run)
> 
> 
> ###########################################
> # show variation in estimates across graphs
> ###########################################
> 
> library(lattice)
Warning: package 'lattice' was built under R version 4.4.3
> graph <- paste(Langren.all$Author, Langren.all$Year)
> dotplot(Name ~ Longitude, data=Langren.all)
> 
> dotplot( as.factor(Year) ~ Longitude, data=Langren.all, groups=Name, type="o")
> 
> dotplot(Name ~ Longitude|graph, data=Langren.all, groups=graph)
> 
> # why the gap?
> gap.mod <- glm(Gap ~ Year + Source + Latitude, family=binomial, data=Langren1644)
> anova(gap.mod, test="Chisq")
Analysis of Deviance Table

Model: binomial, link: logit

Response: Gap

Terms added sequentially (first to last)


         Df Deviance Resid. Df Resid. Dev Pr(>Chi)  
NULL                        11    16.3006           
Year      1   1.1207        10    15.1799  0.28977  
Source    1   3.5482         9    11.6317  0.05961 .
Latitude  1   4.9213         8     6.7104  0.02653 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching 'package:lattice', 'package:jpeg'

> nameEx("Macdonell")
> ### * Macdonell
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Macdonell
> ### Title: Macdonell's Data on Height and Finger Length of Criminals, used
> ###   by Gosset (1908)
> ### Aliases: Macdonell MacdonellDF
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Macdonell)
> 
> # display the frequency table
> xtabs(frequency ~ finger+round(height,3), data=Macdonell)
      round(height, 3)
finger 4.63 4.714 4.797 4.88 4.964 5.047 5.13 5.214 5.297 5.38 5.464 5.547 5.63
  9.4     0     0     0    0     0     0    0     0     0    0     0     0    0
  9.5     0     0     0    0     0     1    0     0     0    0     0     0    0
  9.6     0     0     0    0     0     0    0     0     0    0     0     0    0
  9.7     0     0     0    0     0     0    0     0     0    0     0     0    0
  9.8     0     0     0    0     0     0    1     0     0    0     0     0    0
  9.9     0     0     1    0     1     0    1     0     0    0     0     0    0
  10      1     0     0    1     2     0    2     0     0    1     0     0    0
  10.1    0     0     0    1     3     1    0     1     1    0     0     0    0
  10.2    0     0     2    2     2     1    0     2     0    1     0     0    0
  10.3    0     1     1    3     2     2    3     5     0    0     0     0    0
  10.4    0     0     1    1     2     3    3     4     3    3     0     0    0
  10.5    0     0     0    1     3     7    6     4     3    1     3     1    0
  10.6    0     0     0    1     4     5    9    14     6    3     1     0    0
  10.7    0     0     1    2     4     9   14    16    15    7     3     1    2
  10.8    0     0     0    2     5     6   14    27    10    7     1     2    1
  10.9    0     0     0    0     2     6   14    24    27   14    10     4    1
  11      0     0     0    2     6    12   15    31    37   27    17    10    6
  11.1    0     0     0    3     3    12   22    26    24   26    24     7    4
  11.2    0     0     0    3     2     7   21    30    38   29    27    20    4
  11.3    0     0     0    1     0     5   10    24    26   39    26    24    7
  11.4    0     0     0    0     3     4    9    29    56   58    26    22   10
  11.5    0     0     0    0     0     5   11    17    33   57    38    34   25
  11.6    0     0     0    0     2     1    4    13    37   39    48    38   27
  11.7    0     0     0    0     0     2    9    17    30   37    48    45   24
  11.8    0     0     0    0     1     0    2    11    15   35    41    34   29
  11.9    0     0     0    0     1     1    2    12    10   27    32    35   19
  12      0     0     0    0     0     0    1     4     8   19    42    39   22
  12.1    0     0     0    0     0     0    0     2     4   13    22    28   15
  12.2    0     0     0    0     0     0    1     2     5    6    23    17   16
  12.3    0     0     0    0     0     0    0     0     4    8    10    13   20
  12.4    0     0     0    0     0     0    1     1     1    2     7    12    4
  12.5    0     0     0    0     0     0    0     1     0    1     3    12   11
  12.6    0     0     0    0     0     0    0     0     0    1     0     3    5
  12.7    0     0     0    0     0     0    0     0     0    1     1     7    5
  12.8    0     0     0    0     0     0    0     0     0    0     1     2    3
  12.9    0     0     0    0     0     0    0     0     0    0     0     1    2
  13      0     0     0    0     0     0    0     0     0    0     3     0    1
  13.1    0     0     0    0     0     0    0     0     0    0     0     1    1
  13.2    0     0     0    0     0     0    0     0     0    0     1     1    0
  13.3    0     0     0    0     0     0    0     0     0    0     0     0    0
  13.4    0     0     0    0     0     0    0     0     0    0     0     0    0
  13.5    0     0     0    0     0     0    0     0     0    0     0     0    0
      round(height, 3)
finger 5.714 5.797 5.88 5.964 6.047 6.13 6.214 6.297 6.38
  9.4      0     0    0     0     0    0     0     0    0
  9.5      0     0    0     0     0    0     0     0    0
  9.6      0     0    0     0     0    0     0     0    0
  9.7      0     0    0     0     0    0     0     0    0
  9.8      0     0    0     0     0    0     0     0    0
  9.9      0     0    0     0     0    0     0     0    0
  10       0     0    0     0     0    0     0     0    0
  10.1     0     0    0     0     0    0     0     0    0
  10.2     0     0    0     0     0    0     0     0    0
  10.3     0     0    0     0     0    0     0     0    0
  10.4     0     0    0     0     0    0     0     0    0
  10.5     1     0    0     0     0    0     0     0    0
  10.6     1     0    0     0     0    0     0     0    0
  10.7     0     0    0     0     0    0     0     0    0
  10.8     0     0    0     0     0    0     0     0    0
  10.9     0     0    0     0     0    0     0     0    0
  11       0     0    0     0     0    0     0     0    0
  11.1     1     0    0     0     0    0     0     0    0
  11.2     1     0    0     0     0    0     0     0    1
  11.3     2     0    0     0     0    0     0     0    0
  11.4    11     0    0     0     0    0     0     0    0
  11.5    11     2    0     0     0    0     0     0    0
  11.6    12     2    2     0     1    0     0     0    0
  11.7     9     9    2     0     0    0     0     0    0
  11.8    10     5    1     0     0    0     0     0    0
  11.9    10     9    3     1     0    0     0     0    0
  12      16     8    2     2     0    0     0     0    0
  12.1    27    10    4     1     0    0     0     0    0
  12.2    11     8    1     1     0    0     0     0    0
  12.3    23     6    5     0     0    0     0     0    0
  12.4     7     7    1     0     0    1     0     0    0
  12.5     8     6    8     0     2    0     0     0    0
  12.6     7     8    6     3     1    1     0     0    0
  12.7     5     8    2     2     0    0     0     0    0
  12.8     1     8    5     3     1    1     0     0    0
  12.9     2     0    1     1     0    0     0     0    0
  13       0     1    0     2     1    0     0     0    0
  13.1     0     0    0     0     0    0     0     0    0
  13.2     1     0    3     0     0    0     0     0    0
  13.3     0     0    0     1     0    1     0     0    0
  13.4     0     0    0     0     0    0     0     0    0
  13.5     0     0    0     0     1    0     0     0    0
> 
> ## Some examples by james.hanley@mcgill.ca    October 16, 2011
> ## http://www.biostat.mcgill.ca/hanley/
> ## See:  http://www.biostat.mcgill.ca/hanley/Student/
> 
> ###############################################
> ##  naive contour plots of height and finger ##
> ###############################################
>  
> # make a 22 x 42 table
> attach(Macdonell)
> ht <- unique(height) 
> fi <- unique(finger)
> fr <- t(matrix(frequency, nrow=42))
> detach(Macdonell)
> 
> 
> dev.new(width=10, height=5)  # make plot double wide
> op <- par(mfrow=c(1,2),mar=c(0.5,0.5,0.5,0.5),oma=c(2,2,0,0))
> 
> dx <- 0.5/12
> dy <- 0.5/12
> 
> plot(ht,ht,xlim=c(min(ht)-dx,max(ht)+dx),
+            ylim=c(min(fi)-dy,max(fi)+dy), xlab="", ylab="", type="n" )
> 
> # unpack  3000 heights while looping though the frequencies 
> heights <- c()
> for(i in 1:22) {
+ 	for (j in 1:42) {
+ 	 f  <-  fr[i,j]
+ 	 if(f>0) heights <- c(heights,rep(ht[i],f))
+ 	 if(f>0) text(ht[i], fi[j], toString(f), cex=0.4, col="grey40" ) 
+ 	}
+ }
> text(4.65,13.5, "Finger length (cm)",adj=c(0,1), col="black") ;
> text(5.75,9.5, "Height (feet)", adj=c(0,1), col="black") ;
> text(6.1,11, "Observed bin\nfrequencies", adj=c(0.5,1), col="grey40",cex=0.85) ;
> # crude countour plot
> contour(ht, fi, fr, add=TRUE, drawlabels=FALSE, col="grey60")
> 
> 
> # smoother contour plot (Galton smoothed 2-D frequencies this way)
> # [Galton had experience with plotting isobars for meteorological data]
> # it was the smoothed plot that made him remember his 'conic sections'
> # and ask a mathematician to work out for him the iso-density
> # contours of a bivariate Gaussian distribution... 
> 
> dx <- 0.5/12; dy <- 0.05  ; # shifts caused by averaging
> 
> plot(ht,ht,xlim=c(min(ht),max(ht)),ylim=c(min(fi),max(fi)), xlab="", ylab="", type="n"  )
>  
> sm.fr <- matrix(rep(0,21*41),nrow <- 21)
> for(i in 1:21) {
+ 	for (j in 1:41) {
+ 	   smooth.freq  <-  (1/4) * sum( fr[i:(i+1), j:(j+1)] ) 
+ 	   sm.fr[i,j]  <-  smooth.freq
+ 	   if(smooth.freq > 0 )
+ 	   text(ht[i]+dx, fi[j]+dy, sub("^0.", ".",toString(smooth.freq)), cex=0.4, col="grey40" )
+ 	   }
+ 	}
>  
> contour(ht[1:21]+dx, fi[1:41]+dy, sm.fr, add=TRUE, drawlabels=FALSE, col="grey60")
> text(6.05,11, "Smoothed bin\nfrequencies", adj=c(0.5,1), col="grey40", cex=0.85) ;
> par(op)
> dev.new()    # new default device
dev.new(): using pdf(file="Rplots1.pdf")
> 
> #######################################
> ## bivariate kernel density estimate
> #######################################
> 
> if(require(KernSmooth)) {
+ MDest <- bkde2D(MacdonellDF, bandwidth=c(1/8, 1/8))
+ contour(x=MDest$x1, y=MDest$x2, z=MDest$fhat,
+ 	xlab="Height (feet)", ylab="Finger length (cm)", col="red", lwd=2)
+ with(MacdonellDF, points(jitter(height), jitter(finger), cex=0.5))
+ }
Loading required package: KernSmooth
Warning: package 'KernSmooth' was built under R version 4.4.3
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009
> 
> #############################################################
> ## sunflower plot of height and finger with data ellipses  ##
> #############################################################
> 
> with(MacdonellDF, 
+ 	{
+ 	sunflowerplot(height, finger, size=1/12, seg.col="green3",
+ 		xlab="Height (feet)", ylab="Finger length (cm)")
+ 	reg <- lm(finger ~ height)
+ 	abline(reg, lwd=2)
+ 	if(require(car)) {
+ 	dataEllipse(height, finger, plot.points=FALSE, levels=c(.40, .68, .95))
+ 		}
+   })
Loading required package: car
Warning: package 'car' was built under R version 4.4.3
Loading required package: carData
Warning: package 'carData' was built under R version 4.4.3
> 
> 
> ############################################################
> ## Sampling distributions of sample sd (s) and z=(ybar-mu)/s
> ############################################################
> 
> # note that Gosset used a divisor of n (not n-1) to get the sd.
> # He also used Sheppard's correction for the 'binning' or grouping.
> # with concatenated height measurements...
> 
> mu <- mean(heights) ; sigma <- sqrt( 3000 * var(heights)/2999 )
> c(mu,sigma)
[1] 5.4196250 0.2131819
> 
> # 750 samples of size n=4 (as Gosset did)
> 
> # see Student's z, t, and s: What if Gosset had R? 
> # [Hanley J, Julien M, and Moodie E. The American Statistician, February 2008] 
> 
> # see also the photographs from Student's notebook ('Original small sample data and notes")
> # under the link "Gosset' 750 samples of size n=4" 
> # on website http://www.biostat.mcgill.ca/hanley/Student/
> # and while there, look at the cover of the Notebook containing his yeast-cell counts
> # http://www.medicine.mcgill.ca/epidemiology/hanley/Student/750samplesOf4/Covers.JPG
> # (Biometrika 1907) and decide for yourself why Gosset, when forced to write under a 
> # pen-name, might have taken the name he did!
> 
> # PS: Can you figure out what the 750 pairs of numbers signify?
> # hint: look again at the numbers of rows and columns in Macdonell's (frequency) Table III.
> 
> 
> n <- 4
> Nsamples <- 750
> 
> y.bar.values <- s.over.sigma.values <- z.values <- c()
> for (samp in 1:Nsamples) {
+ 	y <- sample(heights,n)
+ 	y.bar <- mean(y)
+ 	s  <-  sqrt( (n/(n-1))*var(y) ) 
+ 	z <- (y.bar-mu)/s
+ 	y.bar.values <- c(y.bar.values,y.bar) 
+ 	s.over.sigma.values <- c(s.over.sigma.values,s/sigma)
+ 	z.values <- c(z.values,z)
+ 	}
> 
> 	
> op <- par(mfrow=c(2,2),mar=c(2.5,2.5,2.5,2.5),oma=c(2,2,0,0))
> # sampling distributions
> hist(heights,breaks=seq(4.5,6.5,1/12), main="Histogram of heights (N=3000)")
> hist(y.bar.values, main=paste("Histogram of y.bar (n=",n,")",sep=""))
> 
> hist(s.over.sigma.values,breaks=seq(0,4,0.1),
+ 	main=paste("Histogram of s/sigma (n=",n,")",sep="")); 
> z=seq(-5,5,0.25)+0.125
> hist(z.values,breaks=z-0.125, main="Histogram of z=(ybar-mu)/s")
> # theoretical
> lines(z, 750*0.25*sqrt(n-1)*dt(sqrt(n-1)*z,3), col="red", lwd=1)
> par(op)
> 
> #####################################################
> ## Chisquare probability plot for bivariate normality
> #####################################################
> 
> mu <- colMeans(MacdonellDF)
> sigma <- var(MacdonellDF)
> Dsq <- mahalanobis(MacdonellDF, mu, sigma)
> 
> Q <- qchisq(1:3000/3000, 2)
> plot(Q, sort(Dsq), xlab="Chisquare (2) quantile", ylab="Squared distance")
> abline(a=0, b=1, col="red", lwd=2)
> 
> 
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching 'package:car', 'package:carData', 'package:KernSmooth'

> nameEx("Mayer")
> ### * Mayer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Mayer
> ### Title: Mayer's Data on the Libration of the Moon.
> ### Aliases: Mayer
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(sp)
Warning: package 'sp' was built under R version 4.4.3
> library(effects)
Warning: package 'effects' was built under R version 4.4.3
Loading required package: carData
Warning: package 'carData' was built under R version 4.4.3
lattice theme set by effectsTheme()
See ?effectsTheme for details.
> data(Mayer)
> 
> # some scatterplots
> plot(Y ~ X2, pch=(15:17)[as.factor(Group)], 
+              col=c("red", "blue", "darkgreen")[as.factor(Group)], data=Mayer)
> abline(lm(Y ~ X2, data=Mayer), lwd=2)
> 
> plot(Y ~ X3, pch=(15:17)[as.factor(Group)], 
+              col=c("red", "blue", "darkgreen")[as.factor(Group)], data=Mayer)
> abline(lm(Y ~ X3, data=Mayer), lwd=2)
> 
> 
> fit <- lm(Y ~ X2 + X3, data=Mayer)
> plot(predictorEffects(fit, residuals=TRUE))
> 
> 
> Avg_Method <- aggregate(Mayer[, 2:5], by = list(Group = Mayer$Group), FUN=sum)
> fit_Mayer <- lm(Y ~ X1 + X2 + X3 - 1, Avg_Method)
> 
> ## See Stigler (1986, p. 23)
> ## W means that the angle found is negative.
> 
> coeffs <- coef(fit_Mayer)
> (alpha <- dd2dms(coeffs[2]))
[1] 1d29'44.896"E
> (beta <- dd2dms(coeffs[1]))
[1] 14d32'49.896"E
> (theta <- dd2dms(asin(coeffs[3]/coeffs[2])*180/pi))
[1] 3d49'6.324"W
> 
> 
> 
> cleanEx()

detaching 'package:effects', 'package:carData', 'package:sp'

> nameEx("Michelson")
> ### * Michelson
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Michelson
> ### Title: Michelson's Determinations of the Velocity of Light
> ### Aliases: Michelson MichelsonSets
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Michelson)
> 
> # density plot (default bandwidth & 0.6 * bw)
> plot(density(Michelson$velocity), xlab="Speed of light - 299000 (km/s)",
+ 	main="Density plots of Michelson data")
> lines(density(Michelson$velocity, adjust=0.6), lty=2)
> rug(jitter(Michelson$velocity))
> abline(v=mean(Michelson$velocity), col="blue")
> abline(v=734.5, col="red", lwd=2)
> text(mean(Michelson$velocity), .004, "mean", srt=90, pos=2)
> text(734.5, .004, "true", srt=90, pos=2)
> 
> # index / time series plot
> plot(Michelson$velocity, type="b")
> abline(h=734.5, col="red", lwd=2)
> lines(lowess(Michelson$velocity), col="blue", lwd=2)
> 
> # examine lag=1 differences
> plot(diff(Michelson$velocity), type="b")
> lines(lowess(diff(Michelson$velocity)), col="blue", lwd=2)
> 
> # examine different data sets
> boxplot(MichelsonSets, ylab="Velocity of light - 299000 (km/s)", xlab="Data set")
> abline(h=734.5, col="red", lwd=2)
> 
> # means and trimmed means
> (mn <-apply(MichelsonSets, 2, mean))
 ds12  ds13  ds14  ds15  ds16 
852.5 854.5 858.5 857.0 839.5 
> (tm <- apply(MichelsonSets, 2, mean, trim=.1))
   ds12    ds13    ds14    ds15    ds16 
853.125 859.375 854.375 856.250 837.500 
> points(1:5, mn)
> points(1:5+.05, tm, pch=16, col="blue")
> 
> 
> 
> 
> cleanEx()
> nameEx("Minard")
> ### * Minard
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Minard
> ### Title: Data from Minard's famous graphic map of Napoleon's march on
> ###   Moscow
> ### Aliases: Minard Minard.cities Minard.troops Minard.temp
> ### Keywords: datasets spatial
> 
> ### ** Examples
> 
> data(Minard.troops)
> data(Minard.cities)
> data(Minard.temp)
> 
> #' ## Load required packages
> require(ggplot2)
Loading required package: ggplot2
Warning: package 'ggplot2' was built under R version 4.4.3
> require(scales)
Loading required package: scales
Warning: package 'scales' was built under R version 4.4.3
> require(gridExtra)
Loading required package: gridExtra
Warning: package 'gridExtra' was built under R version 4.4.3
> 
> #' ## plot path of troops, and another layer for city names
>  plot_troops <- ggplot(Minard.troops, aes(long, lat)) +
+ 		geom_path(aes(linewidth = survivors, colour = direction, group = group),
+                  lineend = "round", linejoin = "round")
>  plot_cities <- geom_text(aes(label = city), size = 4, data = Minard.cities)
>  
> #' ## Combine these, and add scale information, labels, etc.
> #' Set the x-axis limits for longitude explicitly, to coincide with those for temperature
> 
> breaks <- c(1, 2, 3) * 10^5 
> plot_minard <- plot_troops + plot_cities +
+  	scale_size("Survivors", range = c(1, 10), 
+  	            breaks = breaks, labels = scales::comma(breaks)) +
+   scale_color_manual("Direction", 
+                      values = c("grey50", "red"), 
+                      labels=c("Advance", "Retreat")) +
+   coord_cartesian(xlim = c(24, 38)) +
+   xlab(NULL) + 
+   ylab("Latitude") + 
+   ggtitle("Napoleon's March on Moscow") +
+   theme_bw() +
+   theme(legend.position = "inside", 
+         legend.position.inside=c(.8, .2), 
+         legend.box="horizontal")
>  
> #' ## plot temperature vs. longitude, with labels for dates
> plot_temp <- ggplot(Minard.temp, aes(long, temp)) +
+ 	geom_path(color="grey", size=1.5) +
+ 	geom_point(size=2) +
+ 	geom_text(aes(label=date)) +
+ 	xlab("Longitude") + ylab("Temperature") +
+ 	coord_cartesian(xlim = c(24, 38)) + 
+ 	theme_bw()
Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
ℹ Please use `linewidth` instead.
> 	
> 
> #' The plot works best if we  re-scale the plot window to an aspect ratio of ~ 2 x 1
> # windows(width=10, height=5)
> 
> #' Combine the two plots into one
> grid.arrange(plot_minard, plot_temp, nrow=2, heights=c(3,1))
Warning: Removed 1 row containing missing values or values outside the scale range
(`geom_text()`).
> 
> 
> 
> 
> cleanEx()

detaching 'package:gridExtra', 'package:scales', 'package:ggplot2'

> nameEx("Nightingale")
> ### * Nightingale
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Nightingale
> ### Title: Florence Nightingale's data on deaths from various causes in the
> ###   Crimean War
> ### Aliases: Nightingale
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Nightingale)
> 
> # For some graphs, it is more convenient to reshape death rates to long format
> #  keep only Date and death rates
> require(reshape)
Loading required package: reshape
Warning: package 'reshape' was built under R version 4.4.3
> Night<- Nightingale[,c(1,8:10)]
> melted <- melt(Night, "Date")
> names(melted) <- c("Date", "Cause", "Deaths")
> melted$Cause <- sub("\\.rate", "", melted$Cause)
> melted$Regime <- ordered( rep(c(rep('Before', 12), rep('After', 12)), 3), 
+                           levels=c('Before', 'After'))
> Night <- melted
> 
> # subsets, to facilitate separate plotting
> Night1 <- subset(Night, Date < as.Date("1855-04-01"))
> Night2 <- subset(Night, Date >= as.Date("1855-04-01"))
> 
> # sort according to Deaths in decreasing order, so counts are not obscured [thx: Monique Graf]
> Night1 <- Night1[order(Night1$Deaths, decreasing=TRUE),]
> Night2 <- Night2[order(Night2$Deaths, decreasing=TRUE),]
> 
> # merge the two sorted files
> Night <- rbind(Night1, Night2)
> 
> 
> require(ggplot2)
Loading required package: ggplot2
Warning: package 'ggplot2' was built under R version 4.4.3
> # Before plot
> cxc1 <- ggplot(Night1, aes(x = factor(Date), y=Deaths, fill = Cause)) +
+ 		# do it as a stacked bar chart first
+    geom_bar(width = 1, position="identity", stat="identity", color="black") +
+ 		# set scale so area ~ Deaths	
+    scale_y_sqrt() 
> 		# A coxcomb plot = bar chart + polar coordinates
> cxc1 + coord_polar(start=3*pi/2) + 
+ 	ggtitle("Causes of Mortality in the Army in the East") + 
+ 	xlab("")
> 
> # After plot
> cxc2 <- ggplot(Night2, aes(x = factor(Date), y=Deaths, fill = Cause)) +
+    geom_bar(width = 1, position="identity", stat="identity", color="black") +
+    scale_y_sqrt()
> cxc2 + coord_polar(start=3*pi/2) +
+ 	ggtitle("Causes of Mortality in the Army in the East") + 
+ 	xlab("")
> 
> ## Not run: 
> ##D # do both together, with faceting
> ##D cxc <- ggplot(Night, aes(x = factor(Date), y=Deaths, fill = Cause)) +
> ##D  geom_bar(width = 1, position="identity", stat="identity", color="black") + 
> ##D  scale_y_sqrt() +
> ##D  facet_grid(. ~ Regime, scales="free", labeller=label_both)
> ##D cxc + coord_polar(start=3*pi/2) +
> ##D 	ggtitle("Causes of Mortality in the Army in the East") + 
> ##D 	xlab("")
> ## End(Not run)
> 
> ## What if she had made a set of line graphs?
> 
> # these plots are best viewed with width ~ 2 * height 
> colors <- c("blue", "red", "black")
> with(Nightingale, {
+ 	plot(Date, Disease.rate, type="n", cex.lab=1.25, 
+ 		ylab="Annual Death Rate", xlab="Date", xaxt="n",
+ 		main="Causes of Mortality of the British Army in the East");
+ 	# background, to separate before, after
+ 	rect(as.Date("1854/4/1"), -10, as.Date("1855/3/1"), 
+ 		1.02*max(Disease.rate), col=gray(.90), border="transparent");
+ 	text( as.Date("1854/4/1"), .98*max(Disease.rate), "Before Sanitary\nCommission", pos=4);
+ 	text( as.Date("1855/4/1"), .98*max(Disease.rate), "After Sanitary\nCommission", pos=4);
+ 	# plot the data
+ 	points(Date, Disease.rate, type="b", col=colors[1], lwd=3);
+ 	points(Date, Wounds.rate, type="b", col=colors[2], lwd=2);
+ 	points(Date, Other.rate, type="b", col=colors[3], lwd=2)
+ 	}
+ )
> # add custom Date axis and legend
> axis.Date(1, at=seq(as.Date("1854/4/1"), as.Date("1856/3/1"), "3 months"), format="%b %Y")
> legend(as.Date("1855/10/20"), 700, c("Preventable disease", "Wounds and injuries", "Other"),
+ 	col=colors, fill=colors, title="Cause", cex=1.25)
> 
> # Alternatively, show each cause of death as percent of total
> Nightingale <- within(Nightingale, {
+ 	Total <- Disease + Wounds + Other
+ 	Disease.pct <- 100*Disease/Total
+ 	Wounds.pct <- 100*Wounds/Total
+ 	Other.pct <- 100*Other/Total
+ 	})
> 
> colors <- c("blue", "red", "black")
> with(Nightingale, {
+ 	plot(Date, Disease.pct, type="n",  ylim=c(0,100), cex.lab=1.25,
+ 		ylab="Percent deaths", xlab="Date", xaxt="n",
+ 		main="Percentage of Deaths by Cause");
+ 	# background, to separate before, after
+ 	rect(as.Date("1854/4/1"), -10, as.Date("1855/3/1"), 
+ 		1.02*max(Disease.rate), col=gray(.90), border="transparent");
+ 	text( as.Date("1854/4/1"), .98*max(Disease.pct), "Before Sanitary\nCommission", pos=4);
+ 	text( as.Date("1855/4/1"), .98*max(Disease.pct), "After Sanitary\nCommission", pos=4);
+ 	# plot the data
+ 	points(Date, Disease.pct, type="b", col=colors[1], lwd=3);
+ 	points(Date, Wounds.pct, type="b", col=colors[2], lwd=2);
+ 	points(Date, Other.pct, type="b", col=colors[3], lwd=2)
+ 	}
+ )
> # add custom Date axis and legend
> axis.Date(1, at=seq(as.Date("1854/4/1"), as.Date("1856/3/1"), "3 months"), format="%b %Y")
> legend(as.Date("1854/8/20"), 60, c("Preventable disease", "Wounds and injuries", "Other"),
+ 	col=colors, fill=colors, title="Cause", cex=1.25)
> 
> 
> 
> 
> cleanEx()

detaching 'package:ggplot2', 'package:reshape'

> nameEx("OldMaps")
> ### * OldMaps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: OldMaps
> ### Title: Latitudes and Longitudes of 39 Points in 11 Old Maps
> ### Aliases: OldMaps
> ### Keywords: datasets spatial
> 
> ### ** Examples
> 
> data(OldMaps)
> ## maybe str(OldMaps) ; plot(OldMaps) ...
> 
> with(OldMaps, plot(abs(long),abs(lat), pch=col, col=colors()[point]))
> 
> 
> 
> cleanEx()
> nameEx("PearsonLee")
> ### * PearsonLee
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PearsonLee
> ### Title: Pearson and Lee's data on the heights of parents and children
> ###   classified by gender
> ### Aliases: PearsonLee
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(PearsonLee)
> str(PearsonLee)
'data.frame':	746 obs. of  6 variables:
 $ child    : num  59.5 59.5 59.5 60.5 60.5 61.5 61.5 61.5 61.5 61.5 ...
 $ parent   : num  62.5 63.5 64.5 62.5 66.5 59.5 60.5 62.5 63.5 64.5 ...
 $ frequency: num  0.5 0.5 1 0.5 1 0.25 0.25 0.5 1 0.25 ...
 $ gp       : Factor w/ 4 levels "fd","fs","md",..: 2 2 2 2 2 2 2 2 2 2 ...
 $ par      : Factor w/ 2 levels "Father","Mother": 1 1 1 1 1 1 1 1 1 1 ...
 $ chl      : Factor w/ 2 levels "Daughter","Son": 2 2 2 2 2 2 2 2 2 2 ...
> 
> with(PearsonLee, 
+     {
+     lim <- c(55,80)
+     xv <- seq(55,80, .5)
+     sunflowerplot(parent,child, number=frequency, xlim=lim, ylim=lim, seg.col="gray", size=.1)
+     abline(lm(child ~ parent, weights=frequency), col="blue", lwd=2)
+     lines(xv, predict(loess(child ~ parent, weights=frequency), data.frame(parent=xv)), 
+           col="blue", lwd=2)
+     # NB: dataEllipse doesn't take frequency into account
+     if(require(car)) {
+     dataEllipse(parent,child, xlim=lim, ylim=lim, plot.points=FALSE)
+         }
+   })
Loading required package: car
Warning: package 'car' was built under R version 4.4.3
Loading required package: carData
Warning: package 'carData' was built under R version 4.4.3
> 
> ## separate plots for combinations of (chl, par)
> 
> # this doesn't quite work, because xyplot can't handle weights
> require(lattice)
Loading required package: lattice
Warning: package 'lattice' was built under R version 4.4.3
> xyplot(child ~ parent|par+chl, data=PearsonLee, type=c("p", "r", "smooth"), col.line="red")
> 
> # Using ggplot [thx: Dennis Murphy]
> require(ggplot2)
Loading required package: ggplot2
Warning: package 'ggplot2' was built under R version 4.4.3
> ggplot(PearsonLee, aes(x = parent, y = child, weight=frequency)) +
+    geom_point(size = 1.5, position = position_jitter(width = 0.2)) +
+    geom_smooth(method = lm, aes(weight = PearsonLee$frequency,
+                colour = 'Linear'), se = FALSE, size = 1.5) +
+    geom_smooth(aes(weight = PearsonLee$frequency,
+                colour = 'Loess'), se = FALSE, size = 1.5) +
+    facet_grid(chl ~ par) +
+    scale_colour_manual(breaks = c('Linear', 'Loess'),
+                        values = c('green', 'red')) +
+    theme(legend.position = c(0.14, 0.885),
+         legend.background = element_rect(fill = 'white'))
Warning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2
3.5.0.
ℹ Please use the `legend.position.inside` argument of `theme()` instead.
Warning: Use of `PearsonLee$frequency` is discouraged.
ℹ Use `frequency` instead.
Warning: Use of `PearsonLee$frequency` is discouraged.
ℹ Use `frequency` instead.
`geom_smooth()` using formula = 'y ~ x'
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
> 
> # inverse regression, as in Wachmuth et al. (2003)
> 
> ggplot(PearsonLee, aes(x = child, y = parent, weight=frequency)) +
+    geom_point(size = 1.5, position = position_jitter(width = 0.2)) +
+    geom_smooth(method = lm, aes(weight = PearsonLee$frequency,
+                colour = 'Linear'), se = FALSE, size = 1.5) +
+    geom_smooth(aes(weight = PearsonLee$frequency,
+                colour = 'Loess'), se = FALSE, size = 1.5) +
+    facet_grid(chl ~ par) +
+    scale_colour_manual(breaks = c('Linear', 'Loess'),
+                        values = c('green', 'red')) +
+    theme(legend.position = c(0.14, 0.885),
+         legend.background = element_rect(fill = 'white'))
Warning: Use of `PearsonLee$frequency` is discouraged.
ℹ Use `frequency` instead.
Warning: Use of `PearsonLee$frequency` is discouraged.
ℹ Use `frequency` instead.
`geom_smooth()` using formula = 'y ~ x'
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
> 
> 
> 
> 
> cleanEx()

detaching 'package:ggplot2', 'package:lattice', 'package:car',
  'package:carData'

> nameEx("PolioTrials")
> ### * PolioTrials
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PolioTrials
> ### Title: Polio Field Trials Data
> ### Aliases: PolioTrials
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(PolioTrials)
> ## maybe str(PolioTrials) ; plot(PolioTrials) ...
> 
> 
> 
> cleanEx()
> nameEx("Pollen")
> ### * Pollen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Pollen
> ### Title: Pollen Data Challenge
> ### Aliases: Pollen
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Pollen)
> pairs(Pollen)
> 
> 
> 
> cleanEx()
> nameEx("Prostitutes")
> ### * Prostitutes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Prostitutes
> ### Title: Parent-Duchatelet's time-series data on the number of
> ###   prostitutes in Paris
> ### Aliases: Prostitutes
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Prostitutes)
> ## maybe str(Prostitutes) ; plot(Prostitutes) ...
> 
> 
> 
> cleanEx()
> nameEx("Pyx")
> ### * Pyx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Pyx
> ### Title: Trial of the Pyx
> ### Aliases: Pyx
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Pyx)
> # display as table
> xtabs(count ~ Bags+Deviation, data=Pyx)
         Deviation
Bags      Below -R (-R to -.2) (-.2 to -.l) (-.1 to 0) (0 to .l) (.1 to .2)
  1 and 2       34          57          172        630       597        366
  3             11          17          100        412       172        218
  4             20          22          135        350       184        222
  5             30         102          107        289       209        184
  6             32          27          267        210       236        144
  7             47          65          141        380       157        135
  8             11          21          110        215       361        156
  9             10          38          103        228       425        140
  10            14          13          126        309       290        168
         Deviation
Bags      (.2 to R) Above R
  1 and 2       116      28
  3              57      13
  4              50      17
  5              50      29
  6              56      28
  7              50      25
  8              71      55
  9              36      20
  10             50      30
> 
> # grouped histogram
> # from: https://github.com/drjohnrussell/30DayChartChallenge/blob/main/2025/Challenge08.R
> library(ggplot2)
Warning: package 'ggplot2' was built under R version 4.4.3
> library(dplyr)
Warning: package 'dplyr' was built under R version 4.4.3

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> Pyx |> 
+   mutate(Bags=forcats::fct_relevel(Bags,"5","6","7")) |>
+   group_by(Bags) |> 
+   mutate(percent=count/sum(count)*100) |>
+   ungroup() |>
+   ggplot(aes(x=Deviation, y=percent,
+              group=Bags, fill=Group)) +
+   geom_col(position=position_dodge()) +
+   scale_fill_brewer(palette="Dark2") +
+   theme_minimal() +
+   theme(legend.position = "top") +
+   labs(x="Deviation from the Standard",
+        y="Percentage of an individual bag",
+        title="Trial of the Pyx (1848)",
+        fill="")
> 
> 
> 
> 
> cleanEx()

detaching 'package:dplyr', 'package:ggplot2'

> nameEx("Quarrels")
> ### * Quarrels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Quarrels
> ### Title: Statistics of Deadly Quarrels
> ### Aliases: Quarrels
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Quarrels)
> str(Quarrels)
'data.frame':	779 obs. of  84 variables:
 $ ID               : int  1 2 3 4 5 6 7 8 9 10 ...
 $ year             : int  1914 1914 1914 1914 1914 1914 1918 1915 1916 1918 ...
 $ international    : int  1 1 1 0 1 0 1 1 1 0 ...
 $ colonial         : int  0 0 0 0 0 0 0 0 0 0 ...
 $ revolution       : int  0 0 0 0 0 0 0 0 0 0 ...
 $ nat.grp          : int  0 0 0 1 0 1 0 0 0 1 ...
 $ grp.grpSame      : int  0 0 0 0 0 0 0 0 0 0 ...
 $ grp.grpDif       : int  0 0 0 0 0 0 0 0 0 0 ...
 $ numGroups        : int  16 17 17 15 17 16 17 17 15 16 ...
 $ months           : int  52 43 52 53 52 33 1 642 32 1 ...
 $ pairs            : int  44 44 44 44 44 44 44 44 44 44 ...
 $ monthsPairs      : int  1436 1436 1436 1436 1436 1436 1436 1436 1436 1436 ...
 $ logDeaths        : num  7.2 7.2 7.2 7.2 7.2 7.2 7.2 7.2 7.2 7.2 ...
 $ deaths           : int  15900000 15900000 15900000 15900000 15900000 15900000 15900000 15900000 15900000 15900000 ...
 $ exchangeGoods    : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ obstacleGoods    : Factor w/ 2 levels "0","1": 2 1 1 1 1 1 1 1 1 1 ...
 $ intermarriageOK  : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ intermarriageBan : Factor w/ 2 levels "0","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ simBody          : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ difBody          : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ simDress         : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ difDress         : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ eqWealth         : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ difWealth        : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ simMariagCust    : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ difMariagCust    : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ simRelig         : Factor w/ 2 levels "0","1": 1 2 2 1 2 1 1 2 2 1 ...
 $ difRelig         : Factor w/ 3 levels "0","1","2": 1 1 1 3 1 3 3 1 1 3 ...
 $ philanthropy     : Factor w/ 2 levels "0","1": 1 1 1 1 2 1 1 1 1 1 ...
 $ restrictMigration: Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ sameLanguage     : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ difLanguage      : Factor w/ 2 levels "0","1": 2 2 2 2 2 2 2 2 2 2 ...
 $ simArtSci        : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ travel           : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ ignorance        : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ simPersLiberty   : Factor w/ 1 level "0": 1 1 1 1 1 1 1 1 1 1 ...
 $ difPersLiberty   : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ sameGov          : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ sameGovYrs       : int  0 0 0 0 0 0 0 0 0 0 ...
 $ prevConflict     : Factor w/ 2 levels "0","1": 1 1 2 1 1 1 1 2 1 1 ...
 $ prevConflictYrs  : int  0 0 55 0 0 0 0 48 0 0 ...
 $ chronicFighting  : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ persFriendship   : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ persResentment   : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ difLegal         : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ nonintervention  : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ thirdParty       : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ supportEnemy     : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ attackAlly       : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 2 1 ...
 $ rivalsLand       : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ rivalsTrade      : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ churchPower      : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ noExtension      : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ territory        : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 2 1 1 ...
 $ habitation       : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ minerals         : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ StrongHold       : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ taxation         : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ loot             : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ objectedWar      : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ enjoyFight       : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ pride            : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ overpopulated    : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ fightForPay      : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ joinWinner       : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ otherDesiredWar  : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ propaganda3rd    : Factor w/ 1 level "0": 1 1 1 1 1 1 1 1 1 1 ...
 $ protection       : Factor w/ 1 level "0": 1 1 1 1 1 1 1 1 1 1 ...
 $ sympathy         : Factor w/ 3 levels "0","1","2": 2 1 1 1 1 1 1 1 1 1 ...
 $ debt             : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ prevAllies       : Factor w/ 2 levels "0","1": 1 2 2 1 1 1 2 2 1 1 ...
 $ yearsAllies      : int  0 14 14 0 0 0 14 15 0 0 ...
 $ intermingled     : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ interbreeding    : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ propadanda       : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ orderedObey      : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ commerceOther    : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ feltStronger     : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ competeIntellect : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ insecureGovt     : Factor w/ 3 levels "0","1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ prepWar          : Factor w/ 3 levels "0","1","2": 1 3 3 1 3 1 1 1 1 1 ...
 $ RegionalError    : int  3 3 3 2 3 2 2 3 3 2 ...
 $ CasualtyError    : int  3 3 3 3 3 3 3 3 3 3 ...
 $ Auxiliaries      : int  2 2 2 1 2 1 2 2 2 2 ...
> 
> 
> 
> cleanEx()
> nameEx("Saturn")
> ### * Saturn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Saturn
> ### Title: Laplace's Saturn data.
> ### Aliases: Saturn
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Saturn)
> 
> # some scatterplots
> pairs(Saturn[,2:6])
> plot(Y ~ X1, data=Saturn)
> plot(Y ~ X2, data=Saturn)
> 
> # Fit the LS model
> fit <- lm(Y ~ X1 + X2 + X3, data = Saturn)
> # Same residuals of Stigler (1975), Table 1, last column.
> library(sp)
Warning: package 'sp' was built under R version 4.4.3
> dd2dms(residuals(fit)/60)
 [1] 0d1'36.557"W 0d0'5"W      0d1'20.522"E 0d0'29.5"E   0d0'32.846"E
 [6] 0d1'5.731"E  0d0'8.611"E  0d0'52.431"E 0d0'28.797"W 0d1'23.269"W
[11] 0d0'22.327"W 0d0'7.241"E  0d0'53.009"E 0d0'56.267"E 0d0'49.954"E
[16] 0d0'3.021"W  0d1'40.877"W 0d1'35.443"W 0d0'28.785"E 0d1'34.181"W
[21] 0d0'26.548"W 0d0'18.818"E 0d0'15.347"E 0d0'56.958"E
> 
> 
> 
> cleanEx()

detaching 'package:sp'

> nameEx("Snow")
> ### * Snow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Snow
> ### Title: John Snow's Map and Data on the 1854 London Cholera Outbreak
> ### Aliases: Snow Snow.deaths Snow.deaths2 Snow.pumps Snow.streets
> ###   Snow.polygons Snow.dates
> ### Keywords: datasets spatial
> 
> ### ** Examples
> 
> data(Snow.deaths)
> data(Snow.pumps)
> data(Snow.streets)
> data(Snow.polygons)
> data(Snow.deaths)
> 
> ## Plot deaths over time
> require(lubridate)
Loading required package: lubridate
Warning: package 'lubridate' was built under R version 4.4.3

Attaching package: 'lubridate'

The following objects are masked from 'package:base':

    date, intersect, setdiff, union

> clr <- ifelse(Snow.dates$date < mdy("09/08/1854"), "red", "darkgreen")
> plot(deaths ~ date, data=Snow.dates, 
+      type="h", lwd=2, col=clr)
> points(deaths ~ date, data=Snow.dates, 
+        cex=0.5, pch=16, col=clr)
> text( mdy("09/08/1854"), 40, "Pump handle\nremoved Sept. 8", pos=4)
> 
> 
> ## draw Snow's map and data
> 
> SnowMap()
> 
> # add polygons
> SnowMap(polygons=TRUE, main="Snow's Cholera Map with Pump Polygons")
> 
> # zoom in a bit, and show density estimate
> SnowMap(xlim=c(7.5,16.5), ylim=c(7,16), polygons=TRUE, density=TRUE,
+         main="Snow's Cholera Map, Annotated")
> 
> 
> ## re-do this the sp way... [thx: Stephane Dray]
> library(sp)
Warning: package 'sp' was built under R version 4.4.3
> 
> # streets
> slist <- split(Snow.streets[,c("x","y")],as.factor(Snow.streets[,"street"]))
> Ll1 <- lapply(slist,Line)
> Lsl1 <- Lines(Ll1,"Street")
> Snow.streets.sp <- SpatialLines(list(Lsl1))
> plot(Snow.streets.sp, col="gray")
> title(main="Snow's Cholera Map of London (sp)")
> 
> # deaths
> Snow.deaths.sp = SpatialPoints(Snow.deaths[,c("x","y")])
> plot(Snow.deaths.sp, add=TRUE, col ='red', pch=15, cex=0.6)
> 
> # pumps
> spp <- SpatialPoints(Snow.pumps[,c("x","y")])
> Snow.pumps.sp <- SpatialPointsDataFrame(spp,Snow.pumps[,c("x","y")])
> plot(Snow.pumps.sp, add=TRUE, col='blue', pch=17, cex=1.5)
> text(Snow.pumps[,c("x","y")], labels=Snow.pumps$label, pos=1, cex=0.8)
> 
> 
> 
> cleanEx()

detaching 'package:sp', 'package:lubridate'

> nameEx("SnowMap")
> ### * SnowMap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SnowMap
> ### Title: Draw John Snow's Map of Cholera in London
> ### Aliases: SnowMap Splot Sdeaths Spumps Sstreets Sscale Spolygons
> ###   Sdensity
> ### Keywords: hplot
> 
> ### ** Examples
> 
> SnowMap()
> SnowMap(axis.labels=TRUE)
> SnowMap(deaths.args=list(col="darkgreen"))
> 
> SnowMap(polygons=TRUE, main="Snow's Cholera Map with Pump Polygons")
> 
> SnowMap(density=TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("Virginis")
> ### * Virginis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Virginis
> ### Title: John F. W. Herschel's Data on the Orbit of the Twin Stars gamma
> ###   _Virginis_
> ### Aliases: Virginis Virginis.interp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Virginis)
> data(Virginis.interp)
> 
> # Herschel's interpolated curve
> plot(posangle ~ year, data=Virginis.interp, 
+ 	pch=15, type="b", col="red", cex=0.8, lwd=2,
+ 	xlim=c(1710,1840), ylim=c(80, 170),
+ 	ylab="Position angle (deg.)", xlab="Year",
+ 	cex.lab=1.5)
> 
> # The data points, and indication of their uncertainty
> points(posangle ~ year, data=Virginis, pch=16)
> points(posangle ~ year, data=Virginis, cex=weight/2)
> 
> 
> 
> 
> cleanEx()
> nameEx("Wheat")
> ### * Wheat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Wheat
> ### Title: Playfair's Data on Wages and the Price of Wheat
> ### Aliases: Wheat Wheat.monarchs
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Wheat)
> 
> data(Wheat)
> 
> # ------------------------------------
> # Playfair's graph, largely reproduced
> # ------------------------------------
> 
> # convenience function to fill area under a curve down to a minimum value
> fillpoly <- function(x,y, low=min(y),  ...) {
+     n <- length(x)
+     polygon( c(x, x[n], x[1]), c(y, low, low), ...)
+ }
> 
> # For best results, this graph should be viewed with width ~ 2 * height
> # Note use of type='s' to plot a step function for Wheat
> #   and panel.first to provide a background grid()
> #     The curve for Wages is plotted after the polygon below it is filled
> with(Wheat, {
+     plot(Year, Wheat, type="s", ylim=c(0,105), 
+         ylab="Price of the Quarter of Wheat (shillings)", 
+         panel.first=grid(col=gray(.9), lty=1))
+     fillpoly(Year, Wages, low=0, col="lightskyblue", border=NA)
+     lines(Year, Wages, lwd=3, col="red")
+     })
> 
> 
> # add some annotations
> text(1625,10, "Weekly wages of a good mechanic", cex=0.8, srt=3, col="red")
> 
> # cartouche
> text(1650, 85, "Chart", cex=2, font=2)
> text(1650, 70, 
+ 	paste("Shewing at One View", 
+         "The Price of the Quarter of Wheat", 
+         "& Wages of Labor by the Week", 
+         "from the Year 1565 to 1821",
+         "by William Playfair",
+         sep="\n"), font=3)
> 
> # add the time series bars to show reigning monarchs
> # distinguish Cromwell visually, as Playfair did
> with(Wheat.monarchs, {
+ 	y <- ifelse( !commonwealth & (!seq_along(start) %% 2), 102, 104)
+ 	segments(start, y, end, y, col="black", lwd=7, lend=1)
+ 	segments(start, y, end, y, col=ifelse(commonwealth, "white", NA), lwd=4, lend=1)
+ 	text((start+end)/2, y-2, name, cex=0.5)
+ 	})
> 
> # -----------------------------------------
> # plot the labor cost of a quarter of wheat
> # -----------------------------------------
> Wheat1 <- within(na.omit(Wheat), {Labor=Wheat/Wages})
> with(Wheat1, {
+ 	plot(Year, Labor, type='b', pch=16, cex=1.5, lwd=1.5, 
+ 	     ylab="Labor cost of a Quarter of Wheat (weeks)",
+ 	     ylim=c(1,12.5));
+ 	lines(lowess(Year, Labor), col="red", lwd=2)
+ 	})
> 	
> # cartouche
> text(1740, 10, "Chart", cex=2, font=2)
> text(1740, 8.5, 
+ 	paste("Shewing at One View", 
+         "The Work Required to Purchase", 
+         "One Quarter of Wheat", 
+         sep="\n"), cex=1.5, font=3)
> 
> with(Wheat.monarchs, {
+ 	y <- ifelse( !commonwealth & (!seq_along(start) %% 2), 12.3, 12.5)
+ 	segments(start, y, end, y, col="black", lwd=7, lend=1)
+ 	segments(start, y, end, y, col=ifelse(commonwealth, "white", NA), lwd=4, lend=1)
+ 	text((start+end)/2, y-0.2, name, cex=0.5)
+ 	})
> 
> 
> 
> cleanEx()
> nameEx("Yeast")
> ### * Yeast
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Yeast
> ### Title: Student's (1906) Yeast Cell Counts
> ### Aliases: Yeast YeastD.mat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Yeast)
> 
> require(lattice)
Loading required package: lattice
Warning: package 'lattice' was built under R version 4.4.3
> # basic bar charts 
> # TODO: frequencies should start at 0, not 1.
> barchart(count~freq|sample, data=Yeast, ylab="Number of Cells", xlab="Frequency")
> barchart(freq~count|sample, data=Yeast, xlab="Number of Cells", ylab="Frequency",
+ 	horizontal=FALSE, origin=0)
> 
> # same, using xyplot
> xyplot(freq~count|sample, data=Yeast, xlab="Number of Cells", ylab="Frequency",
+ 	horizontal=FALSE, origin=0, type="h", lwd=10)
> 
> 
> 
> cleanEx()

detaching 'package:lattice'

> nameEx("ZeaMays")
> ### * ZeaMays
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ZeaMays
> ### Title: Darwin's Heights of Cross- and Self-fertilized Zea May Pairs
> ### Aliases: ZeaMays
> ### Keywords: datasets nonparametric
> 
> ### ** Examples
> 
> data(ZeaMays)
> 
> ##################################
> ## Some preliminary exploration ##
> ##################################
> boxplot(ZeaMays[,c("cross", "self")], ylab="Height (in)", xlab="Fertilization")
> 
> # examine large individual diff/ces
> largediff <- subset(ZeaMays, abs(diff) > 2*sd(abs(diff)))
> with(largediff, segments(1, cross, 2, self, col="red"))
> 
> # plot cross vs. self.  NB: unusual trend and some unusual points
> with(ZeaMays, plot(self, cross, pch=16, cex=1.5))
> abline(lm(cross ~ self, data=ZeaMays), col="red", lwd=2)
> 
> # pot effects ?
>  anova(lm(diff ~ pot, data=ZeaMays))
Analysis of Variance Table

Response: diff
          Df  Sum Sq Mean Sq F value Pr(>F)
pot        3  44.692  14.898  0.6139 0.6201
Residuals 11 266.947  24.268               
> 
> ##############################
> ## Tests of mean difference ##
> ##############################
> # Wilcoxon signed rank test
> # signed ranks:
> with(ZeaMays, sign(diff) * rank(abs(diff)))
 [1]  11 -14   2   4   1   5   7   9   3   8  12   6  15  13 -10
> wilcox.test(ZeaMays$cross, ZeaMays$self, conf.int=TRUE, exact=FALSE)

	Wilcoxon rank sum test with continuity correction

data:  ZeaMays$cross and ZeaMays$self
W = 185.5, p-value = 0.002608
alternative hypothesis: true location shift is not equal to 0
95 percent confidence interval:
 1.625009 4.875007
sample estimates:
difference in location 
              3.374989 

> 
> # t-tests
> with(ZeaMays, t.test(cross, self))

	Welch Two Sample t-test

data:  cross and self
t = 2.4371, df = 22.164, p-value = 0.02328
alternative hypothesis: true difference in means is not equal to 0
95 percent confidence interval:
 0.3909566 4.8423767
sample estimates:
mean of x mean of y 
 20.19167  17.57500 

> with(ZeaMays, t.test(diff))

	One Sample t-test

data:  diff
t = 2.148, df = 14, p-value = 0.0497
alternative hypothesis: true mean is not equal to 0
95 percent confidence interval:
 0.003899165 5.229434169
sample estimates:
mean of x 
 2.616667 

> 
> mean(ZeaMays$diff)
[1] 2.616667
> # complete permutation distribution of diff, for all 2^15 ways of assigning
> # one value to cross and the other to self (thx: Bert Gunter)
> N <- nrow(ZeaMays)
> allmeans <- as.matrix(expand.grid(as.data.frame(
+                          matrix(rep(c(-1,1),N), nr =2))))  %*% abs(ZeaMays$diff) / N
> 
> # upper-tail p-value
> sum(allmeans > mean(ZeaMays$diff)) / 2^N
[1] 0.02548218
> # two-tailed p-value
> sum(abs(allmeans) > mean(ZeaMays$diff)) / 2^N
[1] 0.05096436
> 
> hist(allmeans, breaks=64, xlab="Mean difference, cross-self",
+ 	main="Histogram of all mean differences")
> abline(v=c(1, -1)*mean(ZeaMays$diff), col="red", lwd=2, lty=1:2)
> 
> plot(density(allmeans), xlab="Mean difference, cross-self",
+ 	main="Density plot of all mean differences")
> abline(v=c(1, -1)*mean(ZeaMays$diff), col="red", lwd=2, lty=1:2)
> 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.71 0.83 6.69 NA NA 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
