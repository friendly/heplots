
R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "candisc"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('candisc')
Loading required package: heplots
Loading required package: broom
Warning: package 'broom' was built under R version 4.4.3

Attaching package: 'candisc'

The following object is masked from 'package:stats':

    cancor

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Grass")
> ### * Grass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Grass
> ### Title: Yields from Nitrogen nutrition of grass species
> ### Aliases: Grass
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> str(Grass)
'data.frame':	40 obs. of  7 variables:
 $ Species: Factor w/ 8 levels "B.media","D.glomerata",..: 7 7 7 7 7 2 2 2 2 2 ...
 $ Block  : Factor w/ 5 levels "1","2","3","4",..: 1 2 3 4 5 1 2 3 4 5 ...
 $ N1     : num  1.013 0.945 1.045 0.987 0.826 ...
 $ N9     : num  1.71 1.58 1.48 1.46 1.34 ...
 $ N27    : num  1.64 1.53 1.62 1.55 1.49 ...
 $ N81    : num  2.08 2.07 1.73 2.07 1.89 ...
 $ N243   : num  1.96 2.12 2.09 2.21 1.95 ...
> grass.mod <- lm(cbind(N1,N9,N27,N81,N243) ~ Block + Species, data=Grass)
> car::Anova(grass.mod)

Type II MANOVA Tests: Pillai test statistic
        Df test stat approx F num Df den Df   Pr(>F)    
Block    4   0.90834   1.5865     20    108  0.06902 .  
Species  7   2.03696   2.7498     35    140 1.49e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> grass.canL <-candiscList(grass.mod)
> names(grass.canL)
[1] "Block"   "Species"
> names(grass.canL$Species)
 [1] "dfh"         "dfe"         "eigenvalues" "canrsq"      "pct"        
 [6] "rank"        "ndim"        "means"       "factors"     "term"       
[11] "terms"       "coeffs.raw"  "coeffs.std"  "structure"   "scores"     
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("HSB")
> ### * HSB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: HSB
> ### Title: High School and Beyond Data
> ### Aliases: HSB
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> str(HSB)
'data.frame':	600 obs. of  15 variables:
 $ id     : num  55 114 490 44 26 510 133 213 548 309 ...
 $ gender : Factor w/ 2 levels "male","female": 2 1 1 2 2 1 2 2 2 2 ...
 $ race   : Factor w/ 4 levels "hispanic","asian",..: 1 3 4 1 1 4 3 4 4 4 ...
 $ ses    : Factor w/ 3 levels "low","middle",..: 1 2 2 1 2 2 1 1 2 3 ...
 $ sch    : Factor w/ 2 levels "public","private": 1 1 1 1 1 1 1 1 2 1 ...
 $ prog   : Factor w/ 3 levels "general","academic",..: 1 2 3 3 2 3 3 1 2 1 ...
 $ locus  : num  -1.78 0.24 -1.28 0.22 1.12 ...
 $ concept: num  0.56 -0.35 0.34 -0.76 -0.74 ...
 $ mot    : num  1 1 0.33 1 0.67 ...
 $ career : Factor w/ 17 levels "clerical","craftsman",..: 9 8 9 15 15 8 14 1 10 10 ...
 $ read   : num  28.3 30.5 31 31 31 ...
 $ write  : num  46.3 35.9 35.9 41.1 41.1 ...
 $ math   : num  42.8 36.9 46.1 49.2 36 ...
 $ sci    : num  44.4 33.6 39 33.6 36.9 ...
 $ ss     : num  50.6 40.6 45.6 35.6 45.6 ...
> # main effects model
> hsb.mod <- lm( cbind(read, write, math, sci, ss) ~
+ 		gender + race + ses + sch + prog, data=HSB)
> car::Anova(hsb.mod)

Type II MANOVA Tests: Pillai test statistic
       Df test stat approx F num Df den Df    Pr(>F)    
gender  1   0.19207  27.8615      5    586 < 2.2e-16 ***
race    3   0.20268   8.5207     15   1764 < 2.2e-16 ***
ses     2   0.04965   2.9886     10   1174 0.0009909 ***
sch     1   0.01225   1.4535      5    586 0.2032987    
prog    2   0.21466  14.1152     10   1174 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> # Add some interactions
> hsb.mod1 <- update(hsb.mod, . ~ . + gender:race + ses:prog)
> heplot(hsb.mod1, col=palette()[c(2,1,3:6)], variables=c("read","math"))
> 
> hsb.can1 <- candisc(hsb.mod1, term="race")
> heplot(hsb.can1, col=c("red", "black"))
Vector scale factor set to  6.5031 
> 
> # show canonical results for all terms
> ## Not run: 
> ##D hsb.can <- candiscList(hsb.mod)
> ##D hsb.can
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("Wilks")
> ### * Wilks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Wilks
> ### Title: Wilks Lambda Tests for Canonical Correlations
> ### Aliases: Wilks Wilks.cancor Wilks.candisc
> ### Keywords: htest
> 
> ### ** Examples
> 
> 
> data(Rohwer, package="heplots")
> X <- as.matrix(Rohwer[,6:10])  # the PA tests
> Y <- as.matrix(Rohwer[,3:5])   # the aptitude/ability variables
> 
> cc <- cancor(X, Y, set.names=c("PA", "Ability"))
> Wilks(cc)

Test of H0: The canonical correlations in the 
current row and all that follow are zero

     CanR LR test stat approx F numDF denDF   Pr(> F)    
1 0.67033      0.44011   3.8961    15 168.8 5.535e-06 ***
2 0.38366      0.79923   1.8379     8 124.0   0.07608 .  
3 0.25065      0.93718   1.4078     3  63.0   0.24881    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> iris.mod <- lm(cbind(Petal.Length, Sepal.Length, Petal.Width, Sepal.Width) ~ Species, data=iris)
> iris.can <- candisc(iris.mod, data=iris)
> Wilks(iris.can)

Test of H0: The canonical correlations in the 
current row and all that follow are zero

  LR test stat approx F numDF denDF   Pr(> F)    
1      0.02344  199.145     8   288 < 2.2e-16 ***
2      0.77797   13.794     3   145 5.794e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("Wine")
> ### * Wine
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Wine
> ### Title: Chemical composition of three cultivars of wine
> ### Aliases: Wine
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data(Wine)
> str(Wine)
'data.frame':	178 obs. of  14 variables:
 $ Cultivar      : Factor w/ 3 levels "barolo","grignolino",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Alcohol       : num  14.2 13.2 13.2 14.4 13.2 ...
 $ MalicAcid     : num  1.71 1.78 2.36 1.95 2.59 1.76 1.87 2.15 1.64 1.35 ...
 $ Ash           : num  2.43 2.14 2.67 2.5 2.87 2.45 2.45 2.61 2.17 2.27 ...
 $ AlcAsh        : num  15.6 11.2 18.6 16.8 21 15.2 14.6 17.6 14 16 ...
 $ Mg            : int  127 100 101 113 118 112 96 121 97 98 ...
 $ Phenols       : num  2.8 2.65 2.8 3.85 2.8 3.27 2.5 2.6 2.8 2.98 ...
 $ Flav          : num  3.06 2.76 3.24 3.49 2.69 3.39 2.52 2.51 2.98 3.15 ...
 $ NonFlavPhenols: num  0.28 0.26 0.3 0.24 0.39 0.34 0.3 0.31 0.29 0.22 ...
 $ Proa          : num  2.29 1.28 2.81 2.18 1.82 1.97 1.98 1.25 1.98 1.85 ...
 $ Color         : num  5.64 4.38 5.68 7.8 4.32 6.75 5.25 5.05 5.2 7.22 ...
 $ Hue           : num  1.04 1.05 1.03 0.86 1.04 1.05 1.02 1.06 1.08 1.01 ...
 $ OD            : num  3.92 3.4 3.17 3.45 2.93 2.85 3.58 3.58 2.85 3.55 ...
 $ Proline       : int  1065 1050 1185 1480 735 1450 1290 1295 1045 1045 ...
> #summary(Wine)
> 
> Wine.mlm <- lm(as.matrix(Wine[, -1]) ~ Cultivar, data=Wine)
> Wine.can <- candisc(Wine.mlm)
> Wine.can

Canonical Discriminant Analysis for Cultivar:

   CanRsq Eigenvalue Difference Percent Cumulative
1 0.90081     9.0817     4.9533  68.748     68.748
2 0.80501     4.1285     4.9533  31.252    100.000

Test of H0: The canonical correlations in the 
current row and all that follow are zero

  LR test stat approx F numDF denDF   Pr(> F)    
1     0.019341   77.620    26   326 < 2.2e-16 ***
2     0.194990   56.422    12   164 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> 
> plot(Wine.can, ellipse=TRUE)
Vector scale factor set to 5.214
> plot(Wine.can, which=1)
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("Wolves")
> ### * Wolves
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Wolves
> ### Title: Wolf skulls
> ### Aliases: Wolves
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data(Wolves)
> 
> # using group
> wolf.mod <-lm(cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9) ~ group, data=Wolves)
> car::Anova(wolf.mod)

Type II MANOVA Tests: Pillai test statistic
      Df test stat approx F num Df den Df    Pr(>F)    
group  3    2.2454   4.9592     27     45 1.191e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> wolf.can <-candisc(wolf.mod)
> plot(wolf.can)
Vector scale factor set to 4.932
> heplot(wolf.can)
Vector scale factor set to  12.13042 
> 
> # using location, sex
> wolf.mod2 <-lm(cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9) ~ location*sex, data=Wolves)
> car::Anova(wolf.mod2)

Type II MANOVA Tests: Pillai test statistic
             Df test stat approx F num Df den Df    Pr(>F)    
location      1   0.95246   28.938      9     13 3.624e-07 ***
sex           1   0.84633    7.955      9     13 0.0005229 ***
location:sex  1   0.64944    2.676      9     13 0.0523865 .  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> wolf.can2 <-candiscList(wolf.mod2)
> plot(wolf.can2)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("can_lm")
> ### * can_lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: can_lm
> ### Title: Transform a Multivariate Linear model mlm to a Canonical
> ###   Representation
> ### Aliases: can_lm
> 
> ### ** Examples
> 
> 
> iris.mod <- lm(cbind(Petal.Length, Sepal.Length, Petal.Width, Sepal.Width) ~ Species, data=iris)
> iris.can <- can_lm(iris.mod, "Species")
> iris.can

Call:
lm(formula = cbind(Can1, Can2) ~ Species, data = scores)

Coefficients:
                   Can1     Can2   
(Intercept)        -7.6076  -0.2151
Speciesversicolor   9.4326   0.9430
Speciesvirginica   13.3902  -0.2976

> car::Anova(iris.mod)

Type II MANOVA Tests: Pillai test statistic
        Df test stat approx F num Df den Df    Pr(>F)    
Species  2    1.1919   53.466      8    290 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> car::Anova(iris.can)

Type II MANOVA Tests: Pillai test statistic
        Df test stat approx F num Df den Df    Pr(>F)    
Species  2    1.1919   108.41      4    294 < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> 
> 
> 
> cleanEx()
> nameEx("cancor")
> ### * cancor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cancor
> ### Title: Canonical Correlation Analysis
> ### Aliases: cancor cancor.default cancor.formula print.cancor
> ###   summary.cancor coef.cancor scores scores.cancor
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> 
> data(Rohwer, package="heplots")
> X <- as.matrix(Rohwer[,6:10])  # the PA tests
> Y <- as.matrix(Rohwer[,3:5])   # the aptitude/ability variables
> 
> # visualize the correlation matrix using corrplot()
> if (require(corrplot)) {
+ M <- cor(cbind(X,Y))
+ corrplot(M, method="ellipse", order="hclust", addrect=2, addCoef.col="black")
+ }
Loading required package: corrplot
Warning: package 'corrplot' was built under R version 4.4.3
corrplot 0.95 loaded
> 
> 
> (cc <- cancor(X, Y, set.names=c("PA", "Ability")))

Canonical correlation analysis of:
	 5   PA  variables:  n, s, ns, na, ss 
  with	 3   Ability  variables:  SAT, PPVT, Raven 

    CanR  CanRSQ   Eigen percent    cum                          scree
1 0.6703 0.44934 0.81599   77.30  77.30 ******************************
2 0.3837 0.14719 0.17260   16.35  93.65 ******                        
3 0.2506 0.06282 0.06704    6.35 100.00 **                            

Test of H0: The canonical correlations in the 
current row and all that follow are zero

     CanR LR test stat approx F numDF denDF   Pr(> F)    
1 0.67033      0.44011   3.8961    15 168.8 5.535e-06 ***
2 0.38366      0.79923   1.8379     8 124.0   0.07608 .  
3 0.25065      0.93718   1.4078     3  63.0   0.24881    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> ## Canonical correlation analysis of:
> ##       5   PA  variables:  n, s, ns, na, ss 
> ##   with        3   Ability  variables:  SAT, PPVT, Raven 
> ## 
> ##     CanR  CanRSQ   Eigen percent    cum                          scree
> ## 1 0.6703 0.44934 0.81599   77.30  77.30 ******************************
> ## 2 0.3837 0.14719 0.17260   16.35  93.65 ******                        
> ## 3 0.2506 0.06282 0.06704    6.35 100.00 **                            
> ## 
> ## Test of H0: The canonical correlations in the 
> ## current row and all that follow are zero
> ## 
> ##      CanR  WilksL      F df1   df2  p.value
> ## 1 0.67033 0.44011 3.8961  15 168.8 0.000006
> ## 2 0.38366 0.79923 1.8379   8 124.0 0.076076
> ## 3 0.25065 0.93718 1.4078   3  63.0 0.248814
> 
> 
> # formula method
> cc <- cancor(cbind(SAT, PPVT, Raven) ~  n + s + ns + na + ss, data=Rohwer, 
+     set.names=c("PA", "Ability"))
Warning in model.matrix.default(mt, mf, contrasts) :
  non-list contrasts argument ignored
> 
> # using observation weights
> set.seed(12345)
> wts <- sample(0:1, size=nrow(Rohwer), replace=TRUE, prob=c(.05, .95))
> (ccw <- cancor(X, Y, set.names=c("PA", "Ability"), weights=wts) )

Canonical correlation analysis of:
	 5   PA  variables:  n, s, ns, na, ss 
  with	 3   Ability  variables:  SAT, PPVT, Raven 

    CanR  CanRSQ   Eigen percent    cum                          scree
1 0.6738 0.45396 0.83136  78.894  78.89 ******************************
2 0.3827 0.14645 0.17157  16.282  95.18 ******                        
3 0.2199 0.04837 0.05083   4.824 100.00 **                            

Test of H0: The canonical correlations in the 
current row and all that follow are zero

     CanR LR test stat approx F numDF  denDF   Pr(> F)    
1 0.67376      0.44353   3.4755    15 152.23 4.139e-05 ***
2 0.38268      0.81227   1.5338     8 112.00    0.1534    
3 0.21993      0.95163   0.9658     3  57.00    0.4152    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> # show correlations of the canonical scores 
> zapsmall(cor(scores(cc, type="x"), scores(cc, type="y")))
          Ycan1     Ycan2     Ycan3
Xcan1 0.6703254 0.0000000 0.0000000
Xcan2 0.0000000 0.3836569 0.0000000
Xcan3 0.0000000 0.0000000 0.2506487
> 
> # standardized coefficients
> coef(cc, type="both", standardize=TRUE)
[[1]]
        Xcan1       Xcan2      Xcan3
n  -0.2918658 -0.17681207  0.5064680
s   0.2376371  0.49037479  1.0227353
ns  0.6217178  1.21506423 -0.5090243
na -0.8636882 -0.58576035 -0.3154802
ss -0.5380809 -0.04973148 -0.2171691

[[2]]
           Ycan1      Ycan2      Ycan3
SAT   -0.4279751 -0.7620281  0.7643153
PPVT  -0.8117586  0.2691718 -0.8335792
Raven  0.1940206  0.9301330  0.6401159

> 
> # plot canonical scores
> plot(cc, 
+      smooth=TRUE, pch=16, id.n = 3)
> text(-2, 1.5, paste("Can R =", round(cc$cancor[1], 3)), pos = 4)
> plot(cc, which = 2,
+      smooth=TRUE, pch=16, id.n = 3)
> text(-2.2, 2.5, paste("Can R =", round(cc$cancor[2], 3)), pos = 4)
> 
> ##################
> data(schooldata)
> ##################
> 
> #fit the MMreg model
> school.mod <- lm(cbind(reading, mathematics, selfesteem) ~ 
+ education + occupation + visit + counseling + teacher, data=schooldata)
> car::Anova(school.mod)

Type II MANOVA Tests: Pillai test statistic
           Df test stat approx F num Df den Df    Pr(>F)    
education   1   0.37564  12.4337      3     62 1.820e-06 ***
occupation  1   0.56658  27.0159      3     62 2.687e-11 ***
visit       1   0.26032   7.2734      3     62 0.0002948 ***
counseling  1   0.06465   1.4286      3     62 0.2429676    
teacher     1   0.04906   1.0661      3     62 0.3700291    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> pairs(school.mod)
> 
> # canonical correlation analysis
> school.cc <- cancor(cbind(reading, mathematics, selfesteem) ~ 
+ education + occupation + visit + counseling + teacher, data=schooldata)
Warning in model.matrix.default(mt, mf, contrasts) :
  non-list contrasts argument ignored
> school.cc

Canonical correlation analysis of:
	 5   X  variables:  education, occupation, visit, counseling, teacher 
  with	 3   Y  variables:  reading, mathematics, selfesteem 

    CanR CanRSQ    Eigen  percent    cum                          scree
1 0.9967 0.9934 151.0502 99.09963  99.10 ******************************
2 0.7456 0.5559   1.2516  0.82112  99.92                               
3 0.3283 0.1078   0.1208  0.07925 100.00                               

Test of H0: The canonical correlations in the 
current row and all that follow are zero

     CanR LR test stat approx F numDF  denDF   Pr(> F)    
1 0.99671      0.00261   87.272    15 171.56 < 2.2e-16 ***
2 0.74556      0.39627    9.270     8 126.00 5.476e-10 ***
3 0.32829      0.89222    2.577     3  64.00   0.06141 .  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> heplot(school.cc, xpd=TRUE, scale=0.3)
> 
> 
> 
> 
> 
> cleanEx()

detaching 'package:corrplot'

> nameEx("candisc")
> ### * candisc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: candisc
> ### Title: Canonical discriminant analysis
> ### Aliases: candisc candisc.mlm coef.candisc plot.candisc print.candisc
> ###   summary.candisc
> ### Keywords: hplot multivariate
> 
> ### ** Examples
> 
> 
> grass.mod <- lm(cbind(N1,N9,N27,N81,N243) ~ Block + Species, data=Grass)
> car::Anova(grass.mod, test="Wilks")

Type II MANOVA Tests: Wilks test statistic
        Df test stat approx F num Df  den Df    Pr(>F)    
Block    4   0.33721   1.5620     20  80.549   0.08372 .  
Species  7   0.01570   4.9756     35 103.389 1.039e-10 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> grass.can1 <-candisc(grass.mod, term="Species")
> plot(grass.can1)
Vector scale factor set to 5.545
> 
> # library(heplots)
> heplot(grass.can1, scale=6, fill=TRUE)
> 
> # iris data
> iris.mod <- lm(cbind(Petal.Length, Sepal.Length, Petal.Width, Sepal.Width) ~ Species, data=iris)
> iris.can <- candisc(iris.mod, data=iris)
> #-- assign colors and symbols corresponding to species
> col <- c("red", "brown", "green3")
> pch <- 1:3
> plot(iris.can, col=col, pch=pch)
Vector scale factor set to 9.58
> 
> heplot(iris.can)
Vector scale factor set to  43.914 
> 
> # 1-dim plot
> iris.can1 <- candisc(iris.mod, data=iris, ndim=1)
> plot(iris.can1)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("candiscList")
> ### * candiscList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: candiscList
> ### Title: Canonical discriminant analyses
> ### Aliases: candiscList candiscList.mlm plot.candiscList print.candiscList
> ###   summary.candiscList
> ### Keywords: hplot multivariate
> 
> ### ** Examples
> 
> 
> grass.mod <- lm(cbind(N1,N9,N27,N81,N243) ~ Block + Species, data=Grass)
> 
> grass.canL <-candiscList(grass.mod)
> names(grass.canL)
[1] "Block"   "Species"
> names(grass.canL$Species)
 [1] "dfh"         "dfe"         "eigenvalues" "canrsq"      "pct"        
 [6] "rank"        "ndim"        "means"       "factors"     "term"       
[11] "terms"       "coeffs.raw"  "coeffs.std"  "structure"   "scores"     
> 
> ## Not run: 
> ##D print(grass.canL)
> ## End(Not run)
> plot(grass.canL, type="n", ask=FALSE)
Vector scale factor set to 4.527
Vector scale factor set to 5.545
> heplot(grass.canL$Species, scale=6)
> heplot(grass.canL$Block, scale=2)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("dataIndex")
> ### * dataIndex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dataIndex
> ### Title: Indices of observations in a model data frame
> ### Aliases: dataIndex
> ### Keywords: manip utilities
> 
> ### ** Examples
> 
> 
> factors <- expand.grid(A=factor(1:3),B=factor(1:2),C=factor(1:2))
> n <- nrow(factors)
> responses <-data.frame(Y1=10+round(10*rnorm(n)),Y2=10+round(10*rnorm(n)))
> 
> test <- data.frame(factors, responses)
> mod <- lm(cbind(Y1,Y2) ~ A*B, data=test)
> 
> dataIndex(mod, "A")
 [1] 1 2 3 1 2 3 1 2 3 1 2 3
> dataIndex(mod, "A:B")
 [1] 1 2 3 4 5 6 1 2 3 4 5 6
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("heplot.cancor")
> ### * heplot.cancor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: heplot.cancor
> ### Title: Canonical Correlation HE plots
> ### Aliases: heplot.cancor heplot3d.cancor
> ### Keywords: hplot multivariate
> 
> ### ** Examples
> 
> 
> data(Rohwer, package="heplots")
> X <- as.matrix(Rohwer[,6:10])
> Y <- as.matrix(Rohwer[,3:5])
> cc <- cancor(X, Y, set.names=c("PA", "Ability"))
> 
> # basic plot
> heplot(cc)
Vector scale factor set to  1 
> 
> # note relationship of joint hypothesis to individual ones
> heplot(cc, scale=1.25, hypotheses=list("na+ns"=c("na", "ns")))
> 
> # more options
> heplot(cc, hypotheses=list("All X"=colnames(X)),
+ 	fill=c(TRUE,FALSE), fill.alpha=0.2,
+ 	var.cex=1.5, var.col="red", var.lwd=3,
+ 	prefix="Y canonical dimension"
+ 	)
Vector scale factor set to  2 
> 
> # 3D version
> ## Not run: 
> ##D heplot3d(cc, var.lwd=3, var.col="red")
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("heplot.candisc")
> ### * heplot.candisc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: heplot.candisc
> ### Title: Canonical Discriminant HE plots
> ### Aliases: heplot.candisc heplot3d.candisc
> ### Keywords: hplot multivariate
> 
> ### ** Examples
> 
> 
> ## Pottery data, from car package
> data(Pottery, package = "carData")
> pottery.mod <- lm(cbind(Al, Fe, Mg, Ca, Na) ~ Site, data=Pottery)
> pottery.can <-candisc(pottery.mod)
> 
> heplot(pottery.can, var.lwd=3)
Vector scale factor set to  14.83312 
> if(requireNamespace("rgl")){
+ heplot3d(pottery.can, var.lwd=3, scale=10, zlim=c(-3,3), wire=FALSE)
+ }
> 
> 
> # reduce example for CRAN checks time
> 
> ## Can't run this in example
> # rgl::play3d(rgl::spin3d(axis = c(1, 0, 0), rpm = 5), duration=12)
> 
> # reduce example for CRAN checks time
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.cancor")
> ### * plot.cancor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.cancor
> ### Title: Canonical Correlation Plots
> ### Aliases: plot.cancor
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> data(Rohwer, package="heplots")
> X <- as.matrix(Rohwer[,6:10])  # the PA tests
> Y <- as.matrix(Rohwer[,3:5])   # the aptitude/ability variables
> 
> cc <- cancor(X, Y, set.names=c("PA", "Ability"))
> 
> plot(cc)
> # exercise some options
> plot(cc, which=1,
+      smooth=TRUE, 
+      pch = 16,
+      id.n=3, ellipse.args=list(fill=TRUE, fill.alpha = 0.2))
> plot(cc, which=2, smooth=TRUE)
> plot(cc, which=3, smooth=TRUE)
> 
> 
> # plot vectors showing structure correlations of Xcan and Ycan with their own variables
> plot(cc)
> struc <- cc$structure
> Xstruc <- struc$X.xscores[,1]
> Ystruc <- struc$Y.yscores[,1]
> scale <- 2
> 
> # place vectors in the margins of the plot
> usr <- matrix(par("usr"), nrow=2, dimnames=list(c("min", "max"), c("x", "y")))
> ypos <- usr[2,2] - (1:5)/10 
> arrows(0, ypos, scale*Xstruc, ypos, angle=10, len=0.1, col="blue")
> text(scale*Xstruc, ypos, names(Xstruc), pos=2, col="blue")
> 
> xpos <- usr[2,1] - ( 1 + 1:3)/10
> arrows(xpos, 0, xpos, scale*Ystruc, angle=10, len=0.1, col="darkgreen")
> text(xpos, scale*Ystruc, names(Ystruc), pos=1, col="darkgreen")
> 
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("predictor.names")
> ### * predictor.names
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predictor.names
> ### Title: Get predictor names from a 'lm'-like model
> ### Aliases: predictor.names predictor.names.default
> 
> ### ** Examples
> 
> #none
> 
> 
> 
> cleanEx()
> nameEx("redundancy")
> ### * redundancy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: redundancy
> ### Title: Canonical Redundancy Analysis
> ### Aliases: redundancy print.cancor.redundancy
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> 
> 	data(Rohwer, package="heplots")
> X <- as.matrix(Rohwer[,6:10])  # the PA tests
> Y <- as.matrix(Rohwer[,3:5])   # the aptitude/ability variables
> 
> cc <- cancor(X, Y, set.names=c("PA", "Ability"))
> 
> redundancy(cc)

Redundancies for the PA variables & total X canonical redundancy

    Xcan1     Xcan2     Xcan3 total X|Y 
 0.173424  0.042113  0.007966  0.223503 

Redundancies for the Ability variables & total Y canonical redundancy

    Ycan1     Ycan2     Ycan3 total Y|X 
  0.22491   0.03688   0.01564   0.27743 
> ## 
> ## Redundancies for the PA variables & total X canonical redundancy
> ## 
> ##     Xcan1     Xcan2     Xcan3 total X|Y 
> ##   0.17342   0.04211   0.00797   0.22350 
> ## 
> ## Redundancies for the Ability variables & total Y canonical redundancy
> ## 
> ##     Ycan1     Ycan2     Ycan3 total Y|X 
> ##    0.2249    0.0369    0.0156    0.2774 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("varOrder")
> ### * varOrder
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: varOrder
> ### Title: Order variables according to canonical structure or other
> ###   criteria
> ### Aliases: varOrder varOrder.mlm varOrder.data.frame varOrder.default
> ### Keywords: manip multivariate
> 
> ### ** Examples
> 
> 
> data(Wine, package="candisc")
> Wine.mod <- lm(as.matrix(Wine[, -1]) ~ Cultivar, data=Wine)
> Wine.can <- candisc(Wine.mod)
> plot(Wine.can, ellipse=TRUE)
Vector scale factor set to 5.214
> 
> # pairs.mlm HE plot, variables in given order
> pairs(Wine.mod, fill=TRUE, fill.alpha=.1, var.cex=1.5)
> 
> order <- varOrder(Wine.mod)
> pairs(Wine.mod, variables=order, fill=TRUE, fill.alpha=.1, var.cex=1.5)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("vecscale")
> ### * vecscale
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vecscale
> ### Title: Scale vectors to fill the current plot
> ### Aliases: vecscale
> ### Keywords: manip
> 
> ### ** Examples
> 
> 
> bbox <- matrix(c(-3, 3, -2, 2), 2, 2)
> colnames(bbox) <- c("x","y")
> rownames(bbox) <- c("min", "max")
> bbox
     x  y
min -3 -2
max  3  2
> 
> vecs <- matrix( runif(10, -1, 1), 5, 2)
> 
> plot(bbox)
> arrows(0, 0, vecs[,1], vecs[,2], angle=10, col="red")
> (s <- vecscale(vecs))
[1] 2.307302
> arrows(0, 0, s*vecs[,1], s*vecs[,2], angle=10)
> 
> 
> 
> 
> cleanEx()
> nameEx("vectors")
> ### * vectors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vectors
> ### Title: Draw Labeled Vectors in 2D or 3D
> ### Aliases: vectors vectors3d
> ### Keywords: aplot
> 
> ### ** Examples
> 
> 
> plot(c(-3, 3), c(-3,3), type="n")
> X <- matrix(rnorm(10), ncol=2)
> rownames(X) <- LETTERS[1:5]
> vectors(X, scale=2, col=palette())
> 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.61 0.17 1.79 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
